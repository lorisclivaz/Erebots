{"version":3,"sources":["model/ModelUtils.js","model/QuestionFieldNamesDictionaryToDescription.js","model/ExerciseFieldNamesDictionaryToDescription.js","model/QuestionsUtils.js","model/FieldValuesDictionaryToDescription.js","model/ExerciseSetFieldNamesDictionaryToDescription.js","model/ExerciseSetMappingFieldNamesDictionaryToDescription.js","view/protected/pages/ExerciseSetMappings/ExerciseSetMapping.js"],"names":["OBJECT_REFERENCE_ID_FIELD_NAME","WEEKDAY_ARTIFICIAL_FIELD_NAME","MONTH_ARTIFICIAL_FIELD_NAME","selectDescription","descriptionObj","short","undefined","shortDescription","longDescription","QUESTION_ID_FIELD_NAME","QUESTION_TEXT_EN_FIELD_NAME","QUESTION_TEXT_IT_FIELD_NAME","QUESTION_TEXT_FR_FIELD_NAME","QUESTION_TEXT_DE_FIELD_NAME","QUESTION_NEXT_FIELD_NAME","QUESTION_PREVIOUS_FIELD_NAME","QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","keyPrettyNameShort","keyPrettyNameLong","valuePrettifier","value","JSON","stringify","allQuestionsIDsToDescription","allQuestions","tempMapping","forEach","question","EXERCISE_ID_FIELD_NAME","EXERCISE_TEXT_EN_FIELD_NAME","EXERCISE_TEXT_IT_FIELD_NAME","EXERCISE_TEXT_FR_FIELD_NAME","EXERCISE_TEXT_DE_FIELD_NAME","EXERCISE_LABEL_FIELD_NAME","EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","allExercisesIDsToDescription","allExercises","exercise","getQuestionByID","questionID","find","followNextPointerAndDo","startQuestion","fun","currentQuestion","sortQuestionObjects","firstQuestion","resultQuestions","push","computeQuestionLevel","currentQuestionID","nextCount","_","length","AGE_FIELD_TO_PRETTY_DESCRIPTION","SEX_FIELD_TO_PRETTY_DESCRIPTION","LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION","icon","className","DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION","0","1","2","3","4","SHIFT_FIELD_TO_PRETTY_DESCRIPTION","FUN_FIELD_TO_PRETTY_DESCRIPTION","EXERCISE_SET_ID_FIELD_NAME","EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME","EXERCISE_SET_SUITABLE_FOR_GOAL_IDS_FIELD_NAME","EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","allExerciseSetsIDsToDescription","allExerciseSets","exerciseIDsToDescription","joiningString","exerciseSet","map","oid","join","EXERCISE_SET_MAPPING_ID_FIELD_NAME","EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME","EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME","EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME","EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME","EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","rawValuesToDescriptionMap","description","currentScriptName","ExerciseSetMapping","props","exerciseSetMappingField","fieldNames","formID","defaultExerciseSetListValue","defaultQuestionIdValue","defaultQuestionAnswerValue","defaultQuestionShiftValue","state","createPartialInitialStateFromFields","objID","setCurrentStateFromData","bind","getCurrentID","handleSelectedEvent","setHasExercisesSelected","sendChangesToServer","setErrorMessage","toggleDeletionModal","deleteCurrentFromServer","load","getAll","serverEndPoint","SERVER_EXERCISE_ENDPOINT","SERVER_EXERCISE_SET_ENDPOINT","SERVER_QUESTION_ENDPOINT","isHandlingNewObject","getSingle","SERVER_EXERCISE_MAPPING_ENDPOINT","id","data","this","setState","match","params","field","selected","newField","debug","option","changedState","errorMessage","uploadingChanges","window","scrollTo","hasExercisesSelected","insertNew","formData","FormData","document","getElementById","append","get","serverPromise","postObject","ACTION_CREATE","formDataObject","toUpdateID","ACTION_MODIFY","then","result","history","back","error","warn","message","deletionModalOpen","ACTION_DELETE","lg","errorComponent","color","onClick","isOpen","toggle","formComponent","showLoadingOrRender","questionsPrettyMapping","exercisesPrettyMapping","exerciseSetsPrettyMapping","action","method","encType","row","md","htmlFor","xs","type","name","onChange","e","target","index","key","Object","keys","difficulty","disabled","options","exerciseSetID","label","hasSelectAll","currentSelection","labelledBy","placement","selectedValue","shift","questionShift","toLowerCase","alt","src","require","to","createLoading","Component"],"mappings":"6HAAA,wIAEA,IAAMA,EAAiC,OAGjCC,EAAgC,UAChCC,EAA8B,QAI7B,SAASC,EAAkBC,GAA+B,IAAfC,IAAc,yDAC9D,YAAuBC,IAAnBF,EACKC,EAAQD,EAAeG,iBAAmBH,EAAeI,qBAC7D,I,2WCTDC,EAAyB,MACzBC,EAA8B,UAC9BC,EAA8B,UAC9BC,EAA8B,UAC9BC,EAA8B,UAC9BC,EAA2B,OAC3BC,EAA+B,WAG/BC,GAAkD,mBACrDP,EAAyB,CACxBQ,mBAAoB,KACpBC,kBAAmB,cACnBC,gBAAiB,SAACC,GAAD,OAAsCA,EAAMpB,QAJT,cAMrDU,EAA8B,CAC7BO,mBAAoB,UACpBC,kBAAmB,eACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KATH,cAWrDT,EAA8B,CAC7BM,mBAAoB,UACpBC,kBAAmB,eACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KAdH,cAgBrDR,EAA8B,CAC7BK,mBAAoB,SACpBC,kBAAmB,cACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KAnBH,cAqBrDP,EAA8B,CAC7BI,mBAAoB,SACpBC,kBAAmB,cACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KAxBH,cA0BrDN,EAA2B,CAC1BG,mBAAoB,OACpBC,kBAAmB,gBACnBC,gBAAiB,SAACC,GAAD,OAAsCC,KAAKC,UAAUF,MA7BlB,cA+BrDL,EAA+B,CAC9BE,mBAAoB,WACpBC,kBAAmB,oBACnBC,gBAAiB,SAACC,GAAD,OAAsCC,KAAKC,UAAUF,MAlClB,GAwCxD,SAASG,EAA6BC,GACpC,IAAMC,EAAc,GAIpB,OAHAD,EAAaE,SAAQ,SAAAC,GACnBF,EAAYE,EAASlB,GAAwBT,MAAmC2B,EAASjB,MAEpFe,I,yUCtDHG,EAAyB,MACzBC,EAA8B,UAC9BC,EAA8B,UAC9BC,EAA8B,UAC9BC,EAA8B,UAC9BC,EAA4B,QAI5BC,GAAkD,mBACrDN,EAAyB,CACxBX,mBAAoB,KACpBC,kBAAmB,cACnBC,gBAAiB,SAACC,GAAD,OAAsCA,EAAMpB,QAJT,cAMrD6B,EAA8B,CAC7BZ,mBAAoB,UACpBC,kBAAmB,sBACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KATH,cAWrDU,EAA8B,CAC7Bb,mBAAoB,UACpBC,kBAAmB,sBACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KAdH,cAgBrDW,EAA8B,CAC7Bd,mBAAoB,SACpBC,kBAAmB,qBACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KAnBH,cAqBrDY,EAA8B,CAC7Bf,mBAAoB,SACpBC,kBAAmB,qBACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KAxBH,cA0BrDa,EAA4B,CAC3BhB,mBAAoB,QACpBC,kBAAmB,iBACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KA7BH,cAHnB,WAkCH,CAC9BH,mBAAoB,MACpBC,kBAAmB,YACnBC,gBAAiB,SAACC,GAAD,OAAsCA,KAlCH,GAuCxD,SAASe,EAA6BC,GACpC,IAAMX,EAAc,GAKpB,OAJAW,EAAaV,SAAQ,SAAAW,GACnBZ,EAAYY,EAAST,GAAwB5B,MAC3CqC,EAASJ,IAA8BI,EAASR,MAE7CJ,I,iCC1DT,0FAaA,SAASa,EAAgBd,EAAce,GACrC,OAAOf,EAAagB,MAAK,SAAAb,GACvB,OAAOA,EAASlB,KAAwBT,OAAoCuC,KAUhF,SAASE,EAAuBjB,EAAckB,EAAeC,GAE3D,IADA,IAAIC,EAAkBF,OAC+BpC,IAA9CsC,EAAgB9B,MAAyC,CAG9D6B,EADAC,EAAkBN,EAAgBd,EADXoB,EAAgB9B,KAA0Bd,QAWrE,SAAS6C,EAAoBrB,GAC3B,IAAMsB,EAAgBtB,EAAagB,MAAK,SAAAb,GACtC,YAAkDrB,IAA3CqB,EAASZ,QAGZgC,EAAkB,GAKxB,OAJAA,EAAgBC,KAAKF,GAErBL,EAAuBjB,EAAcsB,GAAe,SAAAnB,GAAQ,OAAIoB,EAAgBC,KAAKrB,MAE9EoB,EAST,SAASE,EAAqBzB,EAAc0B,GAC1C,IAAIC,EAAY,EAIhB,OAFAV,EAAuBjB,EAAcc,EAAgBd,EAAc0B,IAAoB,SAAAE,GAAC,OAAID,OAErF3B,EAAa6B,OAASF,I,iCC/D/B,gOAEMG,EAAkC,CACtC,UAAa,CACX9C,gBAAiB,8BACjBD,iBAAkB,qBAEpB,UAAa,CACXC,gBAAiB,8BACjBD,iBAAkB,qBAEpB,UAAa,CACXC,gBAAiB,8BACjBD,iBAAkB,qBAEpB,UAAa,CACXC,gBAAiB,8BACjBD,iBAAkB,qBAEpB,UAAa,CACXC,gBAAiB,8BACjBD,iBAAkB,qBAEpB,WAAY,CACVC,gBAAiB,qBACjBD,iBAAkB,mBAIhBgD,EAAkC,CACtC,MAAS,CACP/C,gBAAiB,OACjBD,iBAAkB,QAEpB,MAAS,CACPC,gBAAiB,SACjBD,iBAAkB,WAIhBiD,EAAuC,CAC3C,iBAAoB,CAClBhD,gBAAiB,UACjBD,iBAAkB,UAClBkD,KAAM,uBAAGC,UAAS,4BAEpB,iBAAoB,CAClBlD,gBAAiB,UACjBD,iBAAkB,UAClBkD,KAAM,uBAAGC,UAAS,4BAEpB,gBAAmB,CACjBlD,gBAAiB,SACjBD,iBAAkB,SAClBkD,KAAM,uBAAGC,UAAS,4BAEpB,gBAAmB,CACjBlD,gBAAiB,SACjBD,iBAAkB,SAClBkD,KAAM,uBAAGC,UAAS,6BAIhBC,EAAyC,CAC7CC,EAAG,CACDpD,gBAAiB,aACjBD,iBAAkB,cAEpBsD,EAAG,CACDrD,gBAAiB,iBACjBD,iBAAkB,kBAEpBuD,EAAG,CACDtD,gBAAiB,YACjBD,iBAAkB,aAEpBwD,EAAG,CACDvD,gBAAiB,qBACjBD,iBAAkB,sBAEpByD,EAAG,CACDxD,gBAAiB,OACjBD,iBAAkB,SAIhB0D,EAAoC,CACxC,SAAY,CACVzD,gBAAiB,WACjBD,iBAAkB,YAEpB,KAAQ,CACNC,gBAAiB,OACjBD,iBAAkB,SAIhB2D,EAAkC,CACtC,MAAS,CACP1D,gBAAiB,YACjBD,iBAAkB,SAEpB,YAAe,CACbC,gBAAiB,kBACjBD,iBAAkB,eAEpB,UAAa,CACXC,gBAAiB,gBACjBD,iBAAkB,e,mOCxGhB4D,EAA6B,MAC7BC,EAA2C,gBAC3CC,EAAgD,qBAGhDC,GAAsD,mBACzDH,EAA6B,CAC5BlD,mBAAoB,KACpBC,kBAAmB,kBACnBC,gBAAiB,SAACC,GAAD,OAAsCA,EAAMpB,QAJL,cAMzDoE,EAA2C,CAC1CnD,mBAAoB,gBACpBC,kBAAmB,gBACnBC,gBAAiB,SAACC,GAAD,OAAsCC,KAAKC,UAAUF,MATd,cAWzDiD,EAAgD,CAC/CpD,mBAAoB,YACpBC,kBAAmB,qBACnBC,gBAAiB,SAACC,GAAD,OAAsCC,KAAKC,UAAUF,MAdd,GAmB5D,SAASmD,EAAgCC,EAAiBC,GAAiD,IAAvBC,EAAsB,uDAAN,KAC5FjD,EAAc,GAQpB,OAPA+C,EAAgB9C,SAAQ,SAAAiD,GACtBlD,EAAYkD,EAAYR,GAA4BnE,MAClD2E,EAAYP,GAA0CQ,KAAI,SAAAC,GAAG,OAC3DJ,EAAyBI,EAAI7E,SAC7B8E,KAAKJ,MAGJjD,I,8RC3BHsD,EAAqC,MACrCC,EAAuD,yBACvDC,EAA8C,iBAC9CC,EAAkD,cAClDC,EAAiD,iBAGjDC,GAA8D,mBACjEL,EAAqC,CACpC9D,mBAAoB,KACpBC,kBAAmB,0BACnBC,gBAAiB,SAACC,GAAD,OAAsCA,EAAMpB,QAJG,cAMjEiF,EAA8C,CAC7ChE,mBAAoB,WACpBC,kBAAmB,WACnBC,gBAAiB,SAACC,GAAD,OAAsCC,KAAKC,UAAUF,MATN,cAWjE8D,EAAkD,CACjDjE,mBAAoB,SACpBC,kBAAmB,kBACnBmE,0BAA2B1B,IAC3BxC,gBAAiB,SAACC,GAAD,IAAQb,EAAR,+DACfJ,YAAkBwD,IAAuCvC,GAAQb,MAhBH,cAkBjEyE,EAAuD,CACtD/D,mBAAoB,gBACpBC,kBAAmB,yBACnBC,gBAAiB,SAACC,GAAD,OAAsCC,KAAKC,UAAUF,MArBN,cAuBjE+D,EAAiD,CAChDlE,mBAAoB,QACpBC,kBAAmB,iBACnBmE,0BAA2BpB,IAC3B9C,gBAAiB,SAACC,GAAqC,IAA9Bb,EAA6B,wDAC9C+E,EAAcnF,YAAkB8D,IAAkC7C,GAAQb,GAChF,YAAuBD,IAAhBgF,EACH,8BAAM,uBAAG5B,UAAU,yBACnB4B,KA/B0D,I,mZCkD9DC,EAAoB,wBAEpBC,E,kDAqBJ,WAAYC,GAAQ,IAAD,gCACjB,cAAMA,IApBRrD,aAAe,eAmBI,EAlBnBZ,aAAe,eAkBI,EAjBnBgD,gBAAkB,kBAiBC,EAhBnBkB,wBAA0B,qBAgBP,EAdnBC,WAAa,CACX,EAAKD,wBACL,EAAKtD,aACL,EAAKZ,aACL,EAAKgD,iBAUY,EAPnBoB,OAAS,4BAOU,EALnBC,4BAA8B,GAKX,EAJnBC,uBAAyB,GAIN,EAHnBC,2BAA6B,GAGV,EAFnBC,0BAA4B,aAI1B,EAAKC,MAAL,2BACMC,YAAoC,EAAKP,aAD/C,OAEEQ,MAAO,IAFT,cAGGnB,IAAuD,EAAKa,6BAH/D,cAIGZ,IAA8C,EAAKa,wBAJtD,cAKGZ,IAAkD,EAAKa,4BAL1D,cAMGZ,IAAiD,EAAKa,2BANzD,kCAOoB,GAPpB,6BAQgB,IARhB,mCASqB,GATrB,0CAUwB1F,GAVxB,IAaA,EAAK8F,wBAAwBC,KAA7B,gBACA,EAAKC,aAAaD,KAAlB,gBACA,EAAKE,oBAAoBF,KAAzB,gBACA,EAAKG,wBAAwBH,KAA7B,gBACA,EAAKI,oBAAoBJ,KAAzB,gBACA,EAAKK,gBAAgBL,KAArB,gBACA,EAAKM,oBAAoBN,KAAzB,gBACA,EAAKO,wBAAwBP,KAA7B,gBAEAQ,YAAK,eAAM,EAAKzE,aAAc0E,IAAQ,CAACC,eAAgBC,MACvDH,YAAK,eAAM,EAAKrC,gBAAiBsC,IAAQ,CAACC,eAAgBE,MAC1DJ,YAAK,eAAM,EAAKrF,aAAcsF,IAAQ,CAACC,eAAgBG,MAClD,EAAKC,uBACRN,YAAK,eAAM,EAAKnB,wBAAyB0B,IACvC,CAACL,eAAgBM,IAAkCC,GAAI,EAAKhB,iBAC5D,SAACiB,GAAD,OAAU,EAAKnB,wBAAwBmB,MA9B1B,E,2DAmCnB,SAAwBA,GAAO,IAAD,EAC5BC,KAAKC,UAAL,GACEtB,MAAOoB,EAAKxC,KAAoC/E,MADlD,cAGGgF,IACDuC,EAAKvC,KAAsDJ,KAAI,SAAAC,GAAG,OAAIA,EAAI7E,SACvEwH,KAAK3B,6BALV,cAOGZ,IACDsC,EAAKtC,KAA6CjF,MAAmCwH,KAAK1B,wBAR5F,cAUGZ,SAC2D5E,IAA1DiH,EAAKrC,KACDsC,KAAKzB,2BACLwB,EAAKrC,MAbb,cAeGC,IACDoC,EAAKpC,MAAmDqC,KAAKxB,2BAhB/D,0CAkBiF1F,IAAzDiH,EAAKpC,MAlB7B,M,0BAsBF,WACE,OAAOqC,KAAK/B,MAAMiC,MAAMC,OAAOL,K,iCAGjC,WACE,MAA+B,QAAxBE,KAAKlB,iB,iCAGd,SAAoBsB,EAAOC,GAGzB,IAAIC,EAFJC,YAAMxC,EAAD,sCAAmDqC,EAAnD,MAA8DC,GAIjEC,EADEF,IAAU5C,IACD6C,EAASjD,KAAI,SAAAoD,GAAM,OAAIA,EAAO5G,SAE9ByG,EAGb,IAAMI,EAAe,GACrBA,EAAaL,GAASE,EACtBN,KAAKC,SAASQ,K,6BAGhB,SAAgBC,GACdV,KAAKC,SAAS,CACZU,kBAAkB,EAClBD,aAAcA,IAEhBE,OAAOC,SAAS,EAAG,K,qCAGrB,SAAwBC,GACtBd,KAAKC,SAAS,CAACa,qBAAsBA,M,iCAGvC,WAAwC,IAAD,OAAnBC,EAAmB,wDACrCR,YAAMxC,EAAD,oDAAiEgD,IACtEf,KAAKC,SAAS,CACZU,kBAAkB,EAClBD,aAAc,KAGhB,IAAMM,EAAW,IAAIC,SAASC,SAASC,eAAenB,KAAK5B,SAK3D,GAJA4C,EAASI,OACP5D,IACA3D,KAAKC,UAAUkG,KAAKvB,MAAMjB,OAExBwD,EAASK,IAAI5D,OAAiDuC,KAAK1B,uBACrE0B,KAAKd,gBAAgB,6BAChB,GAAI8B,EAASK,IAAI3D,OAAqDsC,KAAKzB,2BAChFyB,KAAKd,gBAAgB,oCAChB,GACL8B,EAASK,IAAI7D,OAA0D3D,KAAKC,UAAUkG,KAAK3B,8BACxF2C,EAASK,IAAI1D,OAAoDqC,KAAKxB,0BAEzEwB,KAAKd,gBAAgB,+DAChB,CACL,IAAIoC,EACJ,GAAIP,EACFO,EAAgBC,YAAWC,IAAe3B,IAAkC,CAAC4B,eAAgBT,QACxF,CACL,IAAMU,EAAa1B,KAAKlB,eACxBwC,EAAgBC,YAAWI,IAAe9B,IAAkC,CAC1EC,GAAI4B,EACJD,eAAgBT,IAIpBM,EAAcM,MACZ,SAACC,GACCtB,YAAMxC,EAAD,2BAAgD8D,GACrD,EAAKjD,wBAAwBiD,GAC7B,EAAK5B,SAAS,CAACU,kBAAkB,IAGjCC,OAAOkB,QAAQC,UAEjB,SAACC,GACCC,YAAKlE,EAAD,oCAAyDiE,EAAME,SACnE,EAAKhD,gBAAgB8C,EAAME,QAAU,gE,iCAM7C,WACElC,KAAKC,SAAS,CAACkC,mBAAoBnC,KAAKvB,MAAM0D,sB,qCAGhD,WAA2B,IAAD,OACxBZ,YAAWa,IAAevC,IAAkC,CAACC,GAAIE,KAAKlB,iBAAiB8C,MACrF,SAAAC,GACEtB,YAAMxC,EAAD,uBAA4C8D,GACjD,EAAK5B,SAAS,CAACU,kBAAkB,IAGjCC,OAAOkB,QAAQC,UAEjB,SAAAC,GACEC,YAAKlE,EAAD,qCAA0DiE,EAAME,SACpE,EAAKhD,gBAAgB8C,EAAME,YAI/BlC,KAAKb,wB,oBAGP,WAAU,IAAD,OACP,OACE,yBAAKjD,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKmG,GAAI,IACsB,KAA5BrC,KAAKvB,MAAMiC,aAAsB,KAAO4B,YAAetC,KAAKvB,MAAMiC,cACnE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,gCACE,uBAAGxE,UAAU,mBAEX8D,KAAKL,sBAAwB,2BAA7B,mCAAsFK,KAAKvB,MAAME,QAInGqB,KAAKL,sBACD,KACA,kBAAC,IAAD,CAAQ4C,MAAM,SACNC,QAASxC,KAAKb,oBAAoBN,KAAKmB,MACvC9D,UAAU,oBAClB,uBAAGA,UAAW,gBAHd,WAMN,kBAAC,IAAD,CAAOuG,OAAQzC,KAAKvB,MAAM0D,kBAAmBO,OAAQ1C,KAAKb,oBAAoBN,KAAKmB,MAC5E9D,UAAW,gBAChB,kBAAC,IAAD,CAAawG,OAAQ1C,KAAKb,oBAAoBN,KAAKmB,OAAnD,+BACA,kBAAC,IAAD,qFAGA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQuC,MAAM,SAASC,QAASxC,KAAKZ,wBAAwBP,KAAKmB,OAAlE,UAAyF,IACzF,kBAAC,IAAD,CAAQuC,MAAM,YAAYC,QAASxC,KAAKb,oBAAoBN,KAAKmB,OAAjE,aAIN,kBAAC,IAAD,KACI,WACA,IAAM2C,EAAgBC,YAAoB,EAAM,EAAKhI,cACnD,SAAAA,GAAY,OAAIgI,YAAoB,EAAM,EAAK5F,iBAC7C,SAAAA,GAAe,OAAI4F,YAAoB,EAAM,EAAK5I,cAChD,SAAAA,GAEE,IAAM6I,EAAyB9I,YAA6BC,GACtD8I,EAAyBnI,YAA6BC,GACtDmI,EAA4BhG,YAChCC,EACA8F,EACA,YAGF,OACE,6BACE,kBAAC,IAAD,CAAMhD,GAAI,EAAK1B,OAAQ4E,OAAO,GAAGC,OAAO,OAAOC,QAAQ,sBACjDhH,UAAU,mBACd,kBAAC,IAAD,CAAWiH,KAAG,GACZ,kBAAC,IAAD,CAAKC,GAAG,KACN,kBAAC,IAAD,CAAOC,QAAQ,mBAAf,aAEF,kBAAC,IAAD,CAAKC,GAAG,KAAKF,GAAG,MACd,kBAAC,IAAD,CAAOG,KAAK,SAASC,KAAM/F,IACpBqC,GAAG,kBACHlG,MAAO,EAAK6E,MAAMhB,KAClBgG,SAAU,SAAAC,GAAC,OACT,EAAK3E,oBAAoBtB,IAA6CiG,EAAEC,OAAO/J,SAEtF,4BAAQA,MAAO,EAAK0E,wBAAyB,EAAKA,wBAEhDjD,YAAoBrB,GAAcoD,KAAI,SAACjD,EAAUyJ,GAC/C,OACE,4BACEC,IAAK1J,EAASlB,KAAwBT,KACtCoB,MAAOO,EAASlB,KAAwBT,MAF1C,SAGSoL,EAAQ,EAHjB,WAGuBzJ,EAASjB,YAQ5C,kBAAC,IAAD,CAAWiK,KAAG,GACZ,kBAAC,IAAD,CAAKC,GAAG,KACN,kBAAC,IAAD,CAAOC,QAAQ,iBAAf,oBAEF,kBAAC,IAAD,CAAKC,GAAG,KAAKF,GAAG,MACd,kBAAC,IAAD,CAAOG,KAAK,SAASC,KAAM9F,IACpBoC,GAAG,gBACHlG,MAAO,EAAK6E,MAAMf,KAClB+F,SAAU,SAAAC,GAAC,OACT,EAAK3E,oBAAoBrB,IAAiDgG,EAAEC,OAAO/J,SAE1F,4BAAQA,MAAO,EAAK2E,4BACjB,EAAKA,4BAGNuF,OAAOC,KAAK5H,KAAwCiB,KAAI,SAAA4G,GACtD,OACE,4BAAQH,IAAKG,EAAYpK,MAAOoK,GAC7B7H,IAAuC6H,GAAYhL,uBAQlE,kBAAC,IAAD,CAAWmK,KAAG,GACZ,kBAAC,IAAD,CAAKC,GAAG,KACN,kBAAC,IAAD,CAAOC,QAAO,6BAAd,6BAIF,kBAAC,IAAD,CAAKD,GAAG,MACN,yBAAKtD,GAAI,6BACP,kBAAC,IAAD,CACEmE,UAA8C,IAApC,EAAKxF,MAAMqC,qBACrBoD,QAASlH,EAAgBI,KAAI,SAAAD,GAC3B,IAAMgH,EAAgBhH,EAAYR,KAA4BnE,KAC9D,MAAO,CACL4L,MAAOrB,EAA0BoB,GACjCvK,MAAOuK,MAGXE,cAAc,EACdzK,MACE,EAAK6E,MAAMjB,KACRJ,KAAI,SAAA+G,GACH,MAAO,CACLC,MAAOrB,EAA0BoB,GACjCvK,MAAOuK,MAIfV,SAAU,SAAAa,GACJzK,KAAKC,UAAUwK,KAAsBzK,KAAKC,UAAU,EAAKuE,6BAC3D,EAAKW,6BAAwBlG,GAE7B,EAAKkG,yBAAwB,GAE/B,EAAKD,oBAAoBvB,IAAsD8G,IAEjFC,WAAY,YAGd,EAAK9F,MAAMd,OAAoD,EAAKa,0BAChE,kBAAC,IAAD,CAAqBgG,UAAU,SAASb,OAAO,6BAA/C,yDAGA,OAIV,kBAAC,IAAD,CAAWR,KAAG,GACZ,kBAAC,IAAD,CAAKC,GAAG,KACN,kBAAC,IAAD,CAAOC,QAAQ,yBAAf,mBAEF,kBAAC,IAAD,CAAKC,GAAG,KAAKF,GAAG,MACd,kBAAC,IAAD,CACEa,UAA8C,IAApC,EAAKxF,MAAMqC,qBACrByC,KAAK,SAASC,KAAM7F,IACpBmC,GAAG,wBACHlG,MAAO,EAAK6E,MAAMd,KAClB8F,SAAU,SAAAC,GACR,IAAMe,EAAgBf,EAAEC,OAAO/J,MAC3B6K,IAAkB,EAAKjG,0BACzB,EAAKQ,6BAAwBlG,GAE7B,EAAKkG,yBAAwB,GAE/B,EAAKD,oBAAoBpB,IAAgD8G,KAE3E,4BAAQ7K,MAAO,EAAK4E,2BACjB,EAAKA,2BAGNsF,OAAOC,KAAKtH,KAAmCW,KAAI,SAAAsH,GACjD,OACE,4BAAQb,IAAKa,EAAO9K,MAAO8K,GACxBjI,IAAkCiI,GAAO1L,qBAOlDa,KAAKC,UAAU,EAAK2E,MAAMjB,QACtB3D,KAAKC,UAAU,EAAKuE,6BACpB,kBAAC,IAAD,CAAqBmG,UAAU,SAASb,OAAO,yBAA/C,+DAGA,QAM8B,IAApC,EAAKlF,MAAMqC,sBACX,EAAKrC,MAAMd,OAAoD,EAAKa,0BAClE,kBAAC,IAAD,CAAW2E,KAAG,GACd,kBAAC,IAAD,CAAKC,GAAG,KACN,kBAAC,IAAD,uBAEF,kBAAC,IAAD,CAAKE,GAAG,KAAKF,GAAG,MACd,uBAAGlH,UAAU,uBACT,WACA,GAAI,EAAKuC,MAAMhB,KAA8C,CAC3D,IAAMkH,EAAgB,EAAKlG,MAAMd,KAC3BvC,EAAkBpB,EAAagB,MAAK,SAAAb,GAAQ,OAChDA,EAASlB,KAAwBT,OACjC,EAAKiG,MAAMhB,QAEb,OAAIkH,EAAcC,gBAAkBtL,IAC9B8B,EAAgB9B,KACZ,gHAAN,OAEEmC,YAAqBzB,EAAcoB,EAAgB9B,KAA0Bd,MAF/E,yHAKEqK,EACEzH,EAAgB9B,KAA0Bd,OAIvC,6DAEL4C,EAAgB7B,KACZ,gHAAN,OAEEkC,YAAqBzB,EAAcoB,EAAgB7B,KAA8Bf,MAFnF,yHAKEqK,EACEzH,EAAgB7B,KAA8Bf,OAI3C,iEAGX,MAAO,yBAnCT,MAyCN,MAGR,yBAAK0D,UAAU,4BACb,kBAAC,IAAD,CAAQqH,KAAK,SAAShB,MAAM,UAAUrG,UAAW,OACzCsG,QAAS,kBAAM,EAAKvD,oBAAoB,EAAKU,wBAC7CsE,SAAU,EAAKxF,MAAMkC,kBAE1B,EAAKlC,MAAMkC,iBACR,yBAAKzE,UAAU,UAAU2I,IAAI,UACxBC,IAAKC,EAAQ,OAClB,KACH,EAAKpF,sBAAwB,SAAW,gBAE3C,kBAAC,OAAD,CAAMqF,GAAI,sCACR,kBAAC,IAAD,CAAQzC,MAAM,YAAY0B,SAAU,EAAKxF,MAAMkC,kBAA/C,eAMVsE,YAAc,OAEhBA,YAAc,OAEhBA,YAAc,KAIhB,OAAO,EAAKtF,sBAAwBgD,EAAgBC,YAClD,EAAM,EAAK1E,yBAAyB,SAAAtC,GAAC,OAAI+G,IAAesC,YAAc,KA/OxE,Y,GA9NeC,aAydlBlH","file":"static/js/30.7014ee36.chunk.js","sourcesContent":["// const currentScriptName = \"ModelUtils.js\";\r\n\r\nconst OBJECT_REFERENCE_ID_FIELD_NAME = '$oid'\r\n\r\nconst HOUR_ARTIFICIAL_FIELD_NAME = 'hour'\r\nconst WEEKDAY_ARTIFICIAL_FIELD_NAME = 'weekday'\r\nconst MONTH_ARTIFICIAL_FIELD_NAME = 'month'\r\nconst YEAR_ARTIFICIAL_FIELD_NAME = 'year'\r\n\r\n/** An internal function to get correct description from mapping objects, or undefined if description obj undefined */\r\nexport function selectDescription(descriptionObj, short = true) {\r\n  if (descriptionObj !== undefined)\r\n    return short ? descriptionObj.shortDescription : descriptionObj.longDescription\r\n  else return undefined\r\n}\r\n\r\nexport {\r\n  OBJECT_REFERENCE_ID_FIELD_NAME,\r\n  YEAR_ARTIFICIAL_FIELD_NAME,\r\n  MONTH_ARTIFICIAL_FIELD_NAME,\r\n  WEEKDAY_ARTIFICIAL_FIELD_NAME,\r\n  HOUR_ARTIFICIAL_FIELD_NAME,\r\n};\r\n","import {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n// const currentScriptName = \"QuestionFieldNamesDictionaryToDescription.js\";\r\n\r\nconst QUESTION_ID_FIELD_NAME = '_id'\r\nconst QUESTION_TEXT_EN_FIELD_NAME = 'text_en'\r\nconst QUESTION_TEXT_IT_FIELD_NAME = 'text_it'\r\nconst QUESTION_TEXT_FR_FIELD_NAME = 'text_fr'\r\nconst QUESTION_TEXT_DE_FIELD_NAME = 'text_de'\r\nconst QUESTION_NEXT_FIELD_NAME = 'next'\r\nconst QUESTION_PREVIOUS_FIELD_NAME = 'previous'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [QUESTION_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"Question ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [QUESTION_TEXT_EN_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"English\",\r\n    keyPrettyNameLong: \"English Text\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [QUESTION_TEXT_IT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Italian\",\r\n    keyPrettyNameLong: \"Italian Text\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [QUESTION_TEXT_FR_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"French\",\r\n    keyPrettyNameLong: \"French Text\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [QUESTION_TEXT_DE_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"German\",\r\n    keyPrettyNameLong: \"German Text\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [QUESTION_NEXT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Next\",\r\n    keyPrettyNameLong: \"Next Question\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n  [QUESTION_PREVIOUS_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Previous\",\r\n    keyPrettyNameLong: \"Previous Question\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n};\r\n\r\n\r\n/** Utility function to get a mapping from ID to the pretty version of the object */\r\nfunction allQuestionsIDsToDescription(allQuestions) {\r\n  const tempMapping = {}\r\n  allQuestions.forEach(question => {\r\n    tempMapping[question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]] = question[QUESTION_TEXT_EN_FIELD_NAME]\r\n  })\r\n  return tempMapping\r\n}\r\n\r\nexport {\r\n  QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  QUESTION_ID_FIELD_NAME,\r\n  QUESTION_TEXT_EN_FIELD_NAME,\r\n  QUESTION_TEXT_IT_FIELD_NAME,\r\n  QUESTION_TEXT_FR_FIELD_NAME,\r\n  QUESTION_TEXT_DE_FIELD_NAME,\r\n  QUESTION_NEXT_FIELD_NAME,\r\n  QUESTION_PREVIOUS_FIELD_NAME,\r\n  allQuestionsIDsToDescription\r\n}\r\n","import {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n// const currentScriptName = \"ExerciseFieldNamesDictionaryToDescription.js\";\r\n\r\nconst EXERCISE_ID_FIELD_NAME = '_id'\r\nconst EXERCISE_TEXT_EN_FIELD_NAME = 'text_en'\r\nconst EXERCISE_TEXT_IT_FIELD_NAME = 'text_it'\r\nconst EXERCISE_TEXT_FR_FIELD_NAME = 'text_fr'\r\nconst EXERCISE_TEXT_DE_FIELD_NAME = 'text_de'\r\nconst EXERCISE_LABEL_FIELD_NAME = 'label'\r\nconst EXERCISE_GIF_PATH_FIELD_NAME = 'gif_path'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [EXERCISE_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"Exercise ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [EXERCISE_TEXT_EN_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"English\",\r\n    keyPrettyNameLong: \"English Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_TEXT_IT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Italian\",\r\n    keyPrettyNameLong: \"Italian Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_TEXT_FR_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"French\",\r\n    keyPrettyNameLong: \"French Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_TEXT_DE_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"German\",\r\n    keyPrettyNameLong: \"German Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_LABEL_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Label\",\r\n    keyPrettyNameLong: \"Mnemonic Label\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_GIF_PATH_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"GIF\",\r\n    keyPrettyNameLong: \"GIF Image\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n};\r\n\r\n/** Utility function to get a mapping from ID to the pretty version of the object */\r\nfunction allExercisesIDsToDescription(allExercises) {\r\n  const tempMapping = {}\r\n  allExercises.forEach(exercise => {\r\n    tempMapping[exercise[EXERCISE_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]] =\r\n      exercise[EXERCISE_LABEL_FIELD_NAME] || exercise[EXERCISE_TEXT_EN_FIELD_NAME]\r\n  })\r\n  return tempMapping\r\n}\r\n\r\n\r\nexport {\r\n  EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  EXERCISE_ID_FIELD_NAME,\r\n  EXERCISE_TEXT_EN_FIELD_NAME,\r\n  EXERCISE_TEXT_IT_FIELD_NAME,\r\n  EXERCISE_TEXT_FR_FIELD_NAME,\r\n  EXERCISE_TEXT_DE_FIELD_NAME,\r\n  EXERCISE_LABEL_FIELD_NAME,\r\n  EXERCISE_GIF_PATH_FIELD_NAME,\r\n  allExercisesIDsToDescription\r\n}\r\n","import {\r\n  QUESTION_ID_FIELD_NAME,\r\n  QUESTION_NEXT_FIELD_NAME,\r\n  QUESTION_PREVIOUS_FIELD_NAME\r\n} from \"./QuestionFieldNamesDictionaryToDescription\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n/**\r\n * Utility function to retrieve a question object among all by ID\r\n * @param allQuestions\r\n * @param questionID\r\n * @return {*}\r\n */\r\nfunction getQuestionByID(allQuestions, questionID) {\r\n  return allQuestions.find(question => {\r\n    return question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME] === questionID\r\n  })\r\n}\r\n\r\n/**\r\n * Utility function to follow the startQuestion next pointer and do some action on each next question\r\n * @param allQuestions\r\n * @param startQuestion\r\n * @param fun\r\n */\r\nfunction followNextPointerAndDo(allQuestions, startQuestion, fun) {\r\n  let currentQuestion = startQuestion\r\n  while (currentQuestion[QUESTION_NEXT_FIELD_NAME] !== undefined) {\r\n    const nextQuestionID = currentQuestion[QUESTION_NEXT_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n    currentQuestion = getQuestionByID(allQuestions, nextQuestionID)\r\n    fun(currentQuestion)\r\n  }\r\n}\r\n\r\n/**\r\n * Returns allQuestions sorted using their next/previous fields\r\n * @param allQuestions\r\n * @return {[]}\r\n */\r\nfunction sortQuestionObjects(allQuestions) {\r\n  const firstQuestion = allQuestions.find(question => {\r\n    return question[QUESTION_PREVIOUS_FIELD_NAME] === undefined\r\n  })\r\n\r\n  const resultQuestions = []\r\n  resultQuestions.push(firstQuestion)\r\n\r\n  followNextPointerAndDo(allQuestions, firstQuestion, question => resultQuestions.push(question))\r\n\r\n  return resultQuestions\r\n}\r\n\r\n/**\r\n * Utility function to compute the level number of a question.\r\n * @param allQuestions\r\n * @param currentQuestionID\r\n * @return {number} The currentQuestionID level\r\n */\r\nfunction computeQuestionLevel(allQuestions, currentQuestionID) {\r\n  let nextCount = 0\r\n\r\n  followNextPointerAndDo(allQuestions, getQuestionByID(allQuestions, currentQuestionID), _ => nextCount++)\r\n\r\n  return allQuestions.length - nextCount\r\n}\r\n\r\nexport {sortQuestionObjects, computeQuestionLevel}\r\n","import React from \"react\";\r\n\r\nconst AGE_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'AGE_18_24': {\r\n    longDescription: \"Age between 18 and 24 years\",\r\n    shortDescription: \"Between 18 and 24\",\r\n  },\r\n  'AGE_25_34': {\r\n    longDescription: \"Age between 25 and 34 years\",\r\n    shortDescription: \"Between 25 and 34\",\r\n  },\r\n  'AGE_35_44': {\r\n    longDescription: \"Age between 35 and 44 years\",\r\n    shortDescription: \"Between 35 and 44\",\r\n  },\r\n  'AGE_45_54': {\r\n    longDescription: \"Age between 45 and 54 years\",\r\n    shortDescription: \"Between 45 and 54\",\r\n  },\r\n  'AGE_55_64': {\r\n    longDescription: \"Age between 55 and 64 years\",\r\n    shortDescription: \"Between 55 and 64\",\r\n  },\r\n  'AGE_65_+': {\r\n    longDescription: \"Age above 65 years\",\r\n    shortDescription: \"Above 65 years\",\r\n  },\r\n};\r\n\r\nconst SEX_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'SEX_M': {\r\n    longDescription: \"Male\",\r\n    shortDescription: \"Male\",\r\n  },\r\n  'SEX_W': {\r\n    longDescription: \"Female\",\r\n    shortDescription: \"Female\",\r\n  },\r\n};\r\n\r\nconst LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'LANGUAGE_ENGLISH': {\r\n    longDescription: \"English\",\r\n    shortDescription: \"English\",\r\n    icon: <i className={`flag-icon flag-icon-us`}/>\r\n  },\r\n  'LANGUAGE_ITALIAN': {\r\n    longDescription: \"Italian\",\r\n    shortDescription: \"Italian\",\r\n    icon: <i className={`flag-icon flag-icon-it`}/>\r\n  },\r\n  'LANGUAGE_FRENCH': {\r\n    longDescription: \"French\",\r\n    shortDescription: \"French\",\r\n    icon: <i className={`flag-icon flag-icon-fr`}/>\r\n  },\r\n  'LANGUAGE_GERMAN': {\r\n    longDescription: \"German\",\r\n    shortDescription: \"German\",\r\n    icon: <i className={`flag-icon flag-icon-de`}/>\r\n  },\r\n}\r\n\r\nconst DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  0: {\r\n    longDescription: \"Impossible\",\r\n    shortDescription: \"Impossible\",\r\n  },\r\n  1: {\r\n    longDescription: \"Very difficult\",\r\n    shortDescription: \"Very difficult\",\r\n  },\r\n  2: {\r\n    longDescription: \"Difficult\",\r\n    shortDescription: \"Difficult\",\r\n  },\r\n  3: {\r\n    longDescription: \"Slightly difficult\",\r\n    shortDescription: \"Slightly difficult\",\r\n  },\r\n  4: {\r\n    longDescription: \"Easy\",\r\n    shortDescription: \"Easy\",\r\n  },\r\n};\r\n\r\nconst SHIFT_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'PREVIOUS': {\r\n    longDescription: \"Previous\",\r\n    shortDescription: \"Previous\",\r\n  },\r\n  'NEXT': {\r\n    longDescription: \"Next\",\r\n    shortDescription: \"Next\",\r\n  },\r\n};\r\n\r\nconst FUN_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'FUNNY': {\r\n    longDescription: \"Was funny\",\r\n    shortDescription: \"Funny\",\r\n  },\r\n  'INDIFFERENT': {\r\n    longDescription: \"Was indifferent\",\r\n    shortDescription: \"Indifferent\",\r\n  },\r\n  'NOT_FUNNY': {\r\n    longDescription: \"Was not funny\",\r\n    shortDescription: \"Not funny\",\r\n  },\r\n}\r\n\r\nexport {\r\n  AGE_FIELD_TO_PRETTY_DESCRIPTION,\r\n  SEX_FIELD_TO_PRETTY_DESCRIPTION,\r\n  LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION,\r\n  SHIFT_FIELD_TO_PRETTY_DESCRIPTION,\r\n  DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n  FUN_FIELD_TO_PRETTY_DESCRIPTION,\r\n};\r\n","import {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n// const currentScriptName = \"ExerciseSetFieldNamesDictionaryToDescription.js\";\r\n\r\nconst EXERCISE_SET_ID_FIELD_NAME = '_id'\r\nconst EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME = 'exercise_list'\r\nconst EXERCISE_SET_SUITABLE_FOR_GOAL_IDS_FIELD_NAME = 'suitable_for_goals'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [EXERCISE_SET_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"Exercise Set ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Exercise List\",\r\n    keyPrettyNameLong: \"Exercise List\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n  [EXERCISE_SET_SUITABLE_FOR_GOAL_IDS_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"For Goals\",\r\n    keyPrettyNameLong: \"Suitable For Goals\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n};\r\n\r\n/** Utility function to get a mapping from ID to the pretty version of the object */\r\nfunction allExerciseSetsIDsToDescription(allExerciseSets, exerciseIDsToDescription, joiningString = ', ') {\r\n  const tempMapping = {}\r\n  allExerciseSets.forEach(exerciseSet => {\r\n    tempMapping[exerciseSet[EXERCISE_SET_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]] = (\r\n      exerciseSet[EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME].map(oid =>\r\n        exerciseIDsToDescription[oid[OBJECT_REFERENCE_ID_FIELD_NAME]]\r\n      ).join(joiningString)\r\n    )\r\n  })\r\n  return tempMapping\r\n}\r\n\r\nexport {\r\n  EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  EXERCISE_SET_ID_FIELD_NAME,\r\n  EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME,\r\n  EXERCISE_SET_SUITABLE_FOR_GOAL_IDS_FIELD_NAME,\r\n  allExerciseSetsIDsToDescription\r\n}\r\n","import React from \"react\";\r\n\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME, selectDescription} from \"./ModelUtils\";\r\nimport {\r\n  DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n  SHIFT_FIELD_TO_PRETTY_DESCRIPTION\r\n} from \"./FieldValuesDictionaryToDescription\";\r\n\r\n// const currentScriptName = \"ExerciseSetMappingFieldNamesDictionaryToDescription.js\";\r\n\r\nconst EXERCISE_SET_MAPPING_ID_FIELD_NAME = '_id'\r\nconst EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME = 'suitable_exercise_sets'\r\nconst EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME = 'asked_question'\r\nconst EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME = 'user_answer'\r\nconst EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME = 'question_shift'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [EXERCISE_SET_MAPPING_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"Exercise Set Mapping ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Question\",\r\n    keyPrettyNameLong: \"Question\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n  [EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Answer\",\r\n    keyPrettyNameLong: \"Question answer\",\r\n    rawValuesToDescriptionMap: DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false) =>\r\n      selectDescription(DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription),\r\n  },\r\n  [EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Exercise Sets\",\r\n    keyPrettyNameLong: \"Suitable Exercise Sets\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n  [EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Shift\",\r\n    keyPrettyNameLong: \"Question shift\",\r\n    rawValuesToDescriptionMap: SHIFT_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false) => {\r\n      const description = selectDescription(SHIFT_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription)\r\n      return description === undefined\r\n        ? <span><i className=\"text-muted icon-ban\"/></span>\r\n        : description\r\n    },\r\n  },\r\n};\r\n\r\nexport {\r\n  EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  EXERCISE_SET_MAPPING_ID_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME,\r\n}\r\n","import React, {Component} from 'react';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row\r\n} from 'reactstrap';\r\nimport {\r\n  ACTION_CREATE,\r\n  ACTION_DELETE,\r\n  ACTION_MODIFY,\r\n  getAll,\r\n  getSingle,\r\n  postObject,\r\n  SERVER_EXERCISE_ENDPOINT,\r\n  SERVER_EXERCISE_MAPPING_ENDPOINT,\r\n  SERVER_EXERCISE_SET_ENDPOINT,\r\n  SERVER_QUESTION_ENDPOINT\r\n} from \"../../../../controller/ServerApi\";\r\nimport {\r\n  createLoading,\r\n  createPartialInitialStateFromFields,\r\n  errorComponent,\r\n  load,\r\n  showLoadingOrRender\r\n} from \"../../../../utils/DataLoadingUtils\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"../../../../model/ModelUtils\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {debug, warn} from \"../../../../utils/Logging\";\r\nimport './ExerciseSetMapping.css'\r\nimport {\r\n  EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_ID_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME\r\n} from \"../../../../model/ExerciseSetMappingFieldNamesDictionaryToDescription\";\r\nimport {\r\n  allQuestionsIDsToDescription,\r\n  QUESTION_ID_FIELD_NAME,\r\n  QUESTION_NEXT_FIELD_NAME,\r\n  QUESTION_PREVIOUS_FIELD_NAME,\r\n  QUESTION_TEXT_EN_FIELD_NAME\r\n} from \"../../../../model/QuestionFieldNamesDictionaryToDescription\";\r\nimport {allExercisesIDsToDescription} from \"../../../../model/ExerciseFieldNamesDictionaryToDescription\";\r\nimport {\r\n  allExerciseSetsIDsToDescription,\r\n  EXERCISE_SET_ID_FIELD_NAME\r\n} from \"../../../../model/ExerciseSetFieldNamesDictionaryToDescription\";\r\nimport MultiSelect from \"react-multi-select-component\";\r\nimport {computeQuestionLevel, sortQuestionObjects} from \"../../../../model/QuestionsUtils\";\r\nimport {\r\n  DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n  SHIFT_FIELD_TO_PRETTY_DESCRIPTION\r\n} from \"../../../../model/FieldValuesDictionaryToDescription\";\r\nimport UncontrolledTooltip from \"reactstrap/lib/UncontrolledTooltip\";\r\n\r\nconst currentScriptName = \"ExerciseSetMapping.js\";\r\n\r\nclass ExerciseSetMapping extends Component {\r\n\r\n  allExercises = \"allExercises\"\r\n  allQuestions = \"allQuestions\"\r\n  allExerciseSets = \"allExerciseSets\"\r\n  exerciseSetMappingField = \"exerciseSetMapping\";\r\n\r\n  fieldNames = [\r\n    this.exerciseSetMappingField,\r\n    this.allExercises,\r\n    this.allQuestions,\r\n    this.allExerciseSets,\r\n  ];\r\n\r\n  formID = \"exercise-set-mapping-form\"\r\n\r\n  defaultExerciseSetListValue = []\r\n  defaultQuestionIdValue = ''\r\n  defaultQuestionAnswerValue = ''\r\n  defaultQuestionShiftValue = '-- None --'\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...(createPartialInitialStateFromFields(this.fieldNames)),\r\n      objID: '',\r\n      [EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME]: this.defaultExerciseSetListValue,\r\n      [EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME]: this.defaultQuestionIdValue,\r\n      [EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME]: this.defaultQuestionAnswerValue,\r\n      [EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME]: this.defaultQuestionShiftValue,\r\n      uploadingChanges: false,\r\n      errorMessage: '',\r\n      deletionModalOpen: false,\r\n      hasExercisesSelected: undefined\r\n    };\r\n\r\n    this.setCurrentStateFromData.bind(this);\r\n    this.getCurrentID.bind(this);\r\n    this.handleSelectedEvent.bind(this);\r\n    this.setHasExercisesSelected.bind(this);\r\n    this.sendChangesToServer.bind(this);\r\n    this.setErrorMessage.bind(this);\r\n    this.toggleDeletionModal.bind(this);\r\n    this.deleteCurrentFromServer.bind(this);\r\n\r\n    load(this, this.allExercises, getAll, {serverEndPoint: SERVER_EXERCISE_ENDPOINT})\r\n    load(this, this.allExerciseSets, getAll, {serverEndPoint: SERVER_EXERCISE_SET_ENDPOINT})\r\n    load(this, this.allQuestions, getAll, {serverEndPoint: SERVER_QUESTION_ENDPOINT})\r\n    if (!this.isHandlingNewObject()) {\r\n      load(this, this.exerciseSetMappingField, getSingle,\r\n        {serverEndPoint: SERVER_EXERCISE_MAPPING_ENDPOINT, id: this.getCurrentID()},\r\n        (data) => this.setCurrentStateFromData(data)\r\n      );\r\n    }\r\n  }\r\n\r\n  setCurrentStateFromData(data) {\r\n    this.setState({\r\n      objID: data[EXERCISE_SET_MAPPING_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME],\r\n\r\n      [EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME]:\r\n      data[EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME].map(oid => oid[OBJECT_REFERENCE_ID_FIELD_NAME])\r\n      || this.defaultExerciseSetListValue,\r\n\r\n      [EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME]:\r\n      data[EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME] || this.defaultQuestionIdValue,\r\n\r\n      [EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME]:\r\n        data[EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME] === undefined\r\n          ? this.defaultQuestionAnswerValue\r\n          : data[EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME],\r\n\r\n      [EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME]:\r\n      data[EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME] || this.defaultQuestionShiftValue,\r\n\r\n      hasExercisesSelected: data[EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME] === undefined\r\n    })\r\n  }\r\n\r\n  getCurrentID() {\r\n    return this.props.match.params.id\r\n  }\r\n\r\n  isHandlingNewObject() {\r\n    return this.getCurrentID() === \"new\"\r\n  }\r\n\r\n  handleSelectedEvent(field, selected) {\r\n    debug(currentScriptName, `Changed selection for field ${field}: `, selected)\r\n\r\n    let newField\r\n    if (field === EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME) {\r\n      newField = selected.map(option => option.value)\r\n    } else {\r\n      newField = selected\r\n    }\r\n\r\n    const changedState = {}\r\n    changedState[field] = newField\r\n    this.setState(changedState)\r\n  }\r\n\r\n  setErrorMessage(errorMessage) {\r\n    this.setState({\r\n      uploadingChanges: false,\r\n      errorMessage: errorMessage\r\n    })\r\n    window.scrollTo(0, 0)\r\n  }\r\n\r\n  setHasExercisesSelected(hasExercisesSelected) {\r\n    this.setState({hasExercisesSelected: hasExercisesSelected})\r\n  }\r\n\r\n  sendChangesToServer(insertNew = false) {\r\n    debug(currentScriptName, `Called sendChangesToServer with insertNew=${insertNew}`);\r\n    this.setState({\r\n      uploadingChanges: true,\r\n      errorMessage: ''\r\n    })\r\n\r\n    const formData = new FormData(document.getElementById(this.formID))\r\n    formData.append(\r\n      EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME,\r\n      JSON.stringify(this.state[EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME])\r\n    )\r\n    if (formData.get(EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME) === this.defaultQuestionIdValue) {\r\n      this.setErrorMessage('Select the question!')\r\n    } else if (formData.get(EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME) === this.defaultQuestionAnswerValue) {\r\n      this.setErrorMessage('Select the question answer!')\r\n    } else if (\r\n      formData.get(EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME) === JSON.stringify(this.defaultExerciseSetListValue)\r\n      && formData.get(EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME) === this.defaultQuestionShiftValue\r\n    ) {\r\n      this.setErrorMessage('Select some exercise sets or the proper question shift!')\r\n    } else {\r\n      let serverPromise\r\n      if (insertNew) {\r\n        serverPromise = postObject(ACTION_CREATE, SERVER_EXERCISE_MAPPING_ENDPOINT, {formDataObject: formData})\r\n      } else {\r\n        const toUpdateID = this.getCurrentID()\r\n        serverPromise = postObject(ACTION_MODIFY, SERVER_EXERCISE_MAPPING_ENDPOINT, {\r\n          id: toUpdateID,\r\n          formDataObject: formData\r\n        })\r\n      }\r\n\r\n      serverPromise.then(\r\n        (result) => {\r\n          debug(currentScriptName, `Saved changes to server:`, result);\r\n          this.setCurrentStateFromData(result)\r\n          this.setState({uploadingChanges: false})\r\n\r\n          // Go to list of objects, when done\r\n          window.history.back()\r\n        },\r\n        (error) => {\r\n          warn(currentScriptName, `Error from server saving changes:`, error.message);\r\n          this.setErrorMessage(error.message + ' -- Be sure to not have duplicated question and answer')\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  toggleDeletionModal() {\r\n    this.setState({deletionModalOpen: !this.state.deletionModalOpen})\r\n  }\r\n\r\n  deleteCurrentFromServer() {\r\n    postObject(ACTION_DELETE, SERVER_EXERCISE_MAPPING_ENDPOINT, {id: this.getCurrentID()}).then(\r\n      result => {\r\n        debug(currentScriptName, `Deleted from server:`, result);\r\n        this.setState({uploadingChanges: false})\r\n\r\n        // Go to list of objects, when done\r\n        window.history.back()\r\n      },\r\n      error => {\r\n        warn(currentScriptName, `Error from server during deletion:`, error.message);\r\n        this.setErrorMessage(error.message)\r\n      }\r\n    )\r\n\r\n    this.toggleDeletionModal()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col lg={12}>\r\n            {this.state.errorMessage === '' ? null : errorComponent(this.state.errorMessage)}\r\n            <Card>\r\n              <CardHeader>\r\n                <strong>\r\n                  <i className=\"icon-info pr-1\"/>\r\n                  {\r\n                    this.isHandlingNewObject() ? 'New Exercise Set Mapping' : `Exercise Set Mapping ID: ${this.state.objID}`\r\n                  }\r\n                </strong>\r\n                {\r\n                  this.isHandlingNewObject()\r\n                    ? null\r\n                    : <Button color=\"danger\"\r\n                              onClick={this.toggleDeletionModal.bind(this)}\r\n                              className=\"mr-1 float-right\">\r\n                      <i className={\"fa fa-trash\"}/> Delete\r\n                    </Button>\r\n                }\r\n                <Modal isOpen={this.state.deletionModalOpen} toggle={this.toggleDeletionModal.bind(this)}\r\n                       className={'modal-danger'}>\r\n                  <ModalHeader toggle={this.toggleDeletionModal.bind(this)}>Delete Exercise Set Mapping</ModalHeader>\r\n                  <ModalBody>\r\n                    This will permanently delete the current Exercise Set Mapping from database.\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button color=\"danger\" onClick={this.deleteCurrentFromServer.bind(this)}>Delete</Button>{' '}\r\n                    <Button color=\"secondary\" onClick={this.toggleDeletionModal.bind(this)}>Cancel</Button>\r\n                  </ModalFooter>\r\n                </Modal>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {(() => {\r\n                  const formComponent = showLoadingOrRender(this, this.allExercises,\r\n                    allExercises => showLoadingOrRender(this, this.allExerciseSets,\r\n                      allExerciseSets => showLoadingOrRender(this, this.allQuestions,\r\n                        allQuestions => {\r\n\r\n                          const questionsPrettyMapping = allQuestionsIDsToDescription(allQuestions)\r\n                          const exercisesPrettyMapping = allExercisesIDsToDescription(allExercises)\r\n                          const exerciseSetsPrettyMapping = allExerciseSetsIDsToDescription(\r\n                            allExerciseSets,\r\n                            exercisesPrettyMapping,\r\n                            ' ► '\r\n                          )\r\n\r\n                          return (\r\n                            <div>\r\n                              <Form id={this.formID} action=\"\" method=\"post\" encType=\"multipart/form-data\"\r\n                                    className=\"form-horizontal\">\r\n                                <FormGroup row>\r\n                                  <Col md=\"2\">\r\n                                    <Label htmlFor=\"select-question\">Question</Label>\r\n                                  </Col>\r\n                                  <Col xs=\"12\" md=\"10\">\r\n                                    <Input type=\"select\" name={EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME}\r\n                                           id=\"select-question\"\r\n                                           value={this.state[EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME]}\r\n                                           onChange={e =>\r\n                                             this.handleSelectedEvent(EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME, e.target.value)\r\n                                           }>\r\n                                      <option value={this.defaultQuestionIdValue}>{this.defaultQuestionIdValue}</option>\r\n                                      {\r\n                                        sortQuestionObjects(allQuestions).map((question, index) => {\r\n                                          return (\r\n                                            <option\r\n                                              key={question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]}\r\n                                              value={question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]}>\r\n                                              Level {index + 1} → {question[QUESTION_TEXT_EN_FIELD_NAME]}\r\n                                            </option>\r\n                                          )\r\n                                        })\r\n                                      }\r\n                                    </Input>\r\n                                  </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                  <Col md=\"2\">\r\n                                    <Label htmlFor=\"select-answer\">Question Answer</Label>\r\n                                  </Col>\r\n                                  <Col xs=\"12\" md=\"10\">\r\n                                    <Input type=\"select\" name={EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME}\r\n                                           id=\"select-answer\"\r\n                                           value={this.state[EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME]}\r\n                                           onChange={e =>\r\n                                             this.handleSelectedEvent(EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME, e.target.value)\r\n                                           }>\r\n                                      <option value={this.defaultQuestionAnswerValue}>\r\n                                        {this.defaultQuestionAnswerValue}\r\n                                      </option>\r\n                                      {\r\n                                        Object.keys(DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION).map(difficulty => {\r\n                                          return (\r\n                                            <option key={difficulty} value={difficulty}>\r\n                                              {DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION[difficulty].longDescription}\r\n                                            </option>\r\n                                          )\r\n                                        })\r\n                                      }\r\n                                    </Input>\r\n                                  </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                  <Col md=\"2\">\r\n                                    <Label htmlFor={`multi-select-exercise-set`}>\r\n                                      To suggest Exercise Sets\r\n                                    </Label>\r\n                                  </Col>\r\n                                  <Col md=\"10\">\r\n                                    <div id={\"multi-select-exercise-set\"}>\r\n                                      <MultiSelect\r\n                                        disabled={this.state.hasExercisesSelected === false}\r\n                                        options={allExerciseSets.map(exerciseSet => {\r\n                                          const exerciseSetID = exerciseSet[EXERCISE_SET_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n                                          return {\r\n                                            label: exerciseSetsPrettyMapping[exerciseSetID],\r\n                                            value: exerciseSetID\r\n                                          }\r\n                                        })}\r\n                                        hasSelectAll={false}\r\n                                        value={\r\n                                          this.state[EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME]\r\n                                            .map(exerciseSetID => {\r\n                                              return {\r\n                                                label: exerciseSetsPrettyMapping[exerciseSetID],\r\n                                                value: exerciseSetID\r\n                                              }\r\n                                            })\r\n                                        }\r\n                                        onChange={currentSelection => {\r\n                                          if (JSON.stringify(currentSelection) === JSON.stringify(this.defaultExerciseSetListValue))\r\n                                            this.setHasExercisesSelected(undefined)\r\n                                          else\r\n                                            this.setHasExercisesSelected(true)\r\n\r\n                                          this.handleSelectedEvent(EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME, currentSelection)\r\n                                        }}\r\n                                        labelledBy={\"Select\"}/>\r\n                                    </div>\r\n                                    {\r\n                                      this.state[EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME] !== this.defaultQuestionShiftValue\r\n                                        ? <UncontrolledTooltip placement=\"bottom\" target=\"multi-select-exercise-set\">\r\n                                          To suggest exercise sets, deselect the question shift\r\n                                        </UncontrolledTooltip>\r\n                                        : null\r\n                                    }\r\n                                  </Col>\r\n                                </FormGroup>\r\n                                <FormGroup row>\r\n                                  <Col md=\"2\">\r\n                                    <Label htmlFor=\"select-question-shift\">Question Shift</Label>\r\n                                  </Col>\r\n                                  <Col xs=\"12\" md=\"10\">\r\n                                    <Input\r\n                                      disabled={this.state.hasExercisesSelected === true}\r\n                                      type=\"select\" name={EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME}\r\n                                      id=\"select-question-shift\"\r\n                                      value={this.state[EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME]}\r\n                                      onChange={e => {\r\n                                        const selectedValue = e.target.value\r\n                                        if (selectedValue === this.defaultQuestionShiftValue)\r\n                                          this.setHasExercisesSelected(undefined)\r\n                                        else\r\n                                          this.setHasExercisesSelected(false)\r\n\r\n                                        this.handleSelectedEvent(EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME, selectedValue)\r\n                                      }}>\r\n                                      <option value={this.defaultQuestionShiftValue}>\r\n                                        {this.defaultQuestionShiftValue}\r\n                                      </option>\r\n                                      {\r\n                                        Object.keys(SHIFT_FIELD_TO_PRETTY_DESCRIPTION).map(shift => {\r\n                                          return (\r\n                                            <option key={shift} value={shift}>\r\n                                              {SHIFT_FIELD_TO_PRETTY_DESCRIPTION[shift].longDescription}\r\n                                            </option>\r\n                                          )\r\n                                        })\r\n                                      }\r\n                                    </Input>\r\n                                    {\r\n                                      JSON.stringify(this.state[EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME])\r\n                                      !== JSON.stringify(this.defaultExerciseSetListValue)\r\n                                        ? <UncontrolledTooltip placement=\"bottom\" target=\"select-question-shift\">\r\n                                          To make a question shift, deselect suggested exercise sets.\r\n                                        </UncontrolledTooltip>\r\n                                        : null\r\n                                    }\r\n                                  </Col>\r\n                                </FormGroup>\r\n                                {\r\n                                  (\r\n                                    this.state.hasExercisesSelected !== true &&\r\n                                    this.state[EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME] !== this.defaultQuestionShiftValue\r\n                                  ) ? <FormGroup row>\r\n                                      <Col md=\"2\">\r\n                                        <Label>Will shift to</Label>\r\n                                      </Col>\r\n                                      <Col xs=\"12\" md=\"10\">\r\n                                        <p className=\"form-control-static\">\r\n                                          {(() => {\r\n                                            if (this.state[EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME]) {\r\n                                              const questionShift = this.state[EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME]\r\n                                              const currentQuestion = allQuestions.find(question =>\r\n                                                question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME] ===\r\n                                                this.state[EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME]\r\n                                              )\r\n                                              if (questionShift.toLowerCase() === QUESTION_NEXT_FIELD_NAME) {\r\n                                                if (currentQuestion[QUESTION_NEXT_FIELD_NAME])\r\n                                                  return `\r\n                                                  Level\r\n                                                  ${computeQuestionLevel(allQuestions, currentQuestion[QUESTION_NEXT_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME])}\r\n                                                  →\r\n                                                  ${\r\n                                                    questionsPrettyMapping[\r\n                                                      currentQuestion[QUESTION_NEXT_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n                                                      ]\r\n                                                  }`\r\n                                                else\r\n                                                  return \"Current main question has no next question, will not shift\"\r\n                                              } else {\r\n                                                if (currentQuestion[QUESTION_PREVIOUS_FIELD_NAME])\r\n                                                  return `\r\n                                                  Level\r\n                                                  ${computeQuestionLevel(allQuestions, currentQuestion[QUESTION_PREVIOUS_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME])}\r\n                                                  →\r\n                                                  ${\r\n                                                    questionsPrettyMapping[\r\n                                                      currentQuestion[QUESTION_PREVIOUS_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n                                                      ]\r\n                                                  }`\r\n                                                else\r\n                                                  return \"Current main question has no previous question, will not shift\"\r\n                                              }\r\n                                            } else {\r\n                                              return \"Select a main question\"\r\n                                            }\r\n                                          })()}\r\n                                        </p>\r\n                                      </Col>\r\n                                    </FormGroup>\r\n                                    : null\r\n                                }\r\n                              </Form>\r\n                              <div className=\"form-actions float-right\">\r\n                                <Button type=\"submit\" color=\"primary\" className={\"mr-2\"}\r\n                                        onClick={() => this.sendChangesToServer(this.isHandlingNewObject())}\r\n                                        disabled={this.state.uploadingChanges}\r\n                                >\r\n                                  {this.state.uploadingChanges\r\n                                    ? <img className='spinner' alt=\"spinner\"\r\n                                           src={require('../../../../assets/img/spinner.gif')}/>\r\n                                    : null}\r\n                                  {this.isHandlingNewObject() ? 'Insert' : 'Save changes'}\r\n                                </Button>\r\n                                <Link to={\"/home/modify/exercise_set_mappings\"}>\r\n                                  <Button color=\"secondary\" disabled={this.state.uploadingChanges}>Cancel</Button>\r\n                                </Link>\r\n                              </div>\r\n                            </div>\r\n                          )\r\n                        },\r\n                        createLoading({})\r\n                      ),\r\n                      createLoading({})\r\n                    ),\r\n                    createLoading({})\r\n                  )\r\n\r\n                  // To show a loading if fields are not ready to be filled with server data\r\n                  return this.isHandlingNewObject() ? formComponent : showLoadingOrRender(\r\n                    this, this.exerciseSetMappingField, _ => formComponent, createLoading({})\r\n                  )\r\n                })()}\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ExerciseSetMapping;\r\n"],"sourceRoot":""}