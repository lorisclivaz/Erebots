{"version":3,"sources":["view/protected/pages/Exercises/Exercise.js"],"names":["Exercise","props","exerciseDataField","fieldNames","formID","state","createPartialInitialStateFromFields","objID","EXERCISE_TEXT_EN_FIELD_NAME","EXERCISE_TEXT_IT_FIELD_NAME","EXERCISE_TEXT_FR_FIELD_NAME","EXERCISE_TEXT_DE_FIELD_NAME","EXERCISE_LABEL_FIELD_NAME","setCurrentStateFromData","bind","getCurrentID","handleTextChange","sendChangesToServer","setErrorMessage","toggleDeletionModal","deleteCurrentFromServer","isHandlingNewObject","load","getSingle","serverEndPoint","SERVER_EXERCISE_ENDPOINT","id","data","this","setState","EXERCISE_ID_FIELD_NAME","OBJECT_REFERENCE_ID_FIELD_NAME","match","params","field","changedText","changedState","errorMessage","uploadingChanges","window","scrollTo","insertNew","log","formData","FormData","document","getElementById","get","serverPromise","postObject","ACTION_CREATE","formDataObject","toUpdateID","ACTION_MODIFY","then","result","debug","history","back","error","warn","message","deletionModalOpen","ACTION_DELETE","className","lg","errorComponent","color","onClick","isOpen","toggle","formComponent","action","method","encType","map","keyHandler","getKeyHandlerFor","EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","row","key","md","htmlFor","keyPrettyNameLong","xs","type","rows","name","placeholder","value","onChange","e","target","accept","alt","src","SERVER_API_ADDRESS","performance","now","style","width","disabled","require","to","showLoadingOrRender","_","createLoading","Component"],"mappings":"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","file":"static/js/66.bf0001ce.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Col,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n  Modal,\r\n  ModalBody,\r\n  ModalFooter,\r\n  ModalHeader,\r\n  Row\r\n} from 'reactstrap';\r\nimport {\r\n  ACTION_CREATE,\r\n  ACTION_DELETE,\r\n  ACTION_MODIFY,\r\n  getSingle,\r\n  postObject,\r\n  SERVER_API_ADDRESS,\r\n  SERVER_EXERCISE_ENDPOINT\r\n} from \"../../../../controller/ServerApi\";\r\nimport {\r\n  createLoading,\r\n  createPartialInitialStateFromFields,\r\n  errorComponent,\r\n  load,\r\n  showLoadingOrRender\r\n} from \"../../../../utils/DataLoadingUtils\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"../../../../model/ModelUtils\";\r\nimport {\r\n  EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  EXERCISE_ID_FIELD_NAME,\r\n  EXERCISE_TEXT_DE_FIELD_NAME,\r\n  EXERCISE_TEXT_EN_FIELD_NAME,\r\n  EXERCISE_TEXT_FR_FIELD_NAME,\r\n  EXERCISE_TEXT_IT_FIELD_NAME,\r\n  EXERCISE_LABEL_FIELD_NAME\r\n} from \"../../../../model/ExerciseFieldNamesDictionaryToDescription\";\r\nimport {getKeyHandlerFor} from \"../../../../model/FieldPrettifyHandler\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {debug, log, warn} from \"../../../../utils/Logging\";\r\nimport './Exercise.css'\r\nimport CardImg from \"reactstrap/lib/CardImg\";\r\n\r\nconst currentScriptName = \"Exercise.js\";\r\n\r\nclass Exercise extends Component {\r\n\r\n  exerciseDataField = \"exerciseData\";\r\n\r\n  fieldNames = [\r\n    this.exerciseDataField,\r\n  ];\r\n\r\n  formID = \"exercise-form\"\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...(createPartialInitialStateFromFields(this.fieldNames)),\r\n      objID: '',\r\n      [EXERCISE_TEXT_EN_FIELD_NAME]: '',\r\n      [EXERCISE_TEXT_IT_FIELD_NAME]: '',\r\n      [EXERCISE_TEXT_FR_FIELD_NAME]: '',\r\n      [EXERCISE_TEXT_DE_FIELD_NAME]: '',\r\n      [EXERCISE_LABEL_FIELD_NAME]: '',\r\n      uploadingChanges: false,\r\n      errorMessage: '',\r\n      deletionModalOpen: false,\r\n    };\r\n\r\n    this.setCurrentStateFromData.bind(this);\r\n    this.getCurrentID.bind(this);\r\n    this.handleTextChange.bind(this);\r\n    this.sendChangesToServer.bind(this);\r\n    this.setErrorMessage.bind(this);\r\n    this.toggleDeletionModal.bind(this);\r\n    this.deleteCurrentFromServer.bind(this);\r\n\r\n    if (!this.isHandlingNewObject()) {\r\n      load(this, this.exerciseDataField, getSingle,\r\n        {serverEndPoint: SERVER_EXERCISE_ENDPOINT, id: this.getCurrentID()},\r\n        (data) => this.setCurrentStateFromData(data)\r\n      );\r\n    }\r\n  }\r\n\r\n  setCurrentStateFromData(data) {\r\n    this.setState({\r\n      objID: data[EXERCISE_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME],\r\n      [EXERCISE_TEXT_EN_FIELD_NAME]: data[EXERCISE_TEXT_EN_FIELD_NAME],\r\n      [EXERCISE_TEXT_IT_FIELD_NAME]: data[EXERCISE_TEXT_IT_FIELD_NAME] || '',\r\n      [EXERCISE_TEXT_FR_FIELD_NAME]: data[EXERCISE_TEXT_FR_FIELD_NAME] || '',\r\n      [EXERCISE_TEXT_DE_FIELD_NAME]: data[EXERCISE_TEXT_DE_FIELD_NAME] || '',\r\n      [EXERCISE_LABEL_FIELD_NAME]: data[EXERCISE_LABEL_FIELD_NAME] || '',\r\n    })\r\n  }\r\n\r\n  getCurrentID() {\r\n    return this.props.match.params.id\r\n  }\r\n\r\n  isHandlingNewObject() {\r\n    return this.getCurrentID() === \"new\"\r\n  }\r\n\r\n  handleTextChange(field, changedText) {\r\n    const changedState = {}\r\n    changedState[field] = changedText\r\n    this.setState(changedState)\r\n  }\r\n\r\n  setErrorMessage(errorMessage) {\r\n    this.setState({\r\n      uploadingChanges: false,\r\n      errorMessage: errorMessage\r\n    })\r\n    window.scrollTo(0, 0)\r\n  }\r\n\r\n  sendChangesToServer(insertNew = false) {\r\n    log(currentScriptName, `Called sendChangesToServer with insertNew=${insertNew}`);\r\n    this.setState({\r\n      uploadingChanges: true,\r\n      errorMessage: ''\r\n    })\r\n\r\n    const formData = new FormData(document.getElementById(this.formID))\r\n    if (!formData.get(EXERCISE_TEXT_EN_FIELD_NAME)) {\r\n      this.setErrorMessage('English description is mandatory!')\r\n    } else {\r\n      let serverPromise\r\n      if (insertNew) {\r\n        serverPromise = postObject(ACTION_CREATE, SERVER_EXERCISE_ENDPOINT, {formDataObject: formData})\r\n      } else {\r\n        const toUpdateID = this.getCurrentID()\r\n        serverPromise = postObject(ACTION_MODIFY, SERVER_EXERCISE_ENDPOINT, {id: toUpdateID, formDataObject: formData})\r\n      }\r\n\r\n      serverPromise.then(\r\n        (result) => {\r\n          debug(currentScriptName, `Saved changes to server:`, result);\r\n          this.setCurrentStateFromData(result)\r\n          this.setState({uploadingChanges: false})\r\n\r\n          // Go to list of objects, when done\r\n          window.history.back()\r\n        },\r\n        (error) => {\r\n          warn(currentScriptName, `Error from server saving changes:`, error.message);\r\n          this.setErrorMessage(error.message)\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  toggleDeletionModal() {\r\n    this.setState({deletionModalOpen: !this.state.deletionModalOpen})\r\n  }\r\n\r\n  deleteCurrentFromServer() {\r\n    postObject(ACTION_DELETE, SERVER_EXERCISE_ENDPOINT, {id: this.getCurrentID()}).then(\r\n      result => {\r\n        debug(currentScriptName, `Deleted from server:`, result);\r\n        this.setState({uploadingChanges: false})\r\n\r\n        // Go to list of objects, when done\r\n        window.history.back()\r\n      },\r\n      error => {\r\n        warn(currentScriptName, `Error from server during deletion:`, error.message);\r\n        this.setErrorMessage(error.message)\r\n      }\r\n    )\r\n\r\n    this.toggleDeletionModal()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col lg={12}>\r\n            {this.state.errorMessage === '' ? null : errorComponent(this.state.errorMessage)}\r\n            <Card>\r\n              <CardHeader>\r\n                <strong>\r\n                  <i className=\"icon-info pr-1\"/>\r\n                  {\r\n                    this.isHandlingNewObject() ? 'New Exercise' : `Exercise ID: ${this.state.objID}`\r\n                  }\r\n                </strong>\r\n                {\r\n                  this.isHandlingNewObject()\r\n                    ? null\r\n                    : <Button color=\"danger\"\r\n                              onClick={this.toggleDeletionModal.bind(this)}\r\n                              className=\"mr-1 float-right\">\r\n                      <i className={\"fa fa-trash\"}/> Delete\r\n                    </Button>\r\n                }\r\n                <Modal isOpen={this.state.deletionModalOpen} toggle={this.toggleDeletionModal.bind(this)}\r\n                       className={'modal-danger'}>\r\n                  <ModalHeader toggle={this.toggleDeletionModal.bind(this)}>Delete Exercise</ModalHeader>\r\n                  <ModalBody>\r\n                    This will permanently delete the current Exercise from database.\r\n                    <br/>\r\n                    <br/>\r\n                    References to this Exercise will be removed from every data structure in which it is.\r\n                    This possibly includes Exercise Sets and user Sport Sessions.\r\n                  </ModalBody>\r\n                  <ModalFooter>\r\n                    <Button color=\"danger\" onClick={this.deleteCurrentFromServer.bind(this)}>Delete</Button>{' '}\r\n                    <Button color=\"secondary\" onClick={this.toggleDeletionModal.bind(this)}>Cancel</Button>\r\n                  </ModalFooter>\r\n                </Modal>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {(() => {\r\n                  const formComponent = (\r\n                    <div>\r\n                      <Form id={this.formID} action=\"\" method=\"post\" encType=\"multipart/form-data\"\r\n                            className=\"form-horizontal\">\r\n                        {\r\n                          [\r\n                            EXERCISE_LABEL_FIELD_NAME,\r\n                            EXERCISE_TEXT_EN_FIELD_NAME,\r\n                            EXERCISE_TEXT_IT_FIELD_NAME,\r\n                            EXERCISE_TEXT_FR_FIELD_NAME,\r\n                            EXERCISE_TEXT_DE_FIELD_NAME,\r\n                          ].map(field => {\r\n                            const keyHandler = getKeyHandlerFor(field, EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION)\r\n                            return (\r\n                              <FormGroup row key={field}>\r\n                                <Col md=\"2\">\r\n                                  <Label htmlFor={`textarea-input-${field}`}>{keyHandler.keyPrettyNameLong}</Label>\r\n                                </Col>\r\n                                <Col xs=\"12\" md=\"10\">\r\n                                  <Input type=\"textarea\" rows=\"2\"\r\n                                         name={field}\r\n                                         id={`textarea-input-${field}`}\r\n                                         placeholder={`${keyHandler.keyPrettyNameLong} ...`}\r\n                                         value={this.state[field]}\r\n                                         onChange={e => this.handleTextChange(field, e.target.value)}\r\n                                  />\r\n                                </Col>\r\n                              </FormGroup>\r\n                            )\r\n                          })\r\n                        }\r\n                        <FormGroup row>\r\n                          <Col md=\"2\">\r\n                            <Label htmlFor=\"file-input\">Exercise GIF</Label>\r\n                          </Col>\r\n                          <Col xs=\"12\" md=\"10\">\r\n                            <Input type=\"file\" id=\"file-input\" name=\"gif-file\" accept=\"image/gif\"/>\r\n                          </Col>\r\n                        </FormGroup>\r\n                        <FormGroup row>\r\n                          <Col md=\"2\">\r\n                            <Label htmlFor=\"image-preview\">GIF Preview</Label>\r\n                          </Col>\r\n                          <Col xs=\"12\" md=\"10\">\r\n                            {\r\n                              this.isHandlingNewObject()\r\n                                ? \"Exercise image preview\"\r\n                                : <CardImg id=\"image-preview\" alt={\"Exercise image preview\"}\r\n                                           src={`${SERVER_API_ADDRESS}${SERVER_EXERCISE_ENDPOINT}/${this.getCurrentID()}/gif?random=${performance.now()}`}\r\n                                           style={{width: \"40%\"}}\r\n                                />\r\n                            }\r\n                          </Col>\r\n                        </FormGroup>\r\n                      </Form>\r\n                      <div className=\"form-actions float-right\">\r\n                        <Button type=\"submit\" color=\"primary\" className={\"mr-2\"}\r\n                                onClick={() => this.sendChangesToServer(this.isHandlingNewObject())}\r\n                                disabled={this.state.uploadingChanges}\r\n                        >\r\n                          {this.state.uploadingChanges\r\n                            ? <img className='spinner' alt=\"spinner\"\r\n                                   src={require('../../../../assets/img/spinner.gif')}/>\r\n                            : null}\r\n                          {this.isHandlingNewObject() ? 'Insert' : 'Save changes'}\r\n                        </Button>\r\n                        <Link to={\"/home/modify/exercises\"}>\r\n                          <Button color=\"secondary\" disabled={this.state.uploadingChanges}>Cancel</Button>\r\n                        </Link>\r\n                      </div>\r\n                    </div>\r\n                  )\r\n\r\n                  // To show a loading if fields are not ready to be filled with server data\r\n                  return this.isHandlingNewObject() ? formComponent : showLoadingOrRender(\r\n                    this, this.exerciseDataField, _ => formComponent, createLoading({})\r\n                  )\r\n                })()}\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Exercise;\r\n"],"sourceRoot":""}