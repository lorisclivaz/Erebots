{"version":3,"sources":["view/protected/pages/Users/Users.js"],"names":["computeUserStatus","user","Date","now","convertToUTCMillis","extractDateObject","USER_LAST_INTERACTION_FIELD_NAME","ONE_DAY_IN_MILLIS","Users","props","allUsersField","fieldNames","state","createPartialInitialStateFromFields","load","this","getAll","serverEndPoint","SERVER_USER_ENDPOINT","className","xl","showLoadingOrRender","allUsers","shownProfileFields","USER_ID_FIELD_NAME","USER_FIRST_NAME_FIELD_NAME","USER_LANGUAGE_FIELD_NAME","USER_SEX_FIELD_NAME","dataColumns","map","profileField","name","prettifyFieldName","sortable","grow","columnName","includes","selector","getKeyHandlerFor","valuePrettifier","format","userStatus","color","status","to","userID","OBJECT_REFERENCE_ID_FIELD_NAME","noHeader","columns","data","keyField","striped","highlightOnHover","noDataComponent","noDataAvailableComponent","dense","pagination","paginationPerPage","paginationRowsPerPageOptions","createLoading","Component"],"mappings":"kXA8BMA,EAAoB,SAAAC,GAAI,OAC5BC,KAAKC,MAAQC,YAAmBC,YAAkBJ,EAAKK,OAA0D,EAApBC,IACzF,WACA,UAaAC,E,kDAKJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAJRC,cAAgB,WAGG,EAFnBC,WAAa,CAAC,EAAKD,eAIjB,EAAKE,MAAL,eACMC,YAAoC,EAAKF,aAH9B,E,qDAQnB,WACEG,YAAKC,KAAMA,KAAKL,cAAeM,IAAQ,CAACC,eAAgBC,Q,oBAI1D,WACE,OACE,yBAAKC,UAAU,mBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,uBAAGD,UAAU,wBADf,UAGA,kBAAC,IAAD,KAEIE,YAAoBN,KAAMA,KAAKL,eAC7B,SAAAY,GACE,IAAMC,EAAqB,CACzBC,IACAC,IACAC,IACAC,IACA,SACArB,KAaIsB,EAAcL,EAAmBM,KAAI,SAAAC,GACzC,MAAO,CACLC,KAAMC,YAAkBF,GAAc,GACtCG,UAAU,EACVC,MAd6BC,EAcEL,EAb7B,CAACN,KAAoBY,SAASD,GACzB,IACA,CAAC7B,KAAkC8B,SAASD,GAC5C,IACA,CAACT,IAA0BC,IAAqB,UAAUS,SAASD,GACnE,IACG,KAWVE,SAAU,SAAApC,GACR,MAAqB,WAAjB6B,EACK9B,EAAkBC,GAClB6B,IAAiBxB,IACjBF,YAAmBC,YAAkBJ,EAAK6B,KAE1CQ,YAAiBR,GAAcS,gBAAgBtC,EAAK6B,IAAe,GAAM,IAIpFU,OAAQ,SAAAvC,GACN,GAAqB,WAAjB6B,EAA2B,CAC7B,IAAMW,EAAazC,EAAkBC,GACrC,OAAO,kBAAC,IAAD,CAAOyC,OAjFZC,EAiF2CF,EAhFvD,WAAXE,EAAsB,UAChB,aAAXA,EAAwB,YACX,YAAXA,EAAuB,UACV,WAAXA,EAAsB,SACpB,YA4E+EF,GACtD,MAAI,CAAChB,KAA4BW,SAASN,GAE7C,kBAAC,OAAD,CAAMc,IA5ElBC,EA4EkC5C,EAAKuB,KAAoBsB,KA5ErD,sBAAmBD,KA6EX,0BAAM1B,UAAU,oBACbmB,YAAiBR,GAAcS,gBAAgBtC,EAAK6B,MAKpDQ,YAAiBR,GAAcS,gBAAgBtC,EAAK6B,IAAe,GAAM,GAnF1F,IAAAe,EARYF,IAkDuB,IAAAR,KA8CjC,OAAO,kBAAC,IAAD,CAAWY,UAAU,EACVC,QAASpB,EACTqB,KAAM3B,EACN4B,SAAQ,UAAK1B,IAAL,YAA2BsB,KACnCK,SAAS,EACTC,kBAAkB,EAClBC,gBAAiBC,cACjBC,OAAO,EACPC,YAAY,EACZC,kBAAmB,GACnBC,6BAA8B,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,KACxDvC,UAAW,kBAG/BwC,YAAc,c,GApGdC,aAgHLpD","file":"static/js/69.1d79a84c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Card, CardBody, CardHeader, Col, Row} from 'reactstrap';\r\nimport {getAll, SERVER_USER_ENDPOINT} from \"../../../../controller/ServerApi\";\r\nimport {\r\n  createLoading,\r\n  createPartialInitialStateFromFields,\r\n  load,\r\n  noDataAvailableComponent,\r\n  showLoadingOrRender\r\n} from \"../../../../utils/DataLoadingUtils\";\r\nimport {convertToUTCMillis, extractDateObject} from \"../../../../model/DatetimeExtractor\";\r\nimport {\r\n  USER_FIRST_NAME_FIELD_NAME,\r\n  USER_ID_FIELD_NAME,\r\n  USER_LANGUAGE_FIELD_NAME,\r\n  USER_LAST_INTERACTION_FIELD_NAME,\r\n  USER_SEX_FIELD_NAME\r\n} from \"../../../../model/ProfileFieldNamesDictionaryToHandlers\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport {ONE_DAY_IN_MILLIS} from \"../../../../utils/DateUtils\";\r\nimport Badge from \"reactstrap/es/Badge\";\r\nimport {Link} from \"react-router-dom\";\r\nimport './Users.css'\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"../../../../model/ModelUtils\";\r\nimport {getKeyHandlerFor, prettifyFieldName} from \"../../../../model/FieldPrettifyHandler\";\r\n\r\n// const currentScriptName = \"Users.js\";\r\n\r\n\r\n/** Function to compute users status */\r\nconst computeUserStatus = user =>\r\n  Date.now() - convertToUTCMillis(extractDateObject(user[USER_LAST_INTERACTION_FIELD_NAME])) > ONE_DAY_IN_MILLIS * 3\r\n    ? \"Inactive\"\r\n    : \"Active\"\r\n\r\n/** Function to get color badge from user status */\r\nconst getBadgeColorFromStatus = status => {\r\n  return status === 'Active' ? 'success' :\r\n    status === 'Inactive' ? 'secondary' :\r\n      status === 'Pending' ? 'warning' :\r\n        status === 'Banned' ? 'danger' :\r\n          'primary';\r\n}\r\n\r\nconst getUserLink = userID => `/home/users/${userID}`;\r\n\r\nclass Users extends Component {\r\n\r\n  allUsersField = \"allUsers\";\r\n  fieldNames = [this.allUsersField];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...(createPartialInitialStateFromFields(this.fieldNames)),\r\n\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    load(this, this.allUsersField, getAll, {serverEndPoint: SERVER_USER_ENDPOINT});\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col xl={12}>\r\n            <Card>\r\n              <CardHeader>\r\n                <i className=\"fa fa-align-justify\"/> Users\r\n              </CardHeader>\r\n              <CardBody>\r\n                {\r\n                  showLoadingOrRender(this, this.allUsersField,\r\n                    allUsers => {\r\n                      const shownProfileFields = [\r\n                        USER_ID_FIELD_NAME,\r\n                        USER_FIRST_NAME_FIELD_NAME,\r\n                        USER_LANGUAGE_FIELD_NAME,\r\n                        USER_SEX_FIELD_NAME,\r\n                        \"Status\",\r\n                        USER_LAST_INTERACTION_FIELD_NAME,\r\n                      ];\r\n\r\n                      const getColumnWidthProportion = columnName => {\r\n                        if ([USER_ID_FIELD_NAME].includes(columnName))\r\n                          return \"8\"; // largest\r\n                        else if ([USER_LAST_INTERACTION_FIELD_NAME].includes(columnName))\r\n                          return \"6\"; // medium\r\n                        else if ([USER_LANGUAGE_FIELD_NAME, USER_SEX_FIELD_NAME, 'Status'].includes(columnName))\r\n                          return \"1\" // smallest\r\n                        else return \"4\" // normal\r\n                      }\r\n\r\n                      const dataColumns = shownProfileFields.map(profileField => {\r\n                        return {\r\n                          name: prettifyFieldName(profileField, true),\r\n                          sortable: true,\r\n                          grow: getColumnWidthProportion(profileField),\r\n                          // center:true,\r\n\r\n                          // callback to produce data to be sorted\r\n                          selector: user => {\r\n                            if (profileField === 'Status')\r\n                              return computeUserStatus(user)\r\n                            else if (profileField === USER_LAST_INTERACTION_FIELD_NAME)\r\n                              return convertToUTCMillis(extractDateObject(user[profileField]));\r\n                            else\r\n                              return getKeyHandlerFor(profileField).valuePrettifier(user[profileField], true, false);\r\n                          },\r\n\r\n                          // callback to produce views to be shown\r\n                          format: user => {\r\n                            if (profileField === 'Status') {\r\n                              const userStatus = computeUserStatus(user)\r\n                              return <Badge color={getBadgeColorFromStatus(userStatus)}>{userStatus}</Badge>\r\n                            } else if ([USER_FIRST_NAME_FIELD_NAME].includes(profileField))\r\n                              return (\r\n                                <Link to={getUserLink(user[USER_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME])}>\r\n                                  <span className=\"font-weight-bold\">\r\n                                    {getKeyHandlerFor(profileField).valuePrettifier(user[profileField])}\r\n                                  </span>\r\n                                </Link>\r\n                              )\r\n                            else\r\n                              return getKeyHandlerFor(profileField).valuePrettifier(user[profileField], true, true)\r\n                          },\r\n                        }\r\n                      })\r\n\r\n                      return <DataTable noHeader={true}\r\n                                        columns={dataColumns}\r\n                                        data={allUsers}\r\n                                        keyField={`${USER_ID_FIELD_NAME}.${OBJECT_REFERENCE_ID_FIELD_NAME}`}\r\n                                        striped={true}\r\n                                        highlightOnHover={true}\r\n                                        noDataComponent={noDataAvailableComponent()}\r\n                                        dense={true} // enable if wanted more compact rows\r\n                                        pagination={true}\r\n                                        paginationPerPage={10}\r\n                                        paginationRowsPerPageOptions={[5, 10, 20, 50, 100, 200, 500]}\r\n                                        className={\"users-table\"}\r\n                      />\r\n                    },\r\n                    createLoading({})\r\n                  )\r\n                }\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Users;\r\n"],"sourceRoot":""}