{"version":3,"sources":["model/QuestionsUtils.js","utils/ChartJsUtils.js","view/protected/components/charts/MyBaseStaticChart.js","view/protected/components/buttons/MultiSelectionButton.js","view/protected/components/charts/StaticAggregationChartWithValues.js","view/protected/components/charts/CardAggregationChartWithOptions.js","view/protected/pages/Dashboard/Dashboard.js"],"names":["getQuestionByID","allQuestions","questionID","find","question","QUESTION_ID_FIELD_NAME","OBJECT_REFERENCE_ID_FIELD_NAME","followNextPointerAndDo","startQuestion","fun","currentQuestion","undefined","QUESTION_NEXT_FIELD_NAME","sortQuestionObjects","firstQuestion","QUESTION_PREVIOUS_FIELD_NAME","resultQuestions","push","computeQuestionLevel","currentQuestionID","nextCount","_","length","writeInChart","self","total","getStringToWrite","chartInstance","chart","ctx","font","defaults","global","defaultFontSize","defaultFontStyle","defaultFontFamily","fillStyle","config","options","defaultFontColor","textAlign","textBaseline","data","datasets","forEach","dataset","i","controller","getDatasetMeta","bar","index","label","fillText","_model","x","y","writePercentagesInChart","partial","percentage","Math","round","writeValuesInChart","datasetsBorderColors","datasetsBackgroundColors","commonMultipleDimensionChartDataViewSettings","borderWidth","commonSingleDimensionChartDataViewSettings","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","commonChartOptions","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","legend","position","hover","animationDuration","FIELD_CHART_DATA","FIELD_CHART_OPTIONS","MyBaseStaticChart","props","chartDataField","loadData","bind","state","createPartialInitialStateFromFields","prevProps","prevState","snapshot","JSON","stringify","apiFunctionParams","this","debug","setState","load","apiFunction","showLoadingOrRender","Array","isArray","Object","keys","chartDataAndOptionsObj","dataManipulationLogic","chartData","chartOptions","ChartType","chartType","Bar","className","noDataAvailableComponent","loading","createLoading","pt","Component","createMultiSelectionButton","currentSelected","changeSelectionFunction","dropDownThreshold","preprocessingBeforeShowing","optionText","id","selectorOpen","join","isOpen","toggle","newState","caret","map","option","key","onClick","color","active","currentScriptName","StaticAggregationChartWithValues","firstDimension","AGGREGATE_BY_PROFILE_DIM_1_FIELD_QUERY_PARAMETER","secondDimension","AGGREGATE_BY_PROFILE_DIM_2_FIELD_QUERY_PARAMETER","twoDimensionalGraph","firstDimDataLabels","secondDimDataLabels","firstDimensionHandler","getKeyHandlerFor","firstDimSpecificMapping","secondDimensionHandler","secondDimSpecificMapping","rawValuesToDescriptionMap","notPresentLabels","filter","includes","concat","sortDataLabelsDim1","sort","Set","values","subAggregationObj","secondDimKey","secondDimensionDataLabel","add","sortDataLabelsDim2","totalGraphDataCount","maxCount","firstDimKey","labels","upperFirstChar","valuePrettifier","keyIndex","singleDimensionDataLegend","writeDataValuesInGraphFunction","writeDataValuesInGraph","animation","duration","onComplete","scales","yAxes","display","Radar","ticks","beginAtZero","suggestedMax","toReturn","NONE_DIMENSION_SELECTED_NAME","DEFAULT_NO_SORT_FIELDS","WEEKDAY_ARTIFICIAL_FIELD_NAME","MONTH_ARTIFICIAL_FIELD_NAME","CardAggregationChartWithOptions","chartTypes","showValues","toggleFullScreen","isFullScreen","Line","_1","_2","selectedAggregationField1","defaultAggregationField1","firstDimensionAggregationFields","selectedAggregationField2","defaultAggregationField2","selectedChartType","defaultChartType","selectedShowValues","defaultShowValues","newAggregationField","newChartType","changeShowValues","newShowValues","Card","CardHeader","title","ButtonToolbar","aria-label","ButtonGroup","vertical","Button","disabled","field","changeAggregationField1","text","prettifyFieldName","secondDimensionAggregationFields","changeAggregationField2","changeChartType","CardBody","apiParams","PROFILE_AVAILABLE_AGGREGATION_FIELDS","specificMappingsForFields","SERVER_FIELD_MALE","SEX_FIELD_TO_PRETTY_DESCRIPTION","SERVER_FIELD_FEMALE","Dashboard","userCountField","usersBySexField","allUserProfilesField","allUserEvaluationQuestions","fieldNames","collapsedPatientStatistics","getObjectCount","serverEndPoint","SERVER_USER_COUNT_ENDPOINT","getAll","SERVER_USER_ENDPOINT","aggregateByDimension1","USER_SEX_FIELD_NAME","SERVER_QUESTION_ENDPOINT","sex","sexAggregatedField","barColor","showHeaderIcon","sexHandler","k","absoluteValue","Progress","value","otherClasses","calloutType","showIconAbove","createMaleOrFemaleProgressGroup","Row","Col","data-target","Collapse","xs","md","xl","sm","createMaleOrFemaleCallout","specificMapping","USER_CURRENT_QUESTION_ID_FIELD_NAME","PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","shortDescription","toAccessObj","parse","replaceAll","e","questionLevel","USER_AGE_FIELD_NAME"],"mappings":"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","file":"static/js/60.9e387286.chunk.js","sourcesContent":["import {\r\n  QUESTION_ID_FIELD_NAME,\r\n  QUESTION_NEXT_FIELD_NAME,\r\n  QUESTION_PREVIOUS_FIELD_NAME\r\n} from \"./QuestionFieldNamesDictionaryToDescription\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n/**\r\n * Utility function to retrieve a question object among all by ID\r\n * @param allQuestions\r\n * @param questionID\r\n * @return {*}\r\n */\r\nfunction getQuestionByID(allQuestions, questionID) {\r\n  return allQuestions.find(question => {\r\n    return question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME] === questionID\r\n  })\r\n}\r\n\r\n/**\r\n * Utility function to follow the startQuestion next pointer and do some action on each next question\r\n * @param allQuestions\r\n * @param startQuestion\r\n * @param fun\r\n */\r\nfunction followNextPointerAndDo(allQuestions, startQuestion, fun) {\r\n  let currentQuestion = startQuestion\r\n  while (currentQuestion[QUESTION_NEXT_FIELD_NAME] !== undefined) {\r\n    const nextQuestionID = currentQuestion[QUESTION_NEXT_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n    currentQuestion = getQuestionByID(allQuestions, nextQuestionID)\r\n    fun(currentQuestion)\r\n  }\r\n}\r\n\r\n/**\r\n * Returns allQuestions sorted using their next/previous fields\r\n * @param allQuestions\r\n * @return {[]}\r\n */\r\nfunction sortQuestionObjects(allQuestions) {\r\n  const firstQuestion = allQuestions.find(question => {\r\n    return question[QUESTION_PREVIOUS_FIELD_NAME] === undefined\r\n  })\r\n\r\n  const resultQuestions = []\r\n  resultQuestions.push(firstQuestion)\r\n\r\n  followNextPointerAndDo(allQuestions, firstQuestion, question => resultQuestions.push(question))\r\n\r\n  return resultQuestions\r\n}\r\n\r\n/**\r\n * Utility function to compute the level number of a question.\r\n * @param allQuestions\r\n * @param currentQuestionID\r\n * @return {number} The currentQuestionID level\r\n */\r\nfunction computeQuestionLevel(allQuestions, currentQuestionID) {\r\n  let nextCount = 0\r\n\r\n  followNextPointerAndDo(allQuestions, getQuestionByID(allQuestions, currentQuestionID), _ => nextCount++)\r\n\r\n  return allQuestions.length - nextCount\r\n}\r\n\r\nexport {sortQuestionObjects, computeQuestionLevel}\r\n","import {CustomTooltips} from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\r\nimport {defaults} from \"react-chartjs-2\";\r\n\r\n/**\r\n * A function to write something over points in charts of Chart.js (namely on Line and Bar charts was tested)\r\n *\r\n * It should be called inside the bar chart options object like this way:\r\n *\r\n * ```javascript\r\n * {\r\n *  ...otherBarChartOptions,\r\n *  animation: {\r\n *    duration: 1,\r\n *    onComplete: function () {\r\n *      writePercentageOverBarsInChart(this, total)\r\n *    }\r\n *  }\r\n * }\r\n * ```\r\n */\r\nfunction writeInChart(self, total, getStringToWrite) {\r\n  const chartInstance = self.chart, ctx = chartInstance.ctx;\r\n  ctx.font = `${defaults.global.defaultFontSize}, ${defaults.global.defaultFontStyle}, ${defaults.global.defaultFontFamily}`;\r\n  ctx.fillStyle = self.chart.config.options.defaultFontColor;\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'bottom';\r\n\r\n  self.data.datasets.forEach(function (dataset, i) {\r\n    const meta = chartInstance.controller.getDatasetMeta(i);\r\n    meta.data.forEach(function (bar, index) {\r\n      const label = getStringToWrite(dataset.data[index], total);\r\n      ctx.fillText(label, bar._model.x, bar._model.y - 5);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * A function to write percentages in charts of Chart.js\r\n *\r\n * It should be called inside the bar chart options object like this way:\r\n *\r\n * ```javascript\r\n * {\r\n *  ...otherBarChartOptions,\r\n *  animation: {\r\n *    duration: 1,\r\n *    onComplete: function () {\r\n *      writePercentagesInChart(this, total)\r\n *    }\r\n *  }\r\n * }\r\n * ```\r\n *\r\n * @param self the chart instance\r\n * @param total the total value on which the graph is working on (needed to compute partial percentages\r\n */\r\nfunction writePercentagesInChart(self, total) {\r\n  writeInChart(self, total, (partial, total) => {\r\n    const percentage = (partial / total) * 100;\r\n    return `${Math.round(percentage * 10) / 10} %`;\r\n  });\r\n}\r\n\r\n/**\r\n * A function to write absolute values in charts of Chart.js\r\n *\r\n * It should be called inside the bar chart options object like this way:\r\n *\r\n * ```javascript\r\n * {\r\n *  ...otherBarChartOptions,\r\n *  animation: {\r\n *    duration: 1,\r\n *    onComplete: function () {\r\n *      writePercentagesInChart(this, total)\r\n *    }\r\n *  }\r\n * }\r\n * ```\r\n *\r\n * @param self the chart instance\r\n * @param total the total value on which the graph is working on (needed to compute partial percentages\r\n */\r\nfunction writeValuesInChart(self, total) {\r\n  writeInChart(self, total, (partial, _) => `${partial}`);\r\n}\r\n\r\nconst datasetsBorderColors = [\r\n  'rgba(50, 50, 50, 1)',\r\n  'rgba(0, 128, 255, 1)',\r\n  'rgba(255, 0, 127, 1)',\r\n  'rgba(0, 255, 255, 1)',\r\n  'rgba(0, 255, 128, 1)',\r\n  'rgba(0, 255, 0, 1)',\r\n  'rgba(128, 255, 0, 1)',\r\n  'rgba(255, 255, 0, 1)',\r\n  'rgba(255, 128, 0, 1)',\r\n  'rgba(255, 0, 0, 1)',\r\n  'rgba(255, 0, 255, 1)',\r\n  'rgba(127, 0, 255, 1)',\r\n  'rgba(0, 0, 255, 1)',\r\n]\r\n\r\nconst datasetsBackgroundColors = [\r\n  'rgba(155, 155, 155, 0.2)',\r\n  'rgba(0, 128, 255, 0.2)',\r\n  'rgba(255, 0, 127, 0.2)',\r\n  'rgba(0, 255, 255, 0.2)',\r\n  'rgba(0, 255, 128, 0.2)',\r\n  'rgba(0, 255, 0, 0.2)',\r\n  'rgba(128, 255, 0, 0.2)',\r\n  'rgba(255, 255, 0, 0.2)',\r\n  'rgba(255, 128, 0, 0.2)',\r\n  'rgba(255, 0, 0, 0.2)',\r\n  'rgba(255, 0, 255, 0.2)',\r\n  'rgba(127, 0, 255, 0.2)',\r\n  'rgba(0, 0, 255, 0.2)',\r\n]\r\n\r\nconst commonMultipleDimensionChartDataViewSettings = {\r\n  borderWidth: 1,\r\n  // hoverBackgroundColor: datasetsBackgroundColors[0],\r\n  // hoverBorderColor: datasetsBorderColors[0],\r\n}\r\n\r\nconst commonSingleDimensionChartDataViewSettings = {\r\n  backgroundColor: datasetsBackgroundColors[0],\r\n  borderColor: datasetsBorderColors[0],\r\n  borderWidth: 1,\r\n  hoverBackgroundColor: 'rgba(255, 99, 132, 0.4)',\r\n  hoverBorderColor: 'rgba(255, 99, 132, 1)',\r\n};\r\n\r\nconst commonChartOptions = {\r\n  tooltips: {\r\n    enabled: false,\r\n    custom: CustomTooltips\r\n  },\r\n  maintainAspectRatio: true,\r\n  legend: {\r\n    position: 'bottom'\r\n  },\r\n  hover: {\r\n    animationDuration: 0\r\n  }\r\n};\r\n\r\nexport {\r\n  writePercentagesInChart,\r\n  writeValuesInChart,\r\n  datasetsBorderColors,\r\n  datasetsBackgroundColors,\r\n  commonSingleDimensionChartDataViewSettings,\r\n  commonMultipleDimensionChartDataViewSettings,\r\n  commonChartOptions\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {\r\n  createLoading,\r\n  createPartialInitialStateFromFields,\r\n  load,\r\n  noDataAvailableComponent,\r\n  showLoadingOrRender\r\n} from \"../../../../utils/DataLoadingUtils\";\r\nimport {debug} from \"../../../../utils/Logging\";\r\nimport {Bar} from \"react-chartjs-2\";\r\n\r\nconst currentScriptName = \"MyBaseStaticChart.js\";\r\n\r\nconst FIELD_CHART_DATA = 'chartData';\r\nconst FIELD_CHART_OPTIONS = 'chartOptions';\r\n\r\nclass MyBaseStaticChart extends Component {\r\n\r\n  chartDataField = \"chartData\";\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.loadData.bind(this);\r\n\r\n    this.state = {\r\n      ...(createPartialInitialStateFromFields([this.chartDataField])),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (JSON.stringify(prevProps.apiFunctionParams) !== JSON.stringify(this.props.apiFunctionParams)) {\r\n      debug(currentScriptName, \"Component should refresh the graph\");\r\n      debug(currentScriptName, \"oldProps\", prevProps);\r\n      debug(currentScriptName, \"newProps\", this.props);\r\n\r\n      this.setState({\r\n        ...(createPartialInitialStateFromFields([this.chartDataField]))\r\n      }, () => this.loadData());\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadData()\r\n  }\r\n\r\n  loadData() {\r\n    load(this, this.chartDataField, this.props.apiFunction, this.props.apiFunctionParams)\r\n  }\r\n\r\n  render() {\r\n    return showLoadingOrRender(this, this.chartDataField,\r\n      (data) => {\r\n        if ((Array.isArray(data) && data.length) || Object.keys(data).length) {\r\n          const chartDataAndOptionsObj = this.props.dataManipulationLogic(data);\r\n          const chartData = chartDataAndOptionsObj[FIELD_CHART_DATA];\r\n          const chartOptions = chartDataAndOptionsObj[FIELD_CHART_OPTIONS];\r\n          const ChartType = this.props.chartType || Bar;\r\n          return (\r\n            <div className=\"chart-wrapper\">\r\n              <ChartType data={chartData} options={chartOptions}/>\r\n            </div>\r\n          );\r\n        } else return noDataAvailableComponent()\r\n      },\r\n      this.props.loading ? this.props.loading({}) : createLoading({pt: 3, position: 'center'})\r\n    )\r\n  }\r\n}\r\n\r\nexport {MyBaseStaticChart, FIELD_CHART_DATA, FIELD_CHART_OPTIONS}\r\n","import React from \"react\";\r\nimport DropdownToggle from \"reactstrap/es/DropdownToggle\";\r\nimport DropdownMenu from \"reactstrap/es/DropdownMenu\";\r\nimport DropdownItem from \"reactstrap/es/DropdownItem\";\r\nimport ButtonDropdown from \"reactstrap/es/ButtonDropdown\";\r\nimport {Button} from \"reactstrap\";\r\n\r\n/** A function to create dropdowns or near buttons depending on how many options are present */\r\nexport default function createMultiSelectionButton(\r\n  self,\r\n  options,\r\n  currentSelected,\r\n  changeSelectionFunction,\r\n  dropDownThreshold = 2,\r\n  preprocessingBeforeShowing = (optionText) => optionText,\r\n  id = \"\"\r\n) {\r\n  const selectorOpen = `${options.join()}_Open_${id}`;\r\n  return options.length > dropDownThreshold ? (\r\n    <ButtonDropdown isOpen={self.state[selectorOpen]}\r\n                    toggle={() => {\r\n                      let newState = {};\r\n                      newState[selectorOpen] = !self.state[selectorOpen];\r\n                      self.setState(newState)\r\n                    }}>\r\n      <DropdownToggle caret>{preprocessingBeforeShowing(currentSelected)}</DropdownToggle>\r\n      <DropdownMenu>\r\n        {\r\n          options.map(option =>\r\n            <DropdownItem key={option} onClick={() => changeSelectionFunction(option)}>\r\n              {preprocessingBeforeShowing(option)}\r\n            </DropdownItem>\r\n          )\r\n        }\r\n      </DropdownMenu>\r\n    </ButtonDropdown>\r\n  ) : (\r\n    options.map(option =>\r\n      <Button key={option} color=\"outline-secondary\" onClick={() => changeSelectionFunction(option)}\r\n              active={currentSelected === option}>{preprocessingBeforeShowing(option)}</Button>\r\n    )\r\n  )\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {\r\n  commonChartOptions,\r\n  commonMultipleDimensionChartDataViewSettings,\r\n  commonSingleDimensionChartDataViewSettings,\r\n  datasetsBackgroundColors,\r\n  datasetsBorderColors\r\n} from \"../../../../utils/ChartJsUtils\";\r\nimport {FIELD_CHART_DATA, FIELD_CHART_OPTIONS, MyBaseStaticChart} from \"./MyBaseStaticChart\";\r\nimport {upperFirstChar} from \"../../../../utils/StringUtils\";\r\nimport {Radar} from \"react-chartjs-2\";\r\nimport {\r\n  AGGREGATE_BY_PROFILE_DIM_1_FIELD_QUERY_PARAMETER,\r\n  AGGREGATE_BY_PROFILE_DIM_2_FIELD_QUERY_PARAMETER\r\n} from \"../../../../controller/ServerApi\";\r\nimport {debug} from \"../../../../utils/Logging\";\r\nimport {getKeyHandlerFor} from \"../../../../model/FieldPrettifyHandler\";\r\n\r\nconst currentScriptName = \"StaticAggregationChartWithValues.js\"\r\n\r\nexport default class StaticAggregationChartWithValues extends Component {\r\n\r\n  render() {\r\n    return <MyBaseStaticChart\r\n\r\n      apiFunction={this.props.apiFunction}\r\n      apiFunctionParams={this.props.apiFunctionParams}\r\n      chartType={this.props.chartType}\r\n      loading={this.props.loading}\r\n\r\n      dataManipulationLogic={data => {\r\n        debug(currentScriptName, `Entering data manipulation logic with:`, data)\r\n        const firstDimension = this.props.apiFunctionParams[AGGREGATE_BY_PROFILE_DIM_1_FIELD_QUERY_PARAMETER];\r\n        debug(currentScriptName, `first dimension is:`, firstDimension)\r\n        const secondDimension = this.props.apiFunctionParams[AGGREGATE_BY_PROFILE_DIM_2_FIELD_QUERY_PARAMETER] || null;\r\n        debug(currentScriptName, `second dimension is:`, secondDimension)\r\n\r\n        const twoDimensionalGraph = secondDimension !== null\r\n        debug(currentScriptName, `Its a two dimensional graph:`, twoDimensionalGraph)\r\n\r\n        const firstDimensionHandler = getKeyHandlerFor(firstDimension, this.props.firstDimSpecificMapping)\r\n        const secondDimensionHandler = getKeyHandlerFor(secondDimension, this.props.secondDimSpecificMapping)\r\n\r\n        let firstDimDataLabels;\r\n        if (firstDimensionHandler.rawValuesToDescriptionMap !== undefined) {\r\n          // if present use the ordering given, by our data model\r\n          firstDimDataLabels = Object.keys(firstDimensionHandler.rawValuesToDescriptionMap)\r\n          debug(currentScriptName, `Our data model has a proper ordering for first dimension values: `, firstDimDataLabels)\r\n          // adding non predefined present labels at the end\r\n          const notPresentLabels = Object.keys(data).filter(key => !firstDimDataLabels.includes(key))\r\n          debug(currentScriptName, `But there could be also non present labels to be added: `, notPresentLabels)\r\n          firstDimDataLabels = firstDimDataLabels.concat(notPresentLabels)\r\n          debug(currentScriptName, `Concatenation result is: `, firstDimDataLabels)\r\n        } else {\r\n          // if not present a predefined key ordering, take the labels from the server data\r\n          firstDimDataLabels = Object.keys(data);\r\n          debug(currentScriptName, `We don't have a predefined ordering according to our data model for first dimension values,\r\n           these are labels taken from received server data:`, firstDimDataLabels)\r\n          // sort alphabetically only if requested\r\n          if (this.props.sortDataLabelsDim1 || this.props.sortDataLabelsDim1 === undefined)\r\n            firstDimDataLabels = firstDimDataLabels.sort();\r\n        }\r\n\r\n        let secondDimDataLabels;\r\n        if (twoDimensionalGraph && secondDimensionHandler.rawValuesToDescriptionMap !== undefined) {\r\n          // if present use the ordering given, by our data model\r\n          secondDimDataLabels = Object.keys(secondDimensionHandler.rawValuesToDescriptionMap)\r\n          debug(currentScriptName, `Our data model has a proper ordering for second dimension values: `, secondDimDataLabels)\r\n          // adding non predefined present labels at the end\r\n          let notPresentLabels = new Set()\r\n          Object.values(data).forEach(subAggregationObj => {\r\n            if (!Array.isArray(subAggregationObj))\r\n              Object.keys(subAggregationObj)\r\n                .filter(secondDimKey => !secondDimDataLabels.includes(secondDimKey))\r\n                .forEach(secondDimensionDataLabel => notPresentLabels.add(secondDimensionDataLabel))\r\n          })\r\n          debug(currentScriptName, `But there could be also non present labels to be added: `, notPresentLabels)\r\n          secondDimDataLabels = secondDimDataLabels.concat([...notPresentLabels])\r\n          debug(currentScriptName, `Concatenation result is: `, secondDimDataLabels)\r\n        } else if (twoDimensionalGraph) {\r\n          // if not present a predefined key ordering, take the labels from the server data\r\n          secondDimDataLabels = new Set()\r\n          Object.values(data).forEach(subAggregationObj => {\r\n            if (!Array.isArray(subAggregationObj))\r\n              Object.keys(subAggregationObj)\r\n                .forEach(secondDimensionDataLabel => secondDimDataLabels.add(secondDimensionDataLabel))\r\n          })\r\n          secondDimDataLabels = [...secondDimDataLabels];\r\n          debug(currentScriptName, `We don't have a predefined ordering according to our data model for second dimension values,\r\n           these are labels taken from received server data:`, secondDimDataLabels)\r\n          // sort alphabetically only if requested\r\n          if (this.props.sortDataLabelsDim2 || this.props.sortDataLabelsDim2 === undefined)\r\n            secondDimDataLabels = secondDimDataLabels.sort();\r\n        }\r\n\r\n        debug(currentScriptName, `Now lets count the total of data and the max value`)\r\n        let totalGraphDataCount = 0;\r\n        let maxCount = 0;\r\n        firstDimDataLabels.forEach(firstDimKey => {\r\n          if (data[firstDimKey] !== undefined) {\r\n            if (twoDimensionalGraph) {\r\n              secondDimDataLabels.forEach(secondDimKey => {\r\n                if (data[firstDimKey][secondDimKey] !== undefined) {\r\n                  totalGraphDataCount += data[firstDimKey][secondDimKey].length;\r\n                  if (maxCount < data[firstDimKey][secondDimKey].length)\r\n                    maxCount = data[firstDimKey][secondDimKey].length\r\n                }\r\n              })\r\n            } else {\r\n              totalGraphDataCount += data[firstDimKey].length;\r\n              if (maxCount < data[firstDimKey].length)\r\n                maxCount = data[firstDimKey].length\r\n            }\r\n          }\r\n        });\r\n        debug(currentScriptName, `Computed data total count is '${totalGraphDataCount}' and Max Value is '${maxCount}'`)\r\n\r\n        const chartData = {\r\n          labels: firstDimDataLabels.map(firstDimKey =>\r\n            firstDimKey === 'uncatalogued'\r\n              ? upperFirstChar(firstDimKey)\r\n              : firstDimensionHandler.valuePrettifier(firstDimKey, true, false)\r\n          ),\r\n          datasets: twoDimensionalGraph\r\n            ? secondDimDataLabels.map((secondDimKey, keyIndex) => {\r\n              return {\r\n                ...commonMultipleDimensionChartDataViewSettings,\r\n                label: secondDimKey === 'uncatalogued'\r\n                  ? upperFirstChar(secondDimKey)\r\n                  : secondDimensionHandler.valuePrettifier(secondDimKey, true, false),\r\n                data: firstDimDataLabels.map(firstDimKey => {\r\n                  if (data[firstDimKey] !== undefined && data[firstDimKey][secondDimKey])\r\n                    return data[firstDimKey][secondDimKey].length\r\n                  else\r\n                    return 0\r\n                }),\r\n                backgroundColor: datasetsBackgroundColors[keyIndex + 1],\r\n                borderColor: datasetsBorderColors[keyIndex + 1],\r\n              }\r\n            })\r\n            : [{\r\n              ...commonSingleDimensionChartDataViewSettings,\r\n              label: this.props.singleDimensionDataLegend,\r\n              data: firstDimDataLabels.map(key => {\r\n                if (data[key] !== undefined) return data[key].length\r\n                else return 0\r\n              }),\r\n            }]\r\n        };\r\n        debug(currentScriptName, `Computed Chart Data`)\r\n\r\n        const writeDataValuesInGraphFunction = this.props.writeDataValuesInGraph;\r\n        const chartOptions = {\r\n          ...commonChartOptions,\r\n          animation: {\r\n            duration: 1,\r\n            onComplete: function () {\r\n              writeDataValuesInGraphFunction(this, totalGraphDataCount);\r\n            }\r\n          },\r\n          scales: {\r\n            yAxes: [{\r\n              display: this.props.chartType !== Radar,\r\n              ticks: {\r\n                beginAtZero: true,\r\n                suggestedMax: maxCount + maxCount / 10\r\n              }\r\n            }]\r\n          }\r\n        };\r\n        debug(currentScriptName, `Computed Chart Options`)\r\n\r\n        let toReturn = {};\r\n        toReturn[FIELD_CHART_DATA] = chartData;\r\n        toReturn[FIELD_CHART_OPTIONS] = chartOptions;\r\n        return toReturn;\r\n      }}/>;\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {ButtonToolbar, Card, CardBody, CardHeader} from \"reactstrap\";\r\nimport StaticAggregationChartWithValues from \"./StaticAggregationChartWithValues\";\r\nimport {Bar, Line, Radar} from \"react-chartjs-2\";\r\nimport {writePercentagesInChart, writeValuesInChart} from \"../../../../utils/ChartJsUtils\";\r\nimport ButtonGroup from \"reactstrap/es/ButtonGroup\";\r\nimport createMultiSelectionButton from \"../buttons/MultiSelectionButton\";\r\nimport {PROFILE_AVAILABLE_AGGREGATION_FIELDS} from \"../../../../model/ProfileFieldNamesDictionaryToHandlers\";\r\nimport Button from \"reactstrap/es/Button\";\r\nimport {\r\n  AGGREGATE_BY_PROFILE_DIM_1_FIELD_QUERY_PARAMETER,\r\n  AGGREGATE_BY_PROFILE_DIM_2_FIELD_QUERY_PARAMETER\r\n} from \"../../../../controller/ServerApi\";\r\nimport FullScreen from \"react-full-screen\";\r\nimport {MONTH_ARTIFICIAL_FIELD_NAME, WEEKDAY_ARTIFICIAL_FIELD_NAME} from \"../../../../model/ModelUtils\";\r\nimport {prettifyFieldName} from \"../../../../model/FieldPrettifyHandler\";\r\n\r\nconst NONE_DIMENSION_SELECTED_NAME = 'None'\r\n\r\nconst DEFAULT_NO_SORT_FIELDS = [\r\n  WEEKDAY_ARTIFICIAL_FIELD_NAME,\r\n  MONTH_ARTIFICIAL_FIELD_NAME,\r\n];\r\n\r\nconst AGGREGATION_CHART_TYPE_BAR = \"Bar\"\r\nconst AGGREGATION_CHART_TYPE_LINE = \"Line\"\r\nconst AGGREGATION_CHART_TYPE_RADAR = \"Radar\"\r\n\r\nconst CHART_SHOW_VALUES_PERCENTAGE = \"Percentage\"\r\nconst CHART_SHOW_VALUES_ABSOLUTE = \"Absolute\"\r\nconst CHART_SHOW_VALUES_HIDE = \"Hide values\"\r\n\r\nconst DEFAULT_CHART_TYPE = AGGREGATION_CHART_TYPE_BAR;\r\nconst DEFAULT_SHOWN_VALUE = CHART_SHOW_VALUES_PERCENTAGE;\r\n\r\nclass CardAggregationChartWithOptions extends Component {\r\n\r\n  /** Object holding mappings between the chart type name and its class */\r\n  chartTypes = {}\r\n\r\n  /** Object holding mappings between the chart show values name and its computation function */\r\n  showValues = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.chartTypes[AGGREGATION_CHART_TYPE_BAR] = Bar\r\n    this.chartTypes[AGGREGATION_CHART_TYPE_LINE] = Line\r\n    this.chartTypes[AGGREGATION_CHART_TYPE_RADAR] = Radar\r\n\r\n    this.showValues[CHART_SHOW_VALUES_PERCENTAGE] = writePercentagesInChart\r\n    this.showValues[CHART_SHOW_VALUES_ABSOLUTE] = writeValuesInChart\r\n    this.showValues[CHART_SHOW_VALUES_HIDE] = (_1, _2) => ''\r\n\r\n    this.state = {\r\n      selectedAggregationField1: props.defaultAggregationField1 || props.firstDimensionAggregationFields[0],\r\n      selectedAggregationField2: props.defaultAggregationField2 || NONE_DIMENSION_SELECTED_NAME,\r\n      selectedChartType: props.defaultChartType || DEFAULT_CHART_TYPE,\r\n      selectedShowValues: props.defaultShowValues || DEFAULT_SHOWN_VALUE,\r\n\r\n      isFullScreen: false,\r\n    }\r\n  }\r\n\r\n  toggleFullScreen = () => {\r\n    this.setState({isFullScreen: !this.state.isFullScreen});\r\n  }\r\n\r\n  changeAggregationField1(newAggregationField) {\r\n    this.setState({selectedAggregationField1: newAggregationField})\r\n  }\r\n\r\n  changeAggregationField2(newAggregationField) {\r\n    this.setState({selectedAggregationField2: newAggregationField})\r\n  }\r\n\r\n  changeChartType(newChartType) {\r\n    this.setState({selectedChartType: newChartType})\r\n    if (newChartType === AGGREGATION_CHART_TYPE_BAR)\r\n      this.changeShowValues(CHART_SHOW_VALUES_PERCENTAGE)\r\n    else if (newChartType === AGGREGATION_CHART_TYPE_LINE)\r\n      this.changeShowValues(CHART_SHOW_VALUES_ABSOLUTE)\r\n    else if (newChartType === AGGREGATION_CHART_TYPE_RADAR)\r\n      this.changeShowValues(CHART_SHOW_VALUES_HIDE)\r\n  }\r\n\r\n  changeShowValues(newShowValues) {\r\n    this.setState({selectedShowValues: newShowValues})\r\n  }\r\n\r\n  render() {\r\n    const {selectedAggregationField1, selectedAggregationField2, selectedChartType, selectedShowValues,} = this.state;\r\n    return (\r\n      <FullScreen enabled={this.state.isFullScreen}>\r\n        <Card className=\"full-screenable-node\">\r\n          <CardHeader>\r\n            <span className=\"h5\"><strong>{this.props.title}</strong></span>\r\n\r\n            <div className=\"card-header-actions\">\r\n              <ButtonToolbar className=\"float-right\" aria-label=\"Toolbar with chart options button groups\">\r\n                <ButtonGroup vertical className=\"mr-2\" aria-label=\"Aggregation selection group\">\r\n                  <Button disabled className=\"btn-light\">1° Dimension</Button>\r\n                  {\r\n                    createMultiSelectionButton(this,\r\n                      this.props.firstDimensionAggregationFields.filter(field => field !== selectedAggregationField2),\r\n                      selectedAggregationField1,\r\n                      this.changeAggregationField1.bind(this),\r\n                      2,\r\n                      text => prettifyFieldName(text, true),\r\n                      \"firstDimension\"\r\n                    )\r\n                  }\r\n                </ButtonGroup>\r\n                <ButtonGroup vertical className=\"mr-3\" aria-label=\"Aggregation selection group\">\r\n                  <Button disabled className=\"btn-light\">2° Dimension</Button>\r\n                  {\r\n                    createMultiSelectionButton(this,\r\n                      [NONE_DIMENSION_SELECTED_NAME, ...(this.props.secondDimensionAggregationFields.filter(field => field !== selectedAggregationField1))],\r\n                      selectedAggregationField2,\r\n                      this.changeAggregationField2.bind(this),\r\n                      2,\r\n                      text => prettifyFieldName(text, true),\r\n                      \"secondDimension\"\r\n                    )\r\n                  }\r\n                </ButtonGroup>\r\n                <ButtonGroup vertical className=\"\" aria-label=\"Chart group\">\r\n                  {\r\n                    createMultiSelectionButton(this,\r\n                      Object.keys(this.chartTypes),\r\n                      selectedChartType,\r\n                      this.changeChartType.bind(this),\r\n                    )\r\n                  }\r\n                  {\r\n                    createMultiSelectionButton(this,\r\n                      Object.keys(this.showValues),\r\n                      selectedShowValues,\r\n                      this.changeShowValues.bind(this)\r\n                    )\r\n                  }\r\n                </ButtonGroup>\r\n                <i className={`${this.state.isFullScreen ? \"fa fa-compress\" : \"fa fa-expand\"} ml-3`}\r\n                   onClick={this.toggleFullScreen}/>\r\n              </ButtonToolbar>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <StaticAggregationChartWithValues\r\n              apiFunction={this.props.apiFunction}\r\n              apiFunctionParams={(() => {\r\n                let apiParams = this.props.apiFunctionParams ? {...this.props.apiFunctionParams} : {};\r\n                if (PROFILE_AVAILABLE_AGGREGATION_FIELDS.includes(selectedAggregationField1))\r\n                  apiParams[AGGREGATE_BY_PROFILE_DIM_1_FIELD_QUERY_PARAMETER] = selectedAggregationField1;\r\n\r\n                if (PROFILE_AVAILABLE_AGGREGATION_FIELDS.includes(selectedAggregationField2))\r\n                  apiParams[AGGREGATE_BY_PROFILE_DIM_2_FIELD_QUERY_PARAMETER] = selectedAggregationField2;\r\n\r\n                return apiParams;\r\n              })()}\r\n              chartType={this.chartTypes[selectedChartType]}\r\n              writeDataValuesInGraph={this.showValues[selectedShowValues]}\r\n              sortDataLabelsDim1={!DEFAULT_NO_SORT_FIELDS.includes(selectedAggregationField1)}\r\n              sortDataLabelsDim2={!DEFAULT_NO_SORT_FIELDS.includes(selectedAggregationField2)}\r\n              singleDimensionDataLegend={this.props.singleDimensionDataLegend || this.props.title}\r\n              loading={this.props.loading}\r\n              firstDimSpecificMapping={this.props.specificMappingsForFields}\r\n              secondDimSpecificMapping={this.props.specificMappingsForFields}\r\n            />\r\n\r\n          </CardBody>\r\n        </Card>\r\n      </FullScreen>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  CardAggregationChartWithOptions,\r\n  AGGREGATION_CHART_TYPE_BAR,\r\n  AGGREGATION_CHART_TYPE_LINE,\r\n  AGGREGATION_CHART_TYPE_RADAR,\r\n  CHART_SHOW_VALUES_PERCENTAGE,\r\n  CHART_SHOW_VALUES_ABSOLUTE,\r\n  CHART_SHOW_VALUES_HIDE,\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Card, CardBody, CardHeader, Col, Collapse, Progress, Row,} from 'reactstrap';\r\nimport {\r\n  getAll,\r\n  getObjectCount,\r\n  SERVER_QUESTION_ENDPOINT,\r\n  SERVER_USER_COUNT_ENDPOINT,\r\n  SERVER_USER_ENDPOINT\r\n} from \"../../../../controller/ServerApi\";\r\nimport {\r\n  createLoading,\r\n  createPartialInitialStateFromFields,\r\n  load,\r\n  showLoadingOrRender\r\n} from \"../../../../utils/DataLoadingUtils\";\r\nimport {SEX_FIELD_TO_PRETTY_DESCRIPTION} from \"../../../../model/FieldValuesDictionaryToDescription\";\r\nimport {\r\n  PROFILE_AVAILABLE_AGGREGATION_FIELDS,\r\n  PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  USER_AGE_FIELD_NAME,\r\n  USER_CURRENT_QUESTION_ID_FIELD_NAME,\r\n  USER_SEX_FIELD_NAME\r\n} from \"../../../../model/ProfileFieldNamesDictionaryToHandlers\";\r\nimport {\r\n  AGGREGATION_CHART_TYPE_BAR,\r\n  AGGREGATION_CHART_TYPE_RADAR,\r\n  CardAggregationChartWithOptions,\r\n  CHART_SHOW_VALUES_HIDE,\r\n  CHART_SHOW_VALUES_PERCENTAGE\r\n} from \"../../components/charts/CardAggregationChartWithOptions\";\r\nimport {getKeyHandlerFor} from \"../../../../model/FieldPrettifyHandler\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"../../../../model/ModelUtils\";\r\nimport {computeQuestionLevel} from \"../../../../model/QuestionsUtils\";\r\n\r\n// const currentScriptName = \"Dashboard.js\";\r\n\r\nconst DATA_COUNT_FIELD_NAME = \"count\";\r\nconst SERVER_FIELD_MALE = Object.keys(SEX_FIELD_TO_PRETTY_DESCRIPTION)[0];\r\nconst SERVER_FIELD_FEMALE = Object.keys(SEX_FIELD_TO_PRETTY_DESCRIPTION)[1];\r\n\r\nclass Dashboard extends Component {\r\n\r\n  userCountField = \"patientCount\";\r\n  usersBySexField = \"usersBySex\";\r\n  allUserProfilesField = \"allUserProfiles\";\r\n  allUserEvaluationQuestions = \"allQuestions\"\r\n\r\n  fieldNames = [\r\n    this.userCountField,\r\n    this.usersBySexField,\r\n    this.allUserProfilesField,\r\n    this.allUserEvaluationQuestions,\r\n  ];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ...(createPartialInitialStateFromFields(this.fieldNames)),\r\n\r\n      collapsedPatientStatistics: false,\r\n    };\r\n\r\n    load(this, this.userCountField, getObjectCount, {serverEndPoint: SERVER_USER_COUNT_ENDPOINT});\r\n    load(this, this.usersBySexField, getAll, {\r\n      serverEndPoint: SERVER_USER_ENDPOINT, aggregateByDimension1: USER_SEX_FIELD_NAME\r\n    });\r\n    load(this, this.allUserProfilesField, getAll, {serverEndPoint: SERVER_USER_ENDPOINT})\r\n    load(this, this.allUserEvaluationQuestions, getAll, {serverEndPoint: SERVER_QUESTION_ENDPOINT})\r\n\r\n  }\r\n\r\n  /** Creates a Male or Female Progress group */\r\n  createMaleOrFemaleProgressGroup(\r\n    sex,\r\n    sexAggregatedField,\r\n    barColor = 'success',\r\n    showHeaderIcon = true\r\n  ) {\r\n    const sexHandler = getKeyHandlerFor(USER_SEX_FIELD_NAME);\r\n    return showLoadingOrRender(this, sexAggregatedField,\r\n      (data) => {\r\n        let total = 0;\r\n        Object.keys(data).forEach(k => total += data[k].length);\r\n        const absoluteValue = (data[sex] || []).length;\r\n        const percentage = Math.round((absoluteValue * 1000) / total) / 10;\r\n\r\n        return (\r\n          <div className=\"progress-group\">\r\n            <div className=\"progress-group-header\">\r\n              {\r\n                showHeaderIcon\r\n                  ? <i className={`progress-group-icon icon-user${sex === SERVER_FIELD_FEMALE ? '-female' : ''}`}/>\r\n                  : null\r\n              }\r\n              <span className=\"title\">{sexHandler.valuePrettifier(sex, false, false)}</span>\r\n              <span className=\"ml-auto font-weight-bold\">{absoluteValue} <span\r\n                className=\"text-muted small\">({percentage} %)</span></span>\r\n            </div>\r\n            <div className=\"progress-group-bars\">\r\n              <Progress className=\"progress-xs\" color={barColor} value={percentage}/>\r\n            </div>\r\n          </div>\r\n        )\r\n      },\r\n      <div className=\"progress-group\">\r\n        <div className=\"progress-group-header\">\r\n          <span className=\"title\">{sexHandler.valuePrettifier(sex, false, false)}</span>\r\n          {createLoading({position: 'right', otherClasses: 'ml-auto'})}\r\n        </div>\r\n        <div className=\"progress-group-bars\">\r\n          <Progress className=\"progress-xs\" color={barColor} value=\"0\"/>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  /** Creates a Male aor Female callout */\r\n  createMaleOrFemaleCallout(\r\n    sex,\r\n    sexAggregatedField,\r\n    calloutType = 'info',\r\n    barColor = 'success',\r\n    showIconAbove = true\r\n  ) {\r\n    return (\r\n      <div className={`callout callout-${calloutType}`}>\r\n        {showIconAbove ? <i className={`icon-user${sex === SERVER_FIELD_FEMALE ? '-female' : ''}`}/> : null}\r\n        <br/>\r\n        {this.createMaleOrFemaleProgressGroup(sex, sexAggregatedField, barColor, !showIconAbove)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n\r\n        <Row>\r\n          <Col>\r\n            <Card>\r\n              <CardHeader>\r\n                User statistics\r\n                <div className=\"card-header-actions\">\r\n                  <div className=\"card-header-action btn btn-minimize\" data-target=\"#patientStatisticsCard\"\r\n                       onClick={() => this.setState({collapsedPatientStatistics: !this.state.collapsedPatientStatistics})}>\r\n                    <i className={`icon-arrow-${this.state.collapsedPatientStatistics ? \"down\" : \"up\"}`}/>\r\n                  </div>\r\n                </div>\r\n              </CardHeader>\r\n              <Collapse isOpen={!this.state.collapsedPatientStatistics} id=\"patientStatisticsCard\">\r\n                <CardBody>\r\n                  <Row>\r\n                    <Col xs=\"24\" md=\"12\" xl=\"12\">\r\n                      <Row>\r\n                        <Col sm=\"2\">\r\n                          <div className=\"callout callout-info\">\r\n                            <small className=\"text-muted\">Total Users</small>\r\n                            <br/>\r\n                            {\r\n                              showLoadingOrRender(this, this.userCountField,\r\n                                (data) => <strong className=\"h4\">{data[DATA_COUNT_FIELD_NAME]}</strong>,\r\n                                createLoading({position: \"left\"})\r\n                              )\r\n                            }\r\n                          </div>\r\n                        </Col>\r\n                        <Col sm=\"5\">\r\n                          {this.createMaleOrFemaleCallout(SERVER_FIELD_MALE, this.usersBySexField, \"success\", \"success\")}\r\n                        </Col>\r\n                        <Col sm=\"5\">\r\n                          {this.createMaleOrFemaleCallout(SERVER_FIELD_FEMALE, this.usersBySexField, \"success\", \"success\")}\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      <hr className=\"mt-0\"/>\r\n\r\n                      {\r\n                        showLoadingOrRender(this, this.allUserEvaluationQuestions,\r\n                          allQuestions => {\r\n\r\n                            const specificMapping = {\r\n                              [USER_CURRENT_QUESTION_ID_FIELD_NAME]: {\r\n                                ...PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[USER_CURRENT_QUESTION_ID_FIELD_NAME],\r\n                                valuePrettifier: (value, shortDescription = false) => {\r\n                                  let toAccessObj = value\r\n                                  if (typeof value === \"string\") {\r\n                                    try {\r\n                                      toAccessObj = JSON.parse(value.replaceAll('\\'', '\"'))\r\n                                    } catch (e) {\r\n                                    }\r\n                                  }\r\n                                  if (typeof toAccessObj === \"object\") {\r\n                                    const questionLevel = computeQuestionLevel(allQuestions, toAccessObj[OBJECT_REFERENCE_ID_FIELD_NAME])\r\n                                    return shortDescription\r\n                                      ? `Level ${questionLevel}`\r\n                                      : `Question level ${questionLevel}`\r\n                                  } else\r\n                                    return value\r\n                                },\r\n                              }\r\n                            }\r\n\r\n                            return (\r\n                              <Row>\r\n                                <Col sm=\"6\">\r\n                                  <CardAggregationChartWithOptions\r\n                                    apiFunction={getAll}\r\n                                    apiFunctionParams={{serverEndPoint: SERVER_USER_ENDPOINT}}\r\n                                    title={\"Users\"}\r\n                                    firstDimensionAggregationFields={PROFILE_AVAILABLE_AGGREGATION_FIELDS}\r\n                                    secondDimensionAggregationFields={PROFILE_AVAILABLE_AGGREGATION_FIELDS}\r\n                                    defaultAggregationField1={USER_AGE_FIELD_NAME}\r\n                                    defaultAggregationField2={null}\r\n                                    defaultShowValues={CHART_SHOW_VALUES_PERCENTAGE}\r\n                                    defaultChartType={AGGREGATION_CHART_TYPE_BAR}\r\n                                    singleDimensionDataLegend={\"Number of Users\"}\r\n                                    specificMappingsForFields={specificMapping}\r\n                                    loading={createLoading}/>\r\n                                </Col>\r\n                                <Col sm=\"6\">\r\n                                  <CardAggregationChartWithOptions\r\n                                    apiFunction={getAll}\r\n                                    apiFunctionParams={{serverEndPoint: SERVER_USER_ENDPOINT}}\r\n                                    title={\"Users\"}\r\n                                    firstDimensionAggregationFields={PROFILE_AVAILABLE_AGGREGATION_FIELDS}\r\n                                    secondDimensionAggregationFields={PROFILE_AVAILABLE_AGGREGATION_FIELDS}\r\n                                    defaultAggregationField1={USER_AGE_FIELD_NAME}\r\n                                    defaultAggregationField2={USER_SEX_FIELD_NAME}\r\n                                    defaultShowValues={CHART_SHOW_VALUES_HIDE}\r\n                                    defaultChartType={AGGREGATION_CHART_TYPE_RADAR}\r\n                                    singleDimensionDataLegend={\"Number of Users\"}\r\n                                    specificMappingsForFields={specificMapping}\r\n                                    loading={createLoading}/>\r\n                                </Col>\r\n                              </Row>\r\n                            )\r\n                          },\r\n                          createLoading({})\r\n                        )\r\n                      }\r\n                    </Col>\r\n                  </Row>\r\n                </CardBody>\r\n              </Collapse>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}