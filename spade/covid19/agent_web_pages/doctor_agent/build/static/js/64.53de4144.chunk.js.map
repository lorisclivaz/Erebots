{"version":3,"sources":["model/QuestionsUtils.js","view/protected/pages/Questions/QuestionsReorder.js"],"names":["getQuestionByID","allQuestions","questionID","find","question","QUESTION_ID_FIELD_NAME","OBJECT_REFERENCE_ID_FIELD_NAME","followNextPointerAndDo","startQuestion","fun","currentQuestion","undefined","QUESTION_NEXT_FIELD_NAME","sortQuestionObjects","firstQuestion","QUESTION_PREVIOUS_FIELD_NAME","resultQuestions","push","computeQuestionLevel","currentQuestionID","nextCount","_","length","QuestionItem","nextProps","nextState","nextContext","this","props","commonProps","hiddenDetails","originalQuestions","item","itemSelected","dragHandleProps","scale","shadow","className","style","backgroundColor","transform","boxShadow","QUESTION_TEXT_EN_FIELD_NAME","hidden","QUESTION_TEXT_IT_FIELD_NAME","QUESTION_TEXT_FR_FIELD_NAME","QUESTION_TEXT_DE_FIELD_NAME","map","field","keyHandler","getKeyHandlerFor","QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","row","key","md","keyPrettyNameLong","xs","Component","QuestionsReorder","fieldNames","state","createPartialInitialStateFromFields","draggableList","uploadingChanges","errorMessage","onListChange","bind","load","getAll","serverEndPoint","SERVER_QUESTION_ENDPOINT","questions","newList","setState","window","scrollTo","log","warn","orderChanged","some","index","debug","serverPromises","allReorderedQuestions","formData","FormData","append","toUpdateID","postObject","ACTION_MODIFY","id","formDataObject","Promise","all","then","result","history","back","error","message","setErrorMessage","xl","size","color","onClick","toggleHiddenDetails","showLoadingOrRender","list","itemKey","obj","template","onMoveEnd","container","document","body","createLoading","type","sendChangesToServer","disabled","alt","src","require","to"],"mappings":"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","file":"static/js/64.53de4144.chunk.js","sourcesContent":["import {\r\n  QUESTION_ID_FIELD_NAME,\r\n  QUESTION_NEXT_FIELD_NAME,\r\n  QUESTION_PREVIOUS_FIELD_NAME\r\n} from \"./QuestionFieldNamesDictionaryToDescription\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n/**\r\n * Utility function to retrieve a question object among all by ID\r\n * @param allQuestions\r\n * @param questionID\r\n * @return {*}\r\n */\r\nfunction getQuestionByID(allQuestions, questionID) {\r\n  return allQuestions.find(question => {\r\n    return question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME] === questionID\r\n  })\r\n}\r\n\r\n/**\r\n * Utility function to follow the startQuestion next pointer and do some action on each next question\r\n * @param allQuestions\r\n * @param startQuestion\r\n * @param fun\r\n */\r\nfunction followNextPointerAndDo(allQuestions, startQuestion, fun) {\r\n  let currentQuestion = startQuestion\r\n  while (currentQuestion[QUESTION_NEXT_FIELD_NAME] !== undefined) {\r\n    const nextQuestionID = currentQuestion[QUESTION_NEXT_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n    currentQuestion = getQuestionByID(allQuestions, nextQuestionID)\r\n    fun(currentQuestion)\r\n  }\r\n}\r\n\r\n/**\r\n * Returns allQuestions sorted using their next/previous fields\r\n * @param allQuestions\r\n * @return {[]}\r\n */\r\nfunction sortQuestionObjects(allQuestions) {\r\n  const firstQuestion = allQuestions.find(question => {\r\n    return question[QUESTION_PREVIOUS_FIELD_NAME] === undefined\r\n  })\r\n\r\n  const resultQuestions = []\r\n  resultQuestions.push(firstQuestion)\r\n\r\n  followNextPointerAndDo(allQuestions, firstQuestion, question => resultQuestions.push(question))\r\n\r\n  return resultQuestions\r\n}\r\n\r\n/**\r\n * Utility function to compute the level number of a question.\r\n * @param allQuestions\r\n * @param currentQuestionID\r\n * @return {number} The currentQuestionID level\r\n */\r\nfunction computeQuestionLevel(allQuestions, currentQuestionID) {\r\n  let nextCount = 0\r\n\r\n  followNextPointerAndDo(allQuestions, getQuestionByID(allQuestions, currentQuestionID), _ => nextCount++)\r\n\r\n  return allQuestions.length - nextCount\r\n}\r\n\r\nexport {sortQuestionObjects, computeQuestionLevel}\r\n","import React, {Component} from 'react';\r\nimport {Button, Card, CardBody, CardFooter, CardHeader, Col, Form, FormGroup, Label, Row} from 'reactstrap';\r\nimport {ACTION_MODIFY, getAll, postObject, SERVER_QUESTION_ENDPOINT} from \"../../../../controller/ServerApi\";\r\nimport {\r\n  createLoading,\r\n  createPartialInitialStateFromFields,\r\n  load,\r\n  showLoadingOrRender\r\n} from \"../../../../utils/DataLoadingUtils\";\r\nimport {\r\n  QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  QUESTION_ID_FIELD_NAME,\r\n  QUESTION_NEXT_FIELD_NAME,\r\n  QUESTION_PREVIOUS_FIELD_NAME,\r\n  QUESTION_TEXT_DE_FIELD_NAME,\r\n  QUESTION_TEXT_EN_FIELD_NAME,\r\n  QUESTION_TEXT_FR_FIELD_NAME,\r\n  QUESTION_TEXT_IT_FIELD_NAME\r\n} from \"../../../../model/QuestionFieldNamesDictionaryToDescription\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"../../../../model/ModelUtils\";\r\nimport DraggableList from \"react-draggable-list\";\r\nimport {getKeyHandlerFor} from \"../../../../model/FieldPrettifyHandler\";\r\nimport {computeQuestionLevel, sortQuestionObjects} from \"../../../../model/QuestionsUtils\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {debug, log, warn} from \"../../../../utils/Logging\";\r\nimport './QuestionsReorder.css'\r\n\r\nconst currentScriptName = \"QuestionsReorder.js\";\r\n\r\nclass QuestionItem extends Component {\r\n\r\n  // This is used internally by the library DraggableList\r\n  // noinspection JSUnusedGlobalSymbols\r\n  getDragHeight() {\r\n    return 32 // The height of other items during dragging\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\r\n    return this.props.commonProps.hiddenDetails !== nextProps.commonProps.hiddenDetails ||\r\n      this.props.commonProps.originalQuestions.length !== nextProps.commonProps.originalQuestions.length ||\r\n      this.props.item[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME] !== nextProps.item[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME] ||\r\n      this.props.itemSelected !== nextProps.itemSelected\r\n  }\r\n\r\n  render() {\r\n    const {item, itemSelected, dragHandleProps} = this.props;\r\n    // const {value} = this.state;\r\n    const scale = itemSelected * 0.05 + 1;\r\n    const shadow = itemSelected * 15 + 1;\r\n    const dragged = itemSelected !== 0;\r\n\r\n    return (\r\n      <div className={'item' + dragged ? ' dragged' : ''}\r\n           style={{\r\n             backgroundColor: 'white',\r\n             transform: `scale(${scale})`,\r\n             boxShadow: `rgba(0, 0, 0, 0.3) 0px ${shadow}px ${2 * shadow}px 0px`\r\n           }}>\r\n        <div className=\"dragHandle\" {...dragHandleProps} >\r\n          <Card>\r\n            <CardHeader>\r\n              <b>\r\n                {'Level '}\r\n                {computeQuestionLevel(this.props.commonProps.originalQuestions, item[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME])}\r\n                {' → '}\r\n                {item[QUESTION_TEXT_EN_FIELD_NAME]}\r\n              </b>\r\n            </CardHeader>\r\n            <CardBody hidden={itemSelected > 0.4 || this.props.commonProps.hiddenDetails}>\r\n              <Form className=\"form-horizontal\">\r\n                {\r\n                  [\r\n                    QUESTION_TEXT_IT_FIELD_NAME,\r\n                    QUESTION_TEXT_FR_FIELD_NAME,\r\n                    QUESTION_TEXT_DE_FIELD_NAME,\r\n                  ].map(field => {\r\n                    const keyHandler = getKeyHandlerFor(field, QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION)\r\n                    return (\r\n                      <FormGroup row key={field}>\r\n                        <Col md=\"2\">\r\n                          <Label><i>{keyHandler.keyPrettyNameLong}:</i></Label>\r\n                        </Col>\r\n                        <Col xs=\"12\" md=\"10\">\r\n                          <p className=\"form-control-static\">\r\n                            {\r\n                              item[field] || (\r\n                                <span className={'text-muted'}>\r\n                                  {`${keyHandler.keyPrettyNameLong} ...`}\r\n                                </span>\r\n                              )\r\n                            }\r\n                          </p>\r\n                        </Col>\r\n                      </FormGroup>\r\n                    )\r\n                  })\r\n                }\r\n              </Form>\r\n            </CardBody>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass QuestionsReorder extends Component {\r\n\r\n  allQuestions = \"allQuestions\";\r\n  fieldNames = [this.allQuestions];\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...(createPartialInitialStateFromFields(this.fieldNames)),\r\n      draggableList: [],\r\n      hiddenDetails: true,\r\n      uploadingChanges: false,\r\n      errorMessage: '',\r\n    }\r\n\r\n    this.onListChange.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    load(this, this.allQuestions, getAll,\r\n      {serverEndPoint: SERVER_QUESTION_ENDPOINT},\r\n      questions => this.onListChange(sortQuestionObjects(questions))\r\n    );\r\n  }\r\n\r\n  onListChange(newList) {\r\n    this.setState({draggableList: newList})\r\n  }\r\n\r\n  toggleHiddenDetails() {\r\n    this.setState({hiddenDetails: !this.state.hiddenDetails})\r\n  }\r\n\r\n  setErrorMessage(errorMessage) {\r\n    this.setState({\r\n      uploadingChanges: false,\r\n      errorMessage: errorMessage\r\n    })\r\n    window.scrollTo(0, 0)\r\n  }\r\n\r\n  sendChangesToServer() {\r\n    log(currentScriptName, `Called sendChangesToServer`, this.state.draggableList);\r\n    this.setState({\r\n      uploadingChanges: true,\r\n      errorMessage: ''\r\n    })\r\n\r\n    const originalQuestions = sortQuestionObjects(this.state[`${this.allQuestions}Data`])\r\n    if (originalQuestions === undefined)\r\n      warn(currentScriptName, \"Hardcoded access to generic field is no more updated... change the line above\")\r\n\r\n    // Check for ordering changes\r\n    const orderChanged = originalQuestions.some((question, index) => {\r\n      return (\r\n        question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n        !== this.state.draggableList[index][QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n      )\r\n    })\r\n    debug(currentScriptName, \"Will actually send changes to server? \", orderChanged)\r\n\r\n    if (orderChanged) {\r\n      const serverPromises = this.state.draggableList.map((question, index, allReorderedQuestions) => {\r\n        const formData = new FormData()\r\n        formData.append(QUESTION_TEXT_EN_FIELD_NAME, question[QUESTION_TEXT_EN_FIELD_NAME])\r\n        formData.append(QUESTION_TEXT_IT_FIELD_NAME, question[QUESTION_TEXT_IT_FIELD_NAME])\r\n        formData.append(QUESTION_TEXT_FR_FIELD_NAME, question[QUESTION_TEXT_FR_FIELD_NAME])\r\n        formData.append(QUESTION_TEXT_DE_FIELD_NAME, question[QUESTION_TEXT_DE_FIELD_NAME])\r\n\r\n        formData.append(\r\n          QUESTION_NEXT_FIELD_NAME,\r\n          allReorderedQuestions[index + 1] === undefined\r\n            ? ''\r\n            : allReorderedQuestions[index + 1][QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n        )\r\n        formData.append(\r\n          QUESTION_PREVIOUS_FIELD_NAME,\r\n          allReorderedQuestions[index - 1] === undefined\r\n            ? ''\r\n            : allReorderedQuestions[index - 1][QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n        )\r\n\r\n        const toUpdateID = question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n        return postObject(ACTION_MODIFY, SERVER_QUESTION_ENDPOINT, {\r\n          id: toUpdateID,\r\n          formDataObject: formData\r\n        })\r\n      })\r\n\r\n      Promise.all(serverPromises).then(\r\n        (result) => {\r\n          debug(currentScriptName, `Saved changes to server:`, result);\r\n          this.setState({uploadingChanges: false})\r\n\r\n          // Go to list of objects, when done\r\n          window.history.back()\r\n        },\r\n        (error) => {\r\n          warn(currentScriptName, `Error from server saving changes:`, error.message);\r\n          this.setErrorMessage(error.message)\r\n        }\r\n      )\r\n    } else {\r\n      this.setState({uploadingChanges: false})\r\n\r\n      // Go to list of objects, when done\r\n      window.history.back()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col xl={12}>\r\n            <Card>\r\n              <CardHeader>\r\n                <i className=\"fa fa-align-justify\"/> Questions <span className={\"text-muted\"}>(drag to reorder)</span>\r\n                <div className=\"card-header-actions\">\r\n                  <Button size={'sm'} color={'secondary'} onClick={this.toggleHiddenDetails.bind(this)}>\r\n                    <i className={\"fa fa-list mr-2\"}/>\r\n                    {this.state.hiddenDetails ? \"Show \" : \"Hide \"}\r\n                    Details\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {\r\n                  showLoadingOrRender(this, this.allQuestions,\r\n                    allQuestions => {\r\n                      return (\r\n                        <DraggableList\r\n                          list={this.state.draggableList}\r\n                          itemKey={obj => obj[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]}\r\n                          template={QuestionItem}\r\n                          onMoveEnd={newList => this.onListChange(newList)}\r\n                          container={() => document.body}\r\n                          commonProps={{\r\n                            hiddenDetails: this.state.hiddenDetails,\r\n                            originalQuestions: allQuestions\r\n                          }}\r\n                        />\r\n                      )\r\n                    },\r\n                    createLoading({})\r\n                  )\r\n                }\r\n              </CardBody>\r\n              <CardFooter>\r\n                <div className={'float-right'}>\r\n                  <Button type=\"submit\" color=\"primary\" className={\"mr-2\"}\r\n                          onClick={() => this.sendChangesToServer()}\r\n                          disabled={this.state.uploadingChanges}\r\n                  >\r\n                    {this.state.uploadingChanges\r\n                      ? <img className='spinner' alt=\"spinner\"\r\n                             src={require('../../../../assets/img/spinner.gif')}/>\r\n                      : null}\r\n                    Save changes\r\n                  </Button>\r\n                  <Link to={\"/home/modify/questions\"}>\r\n                    <Button color=\"secondary\" disabled={this.state.uploadingChanges}>Cancel</Button>\r\n                  </Link>\r\n                </div>\r\n              </CardFooter>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default QuestionsReorder;\r\n"],"sourceRoot":""}