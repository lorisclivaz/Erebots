{"version":3,"sources":["model/ModelUtils.js","model/FieldPrettifyHandler.js","model/QuestionFieldNamesDictionaryToDescription.js","model/ExerciseFieldNamesDictionaryToDescription.js","model/QuestionsUtils.js","model/UserGoalFieldNamesDictionaryToDescription.js","model/FieldValuesDictionaryToDescription.js","model/ExerciseSetFieldNamesDictionaryToDescription.js","model/ProfileFieldNamesDictionaryToHandlers.js","model/DatetimeExtractor.js","utils/DateUtils.js","model/ExerciseSetMappingFieldNamesDictionaryToDescription.js","utils/ChartJsUtils.js","utils/StringUtils.js","view/protected/components/charts/MyBaseStaticChart.js","view/protected/components/buttons/MultiSelectionButton.js","utils/TimeDurationUtils.js","view/protected/components/charts/StaticEventChartWithYLevel.js","view/protected/components/charts/CardEventChartWithOptions.js","view/protected/pages/Users/User.js"],"names":["OBJECT_REFERENCE_ID_FIELD_NAME","WEEKDAY_ARTIFICIAL_FIELD_NAME","MONTH_ARTIFICIAL_FIELD_NAME","selectDescription","descriptionObj","short","undefined","shortDescription","longDescription","getKeyHandlerFor","key","specificMapping","PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","SPORT_SESSION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","DONE_EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","USER_GOAL_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION","keyPrettyNameShort","keyPrettyNameLong","valuePrettifier","value","prettifyFieldName","fieldName","fieldNameString","keyHandler","upperFirstChar","QUESTION_ID_FIELD_NAME","QUESTION_TEXT_EN_FIELD_NAME","QUESTION_TEXT_IT_FIELD_NAME","QUESTION_TEXT_FR_FIELD_NAME","QUESTION_TEXT_DE_FIELD_NAME","QUESTION_NEXT_FIELD_NAME","QUESTION_PREVIOUS_FIELD_NAME","JSON","stringify","allQuestionsIDsToDescription","allQuestions","tempMapping","forEach","question","EXERCISE_ID_FIELD_NAME","EXERCISE_TEXT_EN_FIELD_NAME","EXERCISE_TEXT_IT_FIELD_NAME","EXERCISE_TEXT_FR_FIELD_NAME","EXERCISE_TEXT_DE_FIELD_NAME","EXERCISE_LABEL_FIELD_NAME","allExercisesIDsToDescription","allExercises","exercise","getQuestionByID","questionID","find","followNextPointerAndDo","startQuestion","fun","currentQuestion","sortQuestionObjects","firstQuestion","resultQuestions","push","computeQuestionLevel","currentQuestionID","nextCount","_","length","USER_GOAL_ID_FIELD_NAME","USER_GOAL_TEXT_EN_FIELD_NAME","USER_GOAL_TEXT_IT_FIELD_NAME","USER_GOAL_TEXT_FR_FIELD_NAME","USER_GOAL_TEXT_DE_FIELD_NAME","allGoalsIDsToDescription","allGoals","goal","AGE_FIELD_TO_PRETTY_DESCRIPTION","SEX_FIELD_TO_PRETTY_DESCRIPTION","LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION","icon","className","DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION","0","1","2","3","4","SHIFT_FIELD_TO_PRETTY_DESCRIPTION","FUN_FIELD_TO_PRETTY_DESCRIPTION","EXERCISE_SET_ID_FIELD_NAME","EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME","EXERCISE_SET_SUITABLE_FOR_GOAL_IDS_FIELD_NAME","allExerciseSetsIDsToDescription","allExerciseSets","exerciseIDsToDescription","joiningString","exerciseSet","map","oid","join","USER_ID_FIELD_NAME","USER_FIRST_NAME_FIELD_NAME","USER_LANGUAGE_FIELD_NAME","USER_AGE_FIELD_NAME","USER_SEX_FIELD_NAME","USER_LAST_INTERACTION_FIELD_NAME","USER_FAVOURITE_SPORT_DAYS_FIELD_NAME","USER_GOAL_IDS_FIELD_NAME","USER_CURRENT_QUESTION_ID_FIELD_NAME","USER_CURRENT_QUESTION_ANSWER_FIELD_NAME","USER_SPORT_SESSIONS_ARRAY_FIELD_NAME","SPORT_SESSION_STARTED_AT_FIELD_NAME","SPORT_SESSION_ENDED_AT_FIELD_NAME","SPORT_SESSION_ABORTED_FIELD_NAME","SPORT_SESSION_FUN_RATING_FIELD_NAME","SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME","DONE_EXERCISE_EXERCISE_ID_FIELD_NAME","PROFILE_AVAILABLE_AGGREGATION_FIELDS","_parseOrSame","iconify","rawValuesToDescriptionMap","_prettifyDateOrReturnValue","sportDaysArray","Array","isArray","goalIDsArray","checkDatetimeValue","dateToPrettyString","extractDateObject","parse","replaceAll","e","DATE_OBJECT_FIELD_NAME","datetimeFieldValue","Date","convertToUTCMillis","date","getTimezoneOffset","getTime","convertToLocalMillis","ONE_DAY_IN_MILLIS","ONE_WEEK_IN_MILLIS","ONE_MONTH_IN_MILLIS","ONE_YEAR_IN_MILLIS","dateObj","time","toLocaleString","timeZone","toLocaleTimeString","toLocaleDateString","EXERCISE_SET_MAPPING_ID_FIELD_NAME","EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME","EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME","EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME","EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME","description","writeInChart","self","total","getStringToWrite","chartInstance","chart","ctx","font","defaults","global","defaultFontSize","defaultFontStyle","defaultFontFamily","fillStyle","config","options","defaultFontColor","textAlign","textBaseline","data","datasets","dataset","i","controller","getDatasetMeta","bar","index","label","fillText","_model","x","y","writePercentagesInChart","partial","percentage","Math","round","writeValuesInChart","datasetsBorderColors","datasetsBackgroundColors","commonMultipleDimensionChartDataViewSettings","borderWidth","commonSingleDimensionChartDataViewSettings","backgroundColor","borderColor","hoverBackgroundColor","hoverBorderColor","commonChartOptions","tooltips","enabled","custom","CustomTooltips","maintainAspectRatio","legend","position","hover","animationDuration","string","toUpperCase","slice","FIELD_CHART_DATA","FIELD_CHART_OPTIONS","MyBaseStaticChart","props","chartDataField","loadData","bind","state","createPartialInitialStateFromFields","prevProps","prevState","snapshot","apiFunctionParams","this","debug","setState","load","apiFunction","showLoadingOrRender","Object","keys","chartDataAndOptionsObj","dataManipulationLogic","chartData","chartOptions","ChartType","chartType","Bar","noDataAvailableComponent","loading","createLoading","pt","Component","createMultiSelectionButton","currentSelected","changeSelectionFunction","dropDownThreshold","preprocessingBeforeShowing","optionText","id","selectorOpen","isOpen","toggle","newState","caret","option","onClick","color","active","millisToDurationString","millis","delimiter","showWith0","seconds","floor","minute","hour","day","dayString","hourString","minuteString","secondsString","StaticEventChartWithYLevel","xyData","timestamp_level_pair","sort","xy1","xy2","dataLegend","labels","xy","callbacks","title","tooltipItem","_data","xLabel","yLabel","toFixed","scales","yAxes","scaleLabel","display","labelString","yLabelString","ticks","stepSize","xAxes","autoSkip","callback","_index","_values","toReturn","CardEventChartWithOptions","chartTypes","timeWindows","toggleFullScreen","isFullScreen","Bubble","Scatter","Line","startTime","now","selectedTimeWindow","defaultTimeWindow","selectedChartType","defaultChartType","newTimeWindow","newChartType","Card","CardHeader","ButtonToolbar","aria-label","ButtonGroup","changeLastTimeWindow","changeChartType","CardBody","apiParams","TIME_WINDOW_START","computeSportSessionStatus","sportSession","User","userDataField","allUserGoals","allEvaluationQuestions","fieldNames","toBeShownValues","getCurrentID","getSingle","serverEndPoint","SERVER_USER_ENDPOINT","getAll","SERVER_USER_GOAL_ENDPOINT","SERVER_QUESTION_ENDPOINT","SERVER_EXERCISE_ENDPOINT","match","params","userDataObj","entries","Row","Col","lg","userDetails","unpackUserDetails","Table","responsive","striped","includes","keyDataHandler","defaultRow","goals","goalsPrettyMapping","questions","questionPrettyMapping","currentUser","statusFieldName","durationFieldName","exercisesPrettyMapping","shownFields","computeSportSessionDuration","dataColumns","field","name","sortable","grow","columnName","wrap","selector","sportSessionDuration","exercises","doneExercise","format","sportSessionStatus","Badge","status","sportSessionArray","noHeader","columns","keyField","defaultSortField","defaultSortAsc","highlightOnHover","noDataComponent","pagination","paginationPerPage","paginationRowsPerPageOptions","getUserLevelHistory","singleDimensionDataLegend"],"mappings":"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","file":"static/js/15.01c8ee9d.chunk.js","sourcesContent":["// const currentScriptName = \"ModelUtils.js\";\r\n\r\nconst OBJECT_REFERENCE_ID_FIELD_NAME = '$oid'\r\n\r\nconst HOUR_ARTIFICIAL_FIELD_NAME = 'hour'\r\nconst WEEKDAY_ARTIFICIAL_FIELD_NAME = 'weekday'\r\nconst MONTH_ARTIFICIAL_FIELD_NAME = 'month'\r\nconst YEAR_ARTIFICIAL_FIELD_NAME = 'year'\r\n\r\n/** An internal function to get correct description from mapping objects, or undefined if description obj undefined */\r\nexport function selectDescription(descriptionObj, short = true) {\r\n  if (descriptionObj !== undefined)\r\n    return short ? descriptionObj.shortDescription : descriptionObj.longDescription\r\n  else return undefined\r\n}\r\n\r\nexport {\r\n  OBJECT_REFERENCE_ID_FIELD_NAME,\r\n  YEAR_ARTIFICIAL_FIELD_NAME,\r\n  MONTH_ARTIFICIAL_FIELD_NAME,\r\n  WEEKDAY_ARTIFICIAL_FIELD_NAME,\r\n  HOUR_ARTIFICIAL_FIELD_NAME,\r\n};\r\n","import {\r\n  DONE_EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  SPORT_SESSION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION\r\n} from \"./ProfileFieldNamesDictionaryToHandlers\";\r\nimport {upperFirstChar} from \"../utils/StringUtils\";\r\nimport {EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION} from \"./ExerciseFieldNamesDictionaryToDescription\";\r\nimport {EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION} from \"./ExerciseSetFieldNamesDictionaryToDescription\";\r\nimport {USER_GOAL_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION} from \"./UserGoalFieldNamesDictionaryToDescription\";\r\nimport {EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION} from \"./ExerciseSetMappingFieldNamesDictionaryToDescription\";\r\nimport {QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION} from \"./QuestionFieldNamesDictionaryToDescription\";\r\n\r\n/**\r\n * Returns the correct data handler, given its key\r\n *\r\n * If provided, the second parameter will preempt the default order of handler selection\r\n * (in case of duplicate keys in different data structures)\r\n *\r\n * The handler is an object:\r\n * ```javascript\r\n * {\r\n *   keyPrettyNameShort: \"...\",\r\n *   keyPrettyNameLong: \"...\",\r\n *   rawValuesToDescriptionMap: {...} | undefined,\r\n *   valuePrettifier: (value) => ...\r\n * }\r\n * ```\r\n *\r\n * It contains the logic o prettify both the key and the value through the prettifying function\r\n */\r\nfunction getKeyHandlerFor(key, specificMapping = null) {\r\n  if (specificMapping && specificMapping[key] !== undefined) {\r\n    return specificMapping[key];\r\n  } else if (PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key] !== undefined) {\r\n    return PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key];\r\n  } else if (SPORT_SESSION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key] !== undefined) {\r\n    return SPORT_SESSION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key];\r\n  } else if (DONE_EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key] !== undefined) {\r\n    return DONE_EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key];\r\n  } else if (EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key] !== undefined) {\r\n    return EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key];\r\n  } else if (EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key] !== undefined) {\r\n    return EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key];\r\n  } else if (USER_GOAL_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key] !== undefined) {\r\n    return USER_GOAL_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key];\r\n  } else if (EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key] !== undefined) {\r\n    return EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key];\r\n  } else if (QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key] !== undefined) {\r\n    return QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION[key];\r\n  } else {\r\n    // debug(currentScriptName, `'${key}' is not a valid field key. Defaulting to identity handler.`);\r\n    return {keyPrettyNameShort: key, keyPrettyNameLong: key, valuePrettifier: (value) => value} // return the identity handler\r\n  }\r\n}\r\n\r\n/** An helper function to prettify a field name, managing even those fields not present in database, making their first letter uppercase */\r\nfunction prettifyFieldName(fieldName, short = false, specificMapping = null) {\r\n  const keyHandler = getKeyHandlerFor(fieldName, specificMapping);\r\n\r\n  let fieldNameString;\r\n  if (short)\r\n    fieldNameString = keyHandler.keyPrettyNameShort;\r\n  else\r\n    fieldNameString = keyHandler.keyPrettyNameLong;\r\n\r\n  return upperFirstChar(fieldNameString);\r\n}\r\n\r\nexport {\r\n  getKeyHandlerFor,\r\n  prettifyFieldName\r\n};\r\n","import {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n// const currentScriptName = \"QuestionFieldNamesDictionaryToDescription.js\";\r\n\r\nconst QUESTION_ID_FIELD_NAME = '_id'\r\nconst QUESTION_TEXT_EN_FIELD_NAME = 'text_en'\r\nconst QUESTION_TEXT_IT_FIELD_NAME = 'text_it'\r\nconst QUESTION_TEXT_FR_FIELD_NAME = 'text_fr'\r\nconst QUESTION_TEXT_DE_FIELD_NAME = 'text_de'\r\nconst QUESTION_NEXT_FIELD_NAME = 'next'\r\nconst QUESTION_PREVIOUS_FIELD_NAME = 'previous'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [QUESTION_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"Question ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [QUESTION_TEXT_EN_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"English\",\r\n    keyPrettyNameLong: \"English Text\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [QUESTION_TEXT_IT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Italian\",\r\n    keyPrettyNameLong: \"Italian Text\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [QUESTION_TEXT_FR_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"French\",\r\n    keyPrettyNameLong: \"French Text\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [QUESTION_TEXT_DE_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"German\",\r\n    keyPrettyNameLong: \"German Text\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [QUESTION_NEXT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Next\",\r\n    keyPrettyNameLong: \"Next Question\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n  [QUESTION_PREVIOUS_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Previous\",\r\n    keyPrettyNameLong: \"Previous Question\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n};\r\n\r\n\r\n/** Utility function to get a mapping from ID to the pretty version of the object */\r\nfunction allQuestionsIDsToDescription(allQuestions) {\r\n  const tempMapping = {}\r\n  allQuestions.forEach(question => {\r\n    tempMapping[question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]] = question[QUESTION_TEXT_EN_FIELD_NAME]\r\n  })\r\n  return tempMapping\r\n}\r\n\r\nexport {\r\n  QUESTION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  QUESTION_ID_FIELD_NAME,\r\n  QUESTION_TEXT_EN_FIELD_NAME,\r\n  QUESTION_TEXT_IT_FIELD_NAME,\r\n  QUESTION_TEXT_FR_FIELD_NAME,\r\n  QUESTION_TEXT_DE_FIELD_NAME,\r\n  QUESTION_NEXT_FIELD_NAME,\r\n  QUESTION_PREVIOUS_FIELD_NAME,\r\n  allQuestionsIDsToDescription\r\n}\r\n","import {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n// const currentScriptName = \"ExerciseFieldNamesDictionaryToDescription.js\";\r\n\r\nconst EXERCISE_ID_FIELD_NAME = '_id'\r\nconst EXERCISE_TEXT_EN_FIELD_NAME = 'text_en'\r\nconst EXERCISE_TEXT_IT_FIELD_NAME = 'text_it'\r\nconst EXERCISE_TEXT_FR_FIELD_NAME = 'text_fr'\r\nconst EXERCISE_TEXT_DE_FIELD_NAME = 'text_de'\r\nconst EXERCISE_LABEL_FIELD_NAME = 'label'\r\nconst EXERCISE_GIF_PATH_FIELD_NAME = 'gif_path'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [EXERCISE_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"Exercise ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [EXERCISE_TEXT_EN_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"English\",\r\n    keyPrettyNameLong: \"English Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_TEXT_IT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Italian\",\r\n    keyPrettyNameLong: \"Italian Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_TEXT_FR_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"French\",\r\n    keyPrettyNameLong: \"French Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_TEXT_DE_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"German\",\r\n    keyPrettyNameLong: \"German Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_LABEL_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Label\",\r\n    keyPrettyNameLong: \"Mnemonic Label\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [EXERCISE_GIF_PATH_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"GIF\",\r\n    keyPrettyNameLong: \"GIF Image\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n};\r\n\r\n/** Utility function to get a mapping from ID to the pretty version of the object */\r\nfunction allExercisesIDsToDescription(allExercises) {\r\n  const tempMapping = {}\r\n  allExercises.forEach(exercise => {\r\n    tempMapping[exercise[EXERCISE_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]] =\r\n      exercise[EXERCISE_LABEL_FIELD_NAME] || exercise[EXERCISE_TEXT_EN_FIELD_NAME]\r\n  })\r\n  return tempMapping\r\n}\r\n\r\n\r\nexport {\r\n  EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  EXERCISE_ID_FIELD_NAME,\r\n  EXERCISE_TEXT_EN_FIELD_NAME,\r\n  EXERCISE_TEXT_IT_FIELD_NAME,\r\n  EXERCISE_TEXT_FR_FIELD_NAME,\r\n  EXERCISE_TEXT_DE_FIELD_NAME,\r\n  EXERCISE_LABEL_FIELD_NAME,\r\n  EXERCISE_GIF_PATH_FIELD_NAME,\r\n  allExercisesIDsToDescription\r\n}\r\n","import {\r\n  QUESTION_ID_FIELD_NAME,\r\n  QUESTION_NEXT_FIELD_NAME,\r\n  QUESTION_PREVIOUS_FIELD_NAME\r\n} from \"./QuestionFieldNamesDictionaryToDescription\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n/**\r\n * Utility function to retrieve a question object among all by ID\r\n * @param allQuestions\r\n * @param questionID\r\n * @return {*}\r\n */\r\nfunction getQuestionByID(allQuestions, questionID) {\r\n  return allQuestions.find(question => {\r\n    return question[QUESTION_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME] === questionID\r\n  })\r\n}\r\n\r\n/**\r\n * Utility function to follow the startQuestion next pointer and do some action on each next question\r\n * @param allQuestions\r\n * @param startQuestion\r\n * @param fun\r\n */\r\nfunction followNextPointerAndDo(allQuestions, startQuestion, fun) {\r\n  let currentQuestion = startQuestion\r\n  while (currentQuestion[QUESTION_NEXT_FIELD_NAME] !== undefined) {\r\n    const nextQuestionID = currentQuestion[QUESTION_NEXT_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]\r\n    currentQuestion = getQuestionByID(allQuestions, nextQuestionID)\r\n    fun(currentQuestion)\r\n  }\r\n}\r\n\r\n/**\r\n * Returns allQuestions sorted using their next/previous fields\r\n * @param allQuestions\r\n * @return {[]}\r\n */\r\nfunction sortQuestionObjects(allQuestions) {\r\n  const firstQuestion = allQuestions.find(question => {\r\n    return question[QUESTION_PREVIOUS_FIELD_NAME] === undefined\r\n  })\r\n\r\n  const resultQuestions = []\r\n  resultQuestions.push(firstQuestion)\r\n\r\n  followNextPointerAndDo(allQuestions, firstQuestion, question => resultQuestions.push(question))\r\n\r\n  return resultQuestions\r\n}\r\n\r\n/**\r\n * Utility function to compute the level number of a question.\r\n * @param allQuestions\r\n * @param currentQuestionID\r\n * @return {number} The currentQuestionID level\r\n */\r\nfunction computeQuestionLevel(allQuestions, currentQuestionID) {\r\n  let nextCount = 0\r\n\r\n  followNextPointerAndDo(allQuestions, getQuestionByID(allQuestions, currentQuestionID), _ => nextCount++)\r\n\r\n  return allQuestions.length - nextCount\r\n}\r\n\r\nexport {sortQuestionObjects, computeQuestionLevel}\r\n","import {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n// const currentScriptName = \"UserGoalFieldNamesDictionaryToDescription.js\";\r\n\r\nconst USER_GOAL_ID_FIELD_NAME = '_id'\r\nconst USER_GOAL_TEXT_EN_FIELD_NAME = 'text_en'\r\nconst USER_GOAL_TEXT_IT_FIELD_NAME = 'text_it'\r\nconst USER_GOAL_TEXT_FR_FIELD_NAME = 'text_fr'\r\nconst USER_GOAL_TEXT_DE_FIELD_NAME = 'text_de'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst USER_GOAL_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [USER_GOAL_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"User Goal ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [USER_GOAL_TEXT_EN_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"English\",\r\n    keyPrettyNameLong: \"English Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [USER_GOAL_TEXT_IT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Italian\",\r\n    keyPrettyNameLong: \"Italian Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [USER_GOAL_TEXT_FR_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"French\",\r\n    keyPrettyNameLong: \"French Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [USER_GOAL_TEXT_DE_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"German\",\r\n    keyPrettyNameLong: \"German Description\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n};\r\n\r\n/** Utility function to get a mapping from ID to the pretty version of the object */\r\nfunction allGoalsIDsToDescription(allGoals) {\r\n  const tempMapping = {}\r\n  allGoals.forEach(goal => {\r\n    tempMapping[goal[USER_GOAL_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]] = goal[USER_GOAL_TEXT_EN_FIELD_NAME]\r\n  })\r\n  return tempMapping\r\n}\r\n\r\nexport {\r\n  USER_GOAL_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  USER_GOAL_ID_FIELD_NAME,\r\n  USER_GOAL_TEXT_EN_FIELD_NAME,\r\n  USER_GOAL_TEXT_IT_FIELD_NAME,\r\n  USER_GOAL_TEXT_FR_FIELD_NAME,\r\n  USER_GOAL_TEXT_DE_FIELD_NAME,\r\n  allGoalsIDsToDescription\r\n}\r\n","import React from \"react\";\r\n\r\nconst AGE_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'AGE_18_24': {\r\n    longDescription: \"Age between 18 and 24 years\",\r\n    shortDescription: \"Between 18 and 24\",\r\n  },\r\n  'AGE_25_34': {\r\n    longDescription: \"Age between 25 and 34 years\",\r\n    shortDescription: \"Between 25 and 34\",\r\n  },\r\n  'AGE_35_44': {\r\n    longDescription: \"Age between 35 and 44 years\",\r\n    shortDescription: \"Between 35 and 44\",\r\n  },\r\n  'AGE_45_54': {\r\n    longDescription: \"Age between 45 and 54 years\",\r\n    shortDescription: \"Between 45 and 54\",\r\n  },\r\n  'AGE_55_64': {\r\n    longDescription: \"Age between 55 and 64 years\",\r\n    shortDescription: \"Between 55 and 64\",\r\n  },\r\n  'AGE_65_+': {\r\n    longDescription: \"Age above 65 years\",\r\n    shortDescription: \"Above 65 years\",\r\n  },\r\n};\r\n\r\nconst SEX_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'SEX_M': {\r\n    longDescription: \"Male\",\r\n    shortDescription: \"Male\",\r\n  },\r\n  'SEX_W': {\r\n    longDescription: \"Female\",\r\n    shortDescription: \"Female\",\r\n  },\r\n};\r\n\r\nconst LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'LANGUAGE_ENGLISH': {\r\n    longDescription: \"English\",\r\n    shortDescription: \"English\",\r\n    icon: <i className={`flag-icon flag-icon-us`}/>\r\n  },\r\n  'LANGUAGE_ITALIAN': {\r\n    longDescription: \"Italian\",\r\n    shortDescription: \"Italian\",\r\n    icon: <i className={`flag-icon flag-icon-it`}/>\r\n  },\r\n  'LANGUAGE_FRENCH': {\r\n    longDescription: \"French\",\r\n    shortDescription: \"French\",\r\n    icon: <i className={`flag-icon flag-icon-fr`}/>\r\n  },\r\n  'LANGUAGE_GERMAN': {\r\n    longDescription: \"German\",\r\n    shortDescription: \"German\",\r\n    icon: <i className={`flag-icon flag-icon-de`}/>\r\n  },\r\n}\r\n\r\nconst DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  0: {\r\n    longDescription: \"Impossible\",\r\n    shortDescription: \"Impossible\",\r\n  },\r\n  1: {\r\n    longDescription: \"Very difficult\",\r\n    shortDescription: \"Very difficult\",\r\n  },\r\n  2: {\r\n    longDescription: \"Difficult\",\r\n    shortDescription: \"Difficult\",\r\n  },\r\n  3: {\r\n    longDescription: \"Slightly difficult\",\r\n    shortDescription: \"Slightly difficult\",\r\n  },\r\n  4: {\r\n    longDescription: \"Easy\",\r\n    shortDescription: \"Easy\",\r\n  },\r\n};\r\n\r\nconst SHIFT_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'PREVIOUS': {\r\n    longDescription: \"Previous\",\r\n    shortDescription: \"Previous\",\r\n  },\r\n  'NEXT': {\r\n    longDescription: \"Next\",\r\n    shortDescription: \"Next\",\r\n  },\r\n};\r\n\r\nconst FUN_FIELD_TO_PRETTY_DESCRIPTION = {\r\n  'FUNNY': {\r\n    longDescription: \"Was funny\",\r\n    shortDescription: \"Funny\",\r\n  },\r\n  'INDIFFERENT': {\r\n    longDescription: \"Was indifferent\",\r\n    shortDescription: \"Indifferent\",\r\n  },\r\n  'NOT_FUNNY': {\r\n    longDescription: \"Was not funny\",\r\n    shortDescription: \"Not funny\",\r\n  },\r\n}\r\n\r\nexport {\r\n  AGE_FIELD_TO_PRETTY_DESCRIPTION,\r\n  SEX_FIELD_TO_PRETTY_DESCRIPTION,\r\n  LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION,\r\n  SHIFT_FIELD_TO_PRETTY_DESCRIPTION,\r\n  DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n  FUN_FIELD_TO_PRETTY_DESCRIPTION,\r\n};\r\n","import {OBJECT_REFERENCE_ID_FIELD_NAME} from \"./ModelUtils\";\r\n\r\n// const currentScriptName = \"ExerciseSetFieldNamesDictionaryToDescription.js\";\r\n\r\nconst EXERCISE_SET_ID_FIELD_NAME = '_id'\r\nconst EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME = 'exercise_list'\r\nconst EXERCISE_SET_SUITABLE_FOR_GOAL_IDS_FIELD_NAME = 'suitable_for_goals'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [EXERCISE_SET_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"Exercise Set ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Exercise List\",\r\n    keyPrettyNameLong: \"Exercise List\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n  [EXERCISE_SET_SUITABLE_FOR_GOAL_IDS_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"For Goals\",\r\n    keyPrettyNameLong: \"Suitable For Goals\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n};\r\n\r\n/** Utility function to get a mapping from ID to the pretty version of the object */\r\nfunction allExerciseSetsIDsToDescription(allExerciseSets, exerciseIDsToDescription, joiningString = ', ') {\r\n  const tempMapping = {}\r\n  allExerciseSets.forEach(exerciseSet => {\r\n    tempMapping[exerciseSet[EXERCISE_SET_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]] = (\r\n      exerciseSet[EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME].map(oid =>\r\n        exerciseIDsToDescription[oid[OBJECT_REFERENCE_ID_FIELD_NAME]]\r\n      ).join(joiningString)\r\n    )\r\n  })\r\n  return tempMapping\r\n}\r\n\r\nexport {\r\n  EXERCISE_SET_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  EXERCISE_SET_ID_FIELD_NAME,\r\n  EXERCISE_SET_EXERCISE_ID_LIST_FIELD_NAME,\r\n  EXERCISE_SET_SUITABLE_FOR_GOAL_IDS_FIELD_NAME,\r\n  allExerciseSetsIDsToDescription\r\n}\r\n","import React from \"react\";\r\nimport {\r\n  AGE_FIELD_TO_PRETTY_DESCRIPTION,\r\n  DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n  FUN_FIELD_TO_PRETTY_DESCRIPTION,\r\n  LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION,\r\n  SEX_FIELD_TO_PRETTY_DESCRIPTION\r\n} from \"./FieldValuesDictionaryToDescription\";\r\nimport {checkDatetimeValue, extractDateObject} from \"./DatetimeExtractor\";\r\nimport {dateToPrettyString} from \"../utils/DateUtils\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME, selectDescription} from \"./ModelUtils\";\r\n\r\n// const currentScriptName = \"ProfileFieldNamesDictionaryToHandlers.js\";\r\n\r\nconst USER_ID_FIELD_NAME = '_id'\r\nconst USER_FIRST_NAME_FIELD_NAME = 'first_name'\r\nconst USER_LAST_NAME_FIELD_NAME = 'last_name'\r\nconst USER_LANGUAGE_FIELD_NAME = 'language'\r\nconst USER_AGE_FIELD_NAME = 'age'\r\nconst USER_SEX_FIELD_NAME = 'sex'\r\nconst USER_LAST_INTERACTION_FIELD_NAME = 'last_interaction'\r\nconst USER_FAVOURITE_SPORT_DAYS_FIELD_NAME = 'favourite_sport_days'\r\nconst USER_GOAL_IDS_FIELD_NAME = 'goals'\r\nconst USER_REGISTRATION_COMPLETED_FIELD_NAME = 'registration_completed'\r\nconst USER_TELEGRAM_ID_FIELD_NAME = 'telegram_id'\r\nconst USER_CURRENT_QUESTION_ID_FIELD_NAME = 'current_question'\r\nconst USER_CURRENT_QUESTION_ANSWER_FIELD_NAME = 'current_question_answer'\r\nconst USER_SPORT_SESSIONS_ARRAY_FIELD_NAME = 'sport_sessions'\r\n\r\nconst SPORT_SESSION_EXERCISE_SET_ID_FIELD_NAME = 'exercise_set'\r\nconst SPORT_SESSION_STARTED_AT_FIELD_NAME = 'started_at'\r\nconst SPORT_SESSION_ENDED_AT_FIELD_NAME = 'ended_at'\r\nconst SPORT_SESSION_ABORTED_FIELD_NAME = 'aborted'\r\nconst SPORT_SESSION_FUN_RATING_FIELD_NAME = 'fun_rating'\r\nconst SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME = 'done_exercises_ordered'\r\n\r\nconst DONE_EXERCISE_EXERCISE_ID_FIELD_NAME = 'exercise'\r\nconst DONE_EXERCISE_ENDED_AT_FIELD_NAME = 'ended_at'\r\nconst DONE_EXERCISE_DIFFICULTY_RATING_FIELD_NAME = 'difficulty_rating'\r\n\r\nconst PROFILE_AVAILABLE_AGGREGATION_FIELDS = [\r\n  USER_LANGUAGE_FIELD_NAME, USER_AGE_FIELD_NAME, USER_SEX_FIELD_NAME, USER_CURRENT_QUESTION_ID_FIELD_NAME,\r\n  USER_CURRENT_QUESTION_ANSWER_FIELD_NAME\r\n];\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [USER_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"User ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => {\r\n      value = _parseOrSame(value)\r\n      return value[OBJECT_REFERENCE_ID_FIELD_NAME]\r\n    },\r\n  },\r\n  [USER_FIRST_NAME_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Name\",\r\n    keyPrettyNameLong: \"First Name\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [USER_LAST_NAME_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Surname\",\r\n    keyPrettyNameLong: \"Last Name\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [USER_LANGUAGE_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Language\",\r\n    keyPrettyNameLong: \"Language\",\r\n    valuePrettifier: (value, shortDescription = false, iconify = true) => {\r\n      if (value === undefined) return undefined;\r\n      else if (iconify) return LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION[value].icon;\r\n      else return selectDescription(LANGUAGE_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription)\r\n    },\r\n  },\r\n  [USER_AGE_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Age\",\r\n    keyPrettyNameLong: \"Age\",\r\n    rawValuesToDescriptionMap: AGE_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false) =>\r\n      selectDescription(AGE_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription),\r\n  },\r\n  [USER_SEX_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Sex\",\r\n    keyPrettyNameLong: \"Sex\",\r\n    rawValuesToDescriptionMap: SEX_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false, iconify = true) => {\r\n      if (value === undefined) return undefined;\r\n      else if (iconify) return <i className={`fa fa-${value === 'SEX_M' ? 'mars' : 'venus'}`}/>;\r\n      else return selectDescription(SEX_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription)\r\n    },\r\n  },\r\n  [USER_LAST_INTERACTION_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Last interaction\",\r\n    keyPrettyNameLong: \"Last user interaction\",\r\n    valuePrettifier: (value, _shortDescription = false) => _prettifyDateOrReturnValue(value),\r\n  },\r\n  [USER_FAVOURITE_SPORT_DAYS_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Sport Days\",\r\n    keyPrettyNameLong: \"Favourite Sport Days\",\r\n    valuePrettifier: (value, _shortDescription = false) => {\r\n      const sportDaysArray = _parseOrSame(value)\r\n      return sportDaysArray === undefined || sportDaysArray.length === 0 || !Array.isArray(sportDaysArray)\r\n        ? \"No days\"\r\n        : sportDaysArray.join(', ')\r\n    }\r\n  },\r\n  [USER_GOAL_IDS_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Goals\",\r\n    keyPrettyNameLong: \"Goals\",\r\n    valuePrettifier: (value, _shortDescription = false) => {\r\n      const goalIDsArray = _parseOrSame(value)\r\n      return goalIDsArray === undefined || !Array.isArray(goalIDsArray)\r\n        ? \"No goals\"\r\n        : `${goalIDsArray.length} goals`\r\n    }\r\n\r\n  },\r\n  [USER_REGISTRATION_COMPLETED_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Registration completed\",\r\n    keyPrettyNameLong: \"Registration completed\",\r\n    valuePrettifier: (value, _shortDescription = false) => value !== undefined ? value : false,\r\n  },\r\n  [USER_TELEGRAM_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Telegram ID\",\r\n    keyPrettyNameLong: \"Telegram ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [USER_CURRENT_QUESTION_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Question\",\r\n    keyPrettyNameLong: \"Current Question\",\r\n    valuePrettifier: (value, _shortDescription = false) => {\r\n      value = _parseOrSame(value)\r\n      return value[OBJECT_REFERENCE_ID_FIELD_NAME]\r\n    },\r\n  },\r\n  [USER_CURRENT_QUESTION_ANSWER_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Answer\",\r\n    keyPrettyNameLong: \"Current Question Answer\",\r\n    rawValuesToDescriptionMap: DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false) =>\r\n      selectDescription(DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription),\r\n  },\r\n  [USER_SPORT_SESSIONS_ARRAY_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Sessions\",\r\n    keyPrettyNameLong: \"Sport Sessions\",\r\n    valuePrettifier: (value, shortDescription = false) => {\r\n      value = _parseOrSame(value)\r\n      return value === undefined || !Array.isArray(value)\r\n        ? shortDescription\r\n          ? \"No sessions\"\r\n          : \"No sport sessions\"\r\n        : shortDescription\r\n          ? `${value.length} sessions`\r\n          : `${value.length} sport sessions`\r\n    }\r\n  }\r\n};\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst SPORT_SESSION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [SPORT_SESSION_EXERCISE_SET_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Set\",\r\n    keyPrettyNameLong: \"Exercise Set\",\r\n    valuePrettifier: (value, _shortDescription = false) => {\r\n      value = _parseOrSame(value)\r\n      return value[OBJECT_REFERENCE_ID_FIELD_NAME]\r\n    },\r\n  },\r\n  [SPORT_SESSION_STARTED_AT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Started\",\r\n    keyPrettyNameLong: \"Started At\",\r\n    valuePrettifier: (value, _shortDescription = false) => _prettifyDateOrReturnValue(value),\r\n  },\r\n  [SPORT_SESSION_ENDED_AT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Ended\",\r\n    keyPrettyNameLong: \"Ended At\",\r\n    valuePrettifier: (value, _shortDescription = false) => _prettifyDateOrReturnValue(value),\r\n  },\r\n  [SPORT_SESSION_ABORTED_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Aborted\",\r\n    keyPrettyNameLong: \"Session was aborted\",\r\n    valuePrettifier: (value, _shortDescription = false) => value,\r\n  },\r\n  [SPORT_SESSION_FUN_RATING_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Fun\",\r\n    keyPrettyNameLong: \"Fun Rating\",\r\n    rawValuesToDescriptionMap: FUN_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false) =>\r\n      selectDescription(FUN_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription),\r\n  },\r\n  [SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Exercises\",\r\n    keyPrettyNameLong: \"Done exercises\",\r\n    valuePrettifier: (value, shortDescription = false) => {\r\n      value = _parseOrSame(value)\r\n      return value === undefined\r\n        ? shortDescription\r\n          ? \"No exercises\"\r\n          : \"No exercises done\"\r\n        : shortDescription\r\n          ? `${value.length} done`\r\n          : `${value.length} exercises done`\r\n    }\r\n  }\r\n}\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst DONE_EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [DONE_EXERCISE_EXERCISE_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Exercise\",\r\n    keyPrettyNameLong: \"Exercise\",\r\n    valuePrettifier: (value, _shortDescription = false) => {\r\n      value = _parseOrSame(value)\r\n      return value[OBJECT_REFERENCE_ID_FIELD_NAME]\r\n    },\r\n  },\r\n  [DONE_EXERCISE_ENDED_AT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Ended\",\r\n    keyPrettyNameLong: \"Ended At\",\r\n    valuePrettifier: (value, _shortDescription = false) => _prettifyDateOrReturnValue(value),\r\n  },\r\n  [DONE_EXERCISE_DIFFICULTY_RATING_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Difficulty\",\r\n    keyPrettyNameLong: \"Difficulty Rating\",\r\n    rawValuesToDescriptionMap: DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false) =>\r\n      selectDescription(DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription),\r\n  },\r\n}\r\n\r\n/** An internal function to prettify the datetime field, or return the given value if not a date field */\r\nfunction _prettifyDateOrReturnValue(value) {\r\n  if (checkDatetimeValue(value))\r\n    return dateToPrettyString(extractDateObject(value));\r\n  else\r\n    return value\r\n}\r\n\r\n/** An internal function to transform a string to an object */\r\nfunction _parseOrSame(value) {\r\n  if (typeof value === \"string\") {\r\n    try {\r\n      return JSON.parse(value.replaceAll('\\'', '\"'))\r\n    } catch (e) {\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\nexport {\r\n  PROFILE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  PROFILE_AVAILABLE_AGGREGATION_FIELDS,\r\n  USER_ID_FIELD_NAME,\r\n  USER_FIRST_NAME_FIELD_NAME,\r\n  USER_LAST_NAME_FIELD_NAME,\r\n  USER_LANGUAGE_FIELD_NAME,\r\n  USER_AGE_FIELD_NAME,\r\n  USER_SEX_FIELD_NAME,\r\n  USER_LAST_INTERACTION_FIELD_NAME,\r\n  USER_FAVOURITE_SPORT_DAYS_FIELD_NAME,\r\n  USER_GOAL_IDS_FIELD_NAME,\r\n  USER_REGISTRATION_COMPLETED_FIELD_NAME,\r\n  USER_TELEGRAM_ID_FIELD_NAME,\r\n  USER_CURRENT_QUESTION_ID_FIELD_NAME,\r\n  USER_CURRENT_QUESTION_ANSWER_FIELD_NAME,\r\n  USER_SPORT_SESSIONS_ARRAY_FIELD_NAME,\r\n  SPORT_SESSION_EXERCISE_SET_ID_FIELD_NAME,\r\n  SPORT_SESSION_STARTED_AT_FIELD_NAME,\r\n  SPORT_SESSION_ENDED_AT_FIELD_NAME,\r\n  SPORT_SESSION_ABORTED_FIELD_NAME,\r\n  SPORT_SESSION_FUN_RATING_FIELD_NAME,\r\n  SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME,\r\n  DONE_EXERCISE_EXERCISE_ID_FIELD_NAME,\r\n  DONE_EXERCISE_ENDED_AT_FIELD_NAME,\r\n  DONE_EXERCISE_DIFFICULTY_RATING_FIELD_NAME,\r\n  SPORT_SESSION_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  DONE_EXERCISE_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n}\r\n","const DATE_OBJECT_FIELD_NAME = \"$date\";\r\n\r\n/** A function to check whether the provided value is a datetime object received from python server backend */\r\nfunction checkDatetimeValue(datetimeFieldValue) {\r\n  return (typeof datetimeFieldValue == 'object' && typeof datetimeFieldValue[DATE_OBJECT_FIELD_NAME] == 'number')\r\n}\r\n\r\n/**\r\n * A function to extract the datetime field value from Server received objects\r\n *\r\n * If the given value is not a datetime field value, then the value is returned untouched\r\n */\r\nfunction extractDateObject(datetimeFieldValue) {\r\n  if (checkDatetimeValue(datetimeFieldValue))\r\n    return new Date(datetimeFieldValue[DATE_OBJECT_FIELD_NAME]);\r\n  else\r\n    return datetimeFieldValue\r\n}\r\n\r\n/** Converts a non UTC date obj or millis, to millis in UTC time */\r\nfunction convertToUTCMillis(date) {\r\n  if (typeof date === 'number')\r\n    return date + new Date().getTimezoneOffset() * 60 * 1000;\r\n  else\r\n    return date.getTime() + date.getTimezoneOffset() * 60 * 1000;\r\n}\r\n\r\n/** Converts anUTC date obj or millis, to millis in local time */\r\nfunction convertToLocalMillis(date) {\r\n  if (typeof date == 'number')\r\n    return date - new Date().getTimezoneOffset() * 60 * 1000;\r\n  else\r\n    return date.getTime() - date.getTimezoneOffset() * 60 * 1000\r\n}\r\n\r\nexport {checkDatetimeValue, extractDateObject, convertToUTCMillis, convertToLocalMillis, DATE_OBJECT_FIELD_NAME}\r\n","/**\r\n * Used to map a month index to the month name\r\n *\r\n * Example:\r\n *\r\n * ```javascript\r\n * monthName[new Date().getMonth()]\r\n * ```\r\n *\r\n * will return the name of the current month\r\n */\r\nconst monthName = [\r\n  'January',\r\n  'February',\r\n  'March',\r\n  'April',\r\n  'May',\r\n  'June',\r\n  'July',\r\n  'August',\r\n  'September',\r\n  'October',\r\n  'November',\r\n  'December'\r\n];\r\n\r\n/**\r\n * Used to map a day index to the weekday name\r\n *\r\n * Example:\r\n *\r\n * ```javascript\r\n * weekDayName[new Date().getDay()]\r\n * ```\r\n *\r\n * will return the name of the current week day\r\n */\r\nconst weekDayName = [\r\n  'Sunday',\r\n  'Monday',\r\n  'Tuesday',\r\n  'Wednesday',\r\n  'Thursday',\r\n  'Friday',\r\n  'Saturday'\r\n];\r\n\r\nconst ONE_HOUR_IN_MILLIS = 3.6e+6;\r\nconst ONE_DAY_IN_MILLIS = 8.64e+7;\r\nconst ONE_WEEK_IN_MILLIS = 6.048e+8;\r\nconst ONE_MONTH_IN_MILLIS = 2.628e+9;\r\nconst ONE_YEAR_IN_MILLIS = 3.154e+10;\r\n\r\n/** A function taking a data object and making it become a pretty string, optionally showing time or date */\r\nfunction dateToPrettyString(dateObj, time = true, date = true) {\r\n  if (typeof dateObj === 'number')\r\n    dateObj = new Date(dateObj)\r\n\r\n  if (time && date)\r\n    return dateObj.toLocaleString('en-GB', {timeZone: 'UTC'});\r\n  else if (time)\r\n    return dateObj.toLocaleTimeString('en-GB', {timeZone: 'UTC'});\r\n  else\r\n    return dateObj.toLocaleDateString('en-GB', {timeZone: 'UTC'})\r\n}\r\n\r\nexport {\r\n  weekDayName,\r\n  monthName,\r\n  ONE_HOUR_IN_MILLIS,\r\n  ONE_DAY_IN_MILLIS,\r\n  ONE_WEEK_IN_MILLIS,\r\n  ONE_MONTH_IN_MILLIS,\r\n  ONE_YEAR_IN_MILLIS,\r\n  dateToPrettyString\r\n}\r\n","import React from \"react\";\r\n\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME, selectDescription} from \"./ModelUtils\";\r\nimport {\r\n  DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n  SHIFT_FIELD_TO_PRETTY_DESCRIPTION\r\n} from \"./FieldValuesDictionaryToDescription\";\r\n\r\n// const currentScriptName = \"ExerciseSetMappingFieldNamesDictionaryToDescription.js\";\r\n\r\nconst EXERCISE_SET_MAPPING_ID_FIELD_NAME = '_id'\r\nconst EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME = 'suitable_exercise_sets'\r\nconst EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME = 'asked_question'\r\nconst EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME = 'user_answer'\r\nconst EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME = 'question_shift'\r\n\r\n/** Dictionary of data field names to their data handlers */\r\nconst EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION = {\r\n  [EXERCISE_SET_MAPPING_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"ID\",\r\n    keyPrettyNameLong: \"Exercise Set Mapping ID\",\r\n    valuePrettifier: (value, _shortDescription = false) => value[OBJECT_REFERENCE_ID_FIELD_NAME],\r\n  },\r\n  [EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Question\",\r\n    keyPrettyNameLong: \"Question\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n  [EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Answer\",\r\n    keyPrettyNameLong: \"Question answer\",\r\n    rawValuesToDescriptionMap: DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false) =>\r\n      selectDescription(DIFFICULTY_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription),\r\n  },\r\n  [EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Exercise Sets\",\r\n    keyPrettyNameLong: \"Suitable Exercise Sets\",\r\n    valuePrettifier: (value, _shortDescription = false) => JSON.stringify(value),\r\n  },\r\n  [EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME]: {\r\n    keyPrettyNameShort: \"Shift\",\r\n    keyPrettyNameLong: \"Question shift\",\r\n    rawValuesToDescriptionMap: SHIFT_FIELD_TO_PRETTY_DESCRIPTION,\r\n    valuePrettifier: (value, shortDescription = false) => {\r\n      const description = selectDescription(SHIFT_FIELD_TO_PRETTY_DESCRIPTION[value], shortDescription)\r\n      return description === undefined\r\n        ? <span><i className=\"text-muted icon-ban\"/></span>\r\n        : description\r\n    },\r\n  },\r\n};\r\n\r\nexport {\r\n  EXERCISE_SET_MAPPING_FIELD_NAME_TO_PRETTY_DESCRIPTION_FUNCTION,\r\n  EXERCISE_SET_MAPPING_ID_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_EXERCISE_SET_ID_LIST_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_ID_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_ANSWER_FIELD_NAME,\r\n  EXERCISE_SET_MAPPING_QUESTION_SHIFT_FIELD_NAME,\r\n}\r\n","import {CustomTooltips} from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\r\nimport {defaults} from \"react-chartjs-2\";\r\n\r\n/**\r\n * A function to write something over points in charts of Chart.js (namely on Line and Bar charts was tested)\r\n *\r\n * It should be called inside the bar chart options object like this way:\r\n *\r\n * ```javascript\r\n * {\r\n *  ...otherBarChartOptions,\r\n *  animation: {\r\n *    duration: 1,\r\n *    onComplete: function () {\r\n *      writePercentageOverBarsInChart(this, total)\r\n *    }\r\n *  }\r\n * }\r\n * ```\r\n */\r\nfunction writeInChart(self, total, getStringToWrite) {\r\n  const chartInstance = self.chart, ctx = chartInstance.ctx;\r\n  ctx.font = `${defaults.global.defaultFontSize}, ${defaults.global.defaultFontStyle}, ${defaults.global.defaultFontFamily}`;\r\n  ctx.fillStyle = self.chart.config.options.defaultFontColor;\r\n  ctx.textAlign = 'center';\r\n  ctx.textBaseline = 'bottom';\r\n\r\n  self.data.datasets.forEach(function (dataset, i) {\r\n    const meta = chartInstance.controller.getDatasetMeta(i);\r\n    meta.data.forEach(function (bar, index) {\r\n      const label = getStringToWrite(dataset.data[index], total);\r\n      ctx.fillText(label, bar._model.x, bar._model.y - 5);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * A function to write percentages in charts of Chart.js\r\n *\r\n * It should be called inside the bar chart options object like this way:\r\n *\r\n * ```javascript\r\n * {\r\n *  ...otherBarChartOptions,\r\n *  animation: {\r\n *    duration: 1,\r\n *    onComplete: function () {\r\n *      writePercentagesInChart(this, total)\r\n *    }\r\n *  }\r\n * }\r\n * ```\r\n *\r\n * @param self the chart instance\r\n * @param total the total value on which the graph is working on (needed to compute partial percentages\r\n */\r\nfunction writePercentagesInChart(self, total) {\r\n  writeInChart(self, total, (partial, total) => {\r\n    const percentage = (partial / total) * 100;\r\n    return `${Math.round(percentage * 10) / 10} %`;\r\n  });\r\n}\r\n\r\n/**\r\n * A function to write absolute values in charts of Chart.js\r\n *\r\n * It should be called inside the bar chart options object like this way:\r\n *\r\n * ```javascript\r\n * {\r\n *  ...otherBarChartOptions,\r\n *  animation: {\r\n *    duration: 1,\r\n *    onComplete: function () {\r\n *      writePercentagesInChart(this, total)\r\n *    }\r\n *  }\r\n * }\r\n * ```\r\n *\r\n * @param self the chart instance\r\n * @param total the total value on which the graph is working on (needed to compute partial percentages\r\n */\r\nfunction writeValuesInChart(self, total) {\r\n  writeInChart(self, total, (partial, _) => `${partial}`);\r\n}\r\n\r\nconst datasetsBorderColors = [\r\n  'rgba(50, 50, 50, 1)',\r\n  'rgba(0, 128, 255, 1)',\r\n  'rgba(255, 0, 127, 1)',\r\n  'rgba(0, 255, 255, 1)',\r\n  'rgba(0, 255, 128, 1)',\r\n  'rgba(0, 255, 0, 1)',\r\n  'rgba(128, 255, 0, 1)',\r\n  'rgba(255, 255, 0, 1)',\r\n  'rgba(255, 128, 0, 1)',\r\n  'rgba(255, 0, 0, 1)',\r\n  'rgba(255, 0, 255, 1)',\r\n  'rgba(127, 0, 255, 1)',\r\n  'rgba(0, 0, 255, 1)',\r\n]\r\n\r\nconst datasetsBackgroundColors = [\r\n  'rgba(155, 155, 155, 0.2)',\r\n  'rgba(0, 128, 255, 0.2)',\r\n  'rgba(255, 0, 127, 0.2)',\r\n  'rgba(0, 255, 255, 0.2)',\r\n  'rgba(0, 255, 128, 0.2)',\r\n  'rgba(0, 255, 0, 0.2)',\r\n  'rgba(128, 255, 0, 0.2)',\r\n  'rgba(255, 255, 0, 0.2)',\r\n  'rgba(255, 128, 0, 0.2)',\r\n  'rgba(255, 0, 0, 0.2)',\r\n  'rgba(255, 0, 255, 0.2)',\r\n  'rgba(127, 0, 255, 0.2)',\r\n  'rgba(0, 0, 255, 0.2)',\r\n]\r\n\r\nconst commonMultipleDimensionChartDataViewSettings = {\r\n  borderWidth: 1,\r\n  // hoverBackgroundColor: datasetsBackgroundColors[0],\r\n  // hoverBorderColor: datasetsBorderColors[0],\r\n}\r\n\r\nconst commonSingleDimensionChartDataViewSettings = {\r\n  backgroundColor: datasetsBackgroundColors[0],\r\n  borderColor: datasetsBorderColors[0],\r\n  borderWidth: 1,\r\n  hoverBackgroundColor: 'rgba(255, 99, 132, 0.4)',\r\n  hoverBorderColor: 'rgba(255, 99, 132, 1)',\r\n};\r\n\r\nconst commonChartOptions = {\r\n  tooltips: {\r\n    enabled: false,\r\n    custom: CustomTooltips\r\n  },\r\n  maintainAspectRatio: true,\r\n  legend: {\r\n    position: 'bottom'\r\n  },\r\n  hover: {\r\n    animationDuration: 0\r\n  }\r\n};\r\n\r\nexport {\r\n  writePercentagesInChart,\r\n  writeValuesInChart,\r\n  datasetsBorderColors,\r\n  datasetsBackgroundColors,\r\n  commonSingleDimensionChartDataViewSettings,\r\n  commonMultipleDimensionChartDataViewSettings,\r\n  commonChartOptions\r\n}\r\n","/** A utility function to make the first character of a string uppercase */\r\nfunction upperFirstChar(string) {\r\n  return string[0].toUpperCase() + string.slice(1);\r\n}\r\n\r\nexport {upperFirstChar}\r\n","import React, {Component} from \"react\";\r\nimport {\r\n  createLoading,\r\n  createPartialInitialStateFromFields,\r\n  load,\r\n  noDataAvailableComponent,\r\n  showLoadingOrRender\r\n} from \"../../../../utils/DataLoadingUtils\";\r\nimport {debug} from \"../../../../utils/Logging\";\r\nimport {Bar} from \"react-chartjs-2\";\r\n\r\nconst currentScriptName = \"MyBaseStaticChart.js\";\r\n\r\nconst FIELD_CHART_DATA = 'chartData';\r\nconst FIELD_CHART_OPTIONS = 'chartOptions';\r\n\r\nclass MyBaseStaticChart extends Component {\r\n\r\n  chartDataField = \"chartData\";\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.loadData.bind(this);\r\n\r\n    this.state = {\r\n      ...(createPartialInitialStateFromFields([this.chartDataField])),\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (JSON.stringify(prevProps.apiFunctionParams) !== JSON.stringify(this.props.apiFunctionParams)) {\r\n      debug(currentScriptName, \"Component should refresh the graph\");\r\n      debug(currentScriptName, \"oldProps\", prevProps);\r\n      debug(currentScriptName, \"newProps\", this.props);\r\n\r\n      this.setState({\r\n        ...(createPartialInitialStateFromFields([this.chartDataField]))\r\n      }, () => this.loadData());\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.loadData()\r\n  }\r\n\r\n  loadData() {\r\n    load(this, this.chartDataField, this.props.apiFunction, this.props.apiFunctionParams)\r\n  }\r\n\r\n  render() {\r\n    return showLoadingOrRender(this, this.chartDataField,\r\n      (data) => {\r\n        if ((Array.isArray(data) && data.length) || Object.keys(data).length) {\r\n          const chartDataAndOptionsObj = this.props.dataManipulationLogic(data);\r\n          const chartData = chartDataAndOptionsObj[FIELD_CHART_DATA];\r\n          const chartOptions = chartDataAndOptionsObj[FIELD_CHART_OPTIONS];\r\n          const ChartType = this.props.chartType || Bar;\r\n          return (\r\n            <div className=\"chart-wrapper\">\r\n              <ChartType data={chartData} options={chartOptions}/>\r\n            </div>\r\n          );\r\n        } else return noDataAvailableComponent()\r\n      },\r\n      this.props.loading ? this.props.loading({}) : createLoading({pt: 3, position: 'center'})\r\n    )\r\n  }\r\n}\r\n\r\nexport {MyBaseStaticChart, FIELD_CHART_DATA, FIELD_CHART_OPTIONS}\r\n","import React from \"react\";\r\nimport DropdownToggle from \"reactstrap/es/DropdownToggle\";\r\nimport DropdownMenu from \"reactstrap/es/DropdownMenu\";\r\nimport DropdownItem from \"reactstrap/es/DropdownItem\";\r\nimport ButtonDropdown from \"reactstrap/es/ButtonDropdown\";\r\nimport {Button} from \"reactstrap\";\r\n\r\n/** A function to create dropdowns or near buttons depending on how many options are present */\r\nexport default function createMultiSelectionButton(\r\n  self,\r\n  options,\r\n  currentSelected,\r\n  changeSelectionFunction,\r\n  dropDownThreshold = 2,\r\n  preprocessingBeforeShowing = (optionText) => optionText,\r\n  id = \"\"\r\n) {\r\n  const selectorOpen = `${options.join()}_Open_${id}`;\r\n  return options.length > dropDownThreshold ? (\r\n    <ButtonDropdown isOpen={self.state[selectorOpen]}\r\n                    toggle={() => {\r\n                      let newState = {};\r\n                      newState[selectorOpen] = !self.state[selectorOpen];\r\n                      self.setState(newState)\r\n                    }}>\r\n      <DropdownToggle caret>{preprocessingBeforeShowing(currentSelected)}</DropdownToggle>\r\n      <DropdownMenu>\r\n        {\r\n          options.map(option =>\r\n            <DropdownItem key={option} onClick={() => changeSelectionFunction(option)}>\r\n              {preprocessingBeforeShowing(option)}\r\n            </DropdownItem>\r\n          )\r\n        }\r\n      </DropdownMenu>\r\n    </ButtonDropdown>\r\n  ) : (\r\n    options.map(option =>\r\n      <Button key={option} color=\"outline-secondary\" onClick={() => changeSelectionFunction(option)}\r\n              active={currentSelected === option}>{preprocessingBeforeShowing(option)}</Button>\r\n    )\r\n  )\r\n}\r\n","/**\r\n * A function to convert milliseconds to human readable time duration\r\n *\r\n * Taken from: https://gist.github.com/robertpataki/d0b40a1cbbb71764dd94e16cbc99d42f\r\n * and https://gist.github.com/Erichain/6d2c2bf16fe01edfcffa\r\n */\r\nfunction millisToDurationString(millis, delimiter = \" : \") {\r\n  const showWith0 = value => (value < 10 ? `0${value}` : value);\r\n  let seconds = Math.floor(millis / 1000);\r\n  let minute = Math.floor(seconds / 60);\r\n  seconds = seconds % 60;\r\n  let hour = Math.floor(minute / 60);\r\n  minute = minute % 60;\r\n  let day = Math.floor(hour / 24);\r\n  hour = hour % 24;\r\n\r\n  const dayString = `${day}`\r\n  const hourString = showWith0(hour)\r\n  const minuteString = showWith0(minute)\r\n  const secondsString = showWith0(seconds)\r\n  return `${day ? `${dayString}d${delimiter}` : \"\"}${hour ? `${hourString}h${delimiter}` : \"\"}${minuteString}m${delimiter}${secondsString}s`;\r\n}\r\n\r\nexport {millisToDurationString}\r\n","import React, {Component} from \"react\";\r\nimport {FIELD_CHART_DATA, FIELD_CHART_OPTIONS, MyBaseStaticChart} from \"./MyBaseStaticChart\";\r\nimport {convertToLocalMillis} from \"../../../../model/DatetimeExtractor\";\r\nimport {commonChartOptions, commonSingleDimensionChartDataViewSettings} from \"../../../../utils/ChartJsUtils\";\r\nimport {dateToPrettyString} from \"../../../../utils/DateUtils\";\r\n\r\nconst TIMESTAMP_FIELD = 'timestamp';\r\nconst LEVEL_FIELD = 'level';\r\n\r\nexport default class StaticEventChartWithYLevel extends Component {\r\n  render() {\r\n    return <MyBaseStaticChart\r\n\r\n      apiFunction={this.props.apiFunction}\r\n      apiFunctionParams={this.props.apiFunctionParams}\r\n      chartType={this.props.chartType}\r\n      loading={this.props.loading}\r\n\r\n      dataManipulationLogic={(data) => {\r\n        let xyData = data.map(timestamp_level_pair => {\r\n          const dateObj = new Date(timestamp_level_pair[TIMESTAMP_FIELD] * 1000);\r\n          return {x: convertToLocalMillis(dateObj), y: timestamp_level_pair[LEVEL_FIELD]}\r\n        });\r\n\r\n        xyData = xyData.sort((xy1, xy2) => xy1.x - xy2.x);\r\n\r\n        const dataLegend = this.props.dataLegend;\r\n        const chartData = {\r\n          labels: xyData.map(xy => xy.x),\r\n          datasets: [{\r\n            ...commonSingleDimensionChartDataViewSettings,\r\n            label: dataLegend,\r\n            data: xyData\r\n          }]\r\n        };\r\n        const chartOptions = {\r\n          ...commonChartOptions,\r\n          tooltips: {\r\n            enabled: true,\r\n            callbacks: {\r\n              title: function (tooltipItem, _data) {\r\n                // console.log(tooltipItem)\r\n                return dateToPrettyString(tooltipItem[0].xLabel);\r\n              },\r\n              label: function (tooltipItem, _data) {\r\n                // console.log(tooltipItem)\r\n                return `Level ${tooltipItem.yLabel.toFixed(1)}`\r\n              }\r\n            }\r\n          },\r\n          scales: {\r\n            yAxes: [{\r\n              scaleLabel: {\r\n                display: true,\r\n                labelString: this.props.yLabelString,\r\n              },\r\n              ticks: {\r\n                stepSize: 0.1\r\n              }\r\n            }],\r\n            xAxes: [{\r\n              ticks: {\r\n                autoSkip: false,\r\n                callback: function (value, _index, _values) {\r\n                  return dateToPrettyString(value, false);\r\n                }\r\n              }\r\n            }]\r\n          }\r\n        };\r\n\r\n        let toReturn = {};\r\n        toReturn[FIELD_CHART_DATA] = chartData;\r\n        toReturn[FIELD_CHART_OPTIONS] = chartOptions;\r\n        return toReturn;\r\n      }}\r\n    />\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\r\nimport {Bubble, Line, Scatter} from \"react-chartjs-2\";\r\nimport {ButtonGroup, ButtonToolbar, Card, CardBody, CardHeader} from \"reactstrap\";\r\nimport StaticEventChartWithYLevel from \"./StaticEventChartWithYLevel\";\r\nimport {\r\n  ONE_DAY_IN_MILLIS,\r\n  ONE_MONTH_IN_MILLIS,\r\n  ONE_WEEK_IN_MILLIS,\r\n  ONE_YEAR_IN_MILLIS\r\n} from \"../../../../utils/DateUtils\";\r\nimport createMultiSelectionButton from \"../buttons/MultiSelectionButton\";\r\nimport FullScreen from \"react-full-screen\";\r\nimport {TIME_WINDOW_START} from \"../../../../controller/ServerApi\";\r\n\r\nconst EVENT_CHART_TYPE_BUBBLE = \"Bubble\"\r\nconst EVENT_CHART_TYPE_SCATTER = \"Scatter\"\r\nconst EVENT_CHART_TYPE_LINE = \"Line\"\r\n\r\nconst EVENT_CHART_TIME_WINDOW_ALL = \"All Time\"\r\nconst EVENT_CHART_TIME_WINDOW_LAST_YEAR = \"Last Year\"\r\nconst EVENT_CHART_TIME_WINDOW_LAST_SIX_MONTHS = \"Last 6 Months\"\r\nconst EVENT_CHART_TIME_WINDOW_LAST_THREE_MONTHS = \"Last 3 Months\"\r\nconst EVENT_CHART_TIME_WINDOW_LAST_MONTH = \"Last Month\"\r\nconst EVENT_CHART_TIME_WINDOW_LAST_WEEK = \"Last Week\"\r\nconst EVENT_CHART_TIME_WINDOW_LAST_DAY = \"Last Day\"\r\n\r\nconst DEFAULT_CHART_TYPE = EVENT_CHART_TYPE_LINE;\r\nconst DEFAULT_TIME_WINDOW = EVENT_CHART_TIME_WINDOW_ALL;\r\n\r\nclass CardEventChartWithOptions extends Component {\r\n\r\n  /** Object holding mappings between the chart type name and its class */\r\n  chartTypes = {};\r\n\r\n  /** Object holding mappings between the chart time window name and a function computing the start time */\r\n  timeWindows = {};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.chartTypes[EVENT_CHART_TYPE_BUBBLE] = Bubble\r\n    this.chartTypes[EVENT_CHART_TYPE_SCATTER] = Scatter\r\n    this.chartTypes[EVENT_CHART_TYPE_LINE] = Line\r\n\r\n    this.timeWindows[EVENT_CHART_TIME_WINDOW_ALL] = {startTime: () => 0}\r\n    this.timeWindows[EVENT_CHART_TIME_WINDOW_LAST_YEAR] = {startTime: () => Date.now() - ONE_YEAR_IN_MILLIS}\r\n    this.timeWindows[EVENT_CHART_TIME_WINDOW_LAST_SIX_MONTHS] = {startTime: () => Date.now() - (ONE_MONTH_IN_MILLIS * 6)}\r\n    this.timeWindows[EVENT_CHART_TIME_WINDOW_LAST_THREE_MONTHS] = {startTime: () => Date.now() - (ONE_MONTH_IN_MILLIS * 3)}\r\n    this.timeWindows[EVENT_CHART_TIME_WINDOW_LAST_MONTH] = {startTime: () => Date.now() - ONE_MONTH_IN_MILLIS}\r\n    this.timeWindows[EVENT_CHART_TIME_WINDOW_LAST_WEEK] = {startTime: () => Date.now() - ONE_WEEK_IN_MILLIS}\r\n    this.timeWindows[EVENT_CHART_TIME_WINDOW_LAST_DAY] = {startTime: () => Date.now() - ONE_DAY_IN_MILLIS}\r\n\r\n    this.state = {\r\n      selectedTimeWindow: props.defaultTimeWindow || DEFAULT_TIME_WINDOW,\r\n      selectedChartType: props.defaultChartType || DEFAULT_CHART_TYPE,\r\n\r\n      isFullScreen: false,\r\n    }\r\n  }\r\n\r\n  toggleFullScreen = () => {\r\n    this.setState({isFullScreen: !this.state.isFullScreen});\r\n  }\r\n\r\n  changeLastTimeWindow(newTimeWindow) {\r\n    this.setState({selectedTimeWindow: newTimeWindow})\r\n  }\r\n\r\n  changeChartType(newChartType) {\r\n    this.setState({selectedChartType: newChartType})\r\n  }\r\n\r\n  render() {\r\n    const {selectedTimeWindow, selectedChartType} = this.state;\r\n\r\n    return (\r\n      <FullScreen enabled={this.state.isFullScreen}>\r\n        <Card className=\"full-screenable-node\">\r\n          <CardHeader>\r\n            <span className=\"h5\"><strong>{this.props.title}</strong> </span>\r\n            <div className=\"card-header-actions\">\r\n              <ButtonToolbar className=\"float-right\" aria-label=\"Toolbar with chart options button groups\">\r\n                <ButtonGroup className=\"mr-3\" aria-label=\"Time group\">\r\n                  {\r\n                    createMultiSelectionButton(this,\r\n                      Object.keys(this.timeWindows),\r\n                      selectedTimeWindow,\r\n                      this.changeLastTimeWindow.bind(this)\r\n                    )\r\n                  }\r\n                </ButtonGroup>\r\n                <ButtonGroup className=\"mr-3\" aria-label=\"Chart group\">\r\n                  {\r\n                    createMultiSelectionButton(this,\r\n                      Object.keys(this.chartTypes),\r\n                      selectedChartType,\r\n                      this.changeChartType.bind(this),\r\n                      3\r\n                    )\r\n                  }\r\n                </ButtonGroup>\r\n                <i className={`${this.state.isFullScreen ? \"fa fa-compress\" : \"fa fa-expand\"} ml-3`}\r\n                   onClick={this.toggleFullScreen}/>\r\n              </ButtonToolbar>\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody>\r\n            <StaticEventChartWithYLevel\r\n              apiFunction={this.props.apiFunction}\r\n              apiFunctionParams={(() => {\r\n                let apiParams = this.props.apiFunctionParams ? {...this.props.apiFunctionParams} : {};\r\n                apiParams[TIME_WINDOW_START] = this.timeWindows[selectedTimeWindow].startTime();\r\n                return apiParams;\r\n              })()}\r\n              chartType={this.chartTypes[selectedChartType]}\r\n              yLabelString={\"User Level\"}\r\n              dataLegend={this.props.dataLegend || this.props.title}\r\n              loading={this.props.loading}/>\r\n          </CardBody>\r\n        </Card>\r\n      </FullScreen>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport {\r\n  CardEventChartWithOptions,\r\n  EVENT_CHART_TYPE_BUBBLE,\r\n  EVENT_CHART_TYPE_SCATTER,\r\n  EVENT_CHART_TYPE_LINE,\r\n  EVENT_CHART_TIME_WINDOW_ALL,\r\n  EVENT_CHART_TIME_WINDOW_LAST_YEAR,\r\n  EVENT_CHART_TIME_WINDOW_LAST_SIX_MONTHS,\r\n  EVENT_CHART_TIME_WINDOW_LAST_THREE_MONTHS,\r\n  EVENT_CHART_TIME_WINDOW_LAST_MONTH,\r\n  EVENT_CHART_TIME_WINDOW_LAST_WEEK,\r\n  EVENT_CHART_TIME_WINDOW_LAST_DAY,\r\n}\r\n","import React, {Component} from 'react';\r\nimport {Card, CardBody, CardHeader, Col, Row, Table} from 'reactstrap';\r\nimport {\r\n  getAll,\r\n  getSingle,\r\n  getUserLevelHistory,\r\n  SERVER_EXERCISE_ENDPOINT,\r\n  SERVER_QUESTION_ENDPOINT,\r\n  SERVER_USER_ENDPOINT,\r\n  SERVER_USER_GOAL_ENDPOINT\r\n} from \"../../../../controller/ServerApi\";\r\nimport {\r\n  createLoading,\r\n  createPartialInitialStateFromFields,\r\n  load,\r\n  noDataAvailableComponent,\r\n  showLoadingOrRender\r\n} from \"../../../../utils/DataLoadingUtils\";\r\nimport {\r\n  DONE_EXERCISE_EXERCISE_ID_FIELD_NAME,\r\n  SPORT_SESSION_ABORTED_FIELD_NAME,\r\n  SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME,\r\n  SPORT_SESSION_ENDED_AT_FIELD_NAME,\r\n  SPORT_SESSION_FUN_RATING_FIELD_NAME,\r\n  SPORT_SESSION_STARTED_AT_FIELD_NAME,\r\n  USER_AGE_FIELD_NAME,\r\n  USER_CURRENT_QUESTION_ANSWER_FIELD_NAME,\r\n  USER_CURRENT_QUESTION_ID_FIELD_NAME,\r\n  USER_FAVOURITE_SPORT_DAYS_FIELD_NAME,\r\n  USER_FIRST_NAME_FIELD_NAME,\r\n  USER_GOAL_IDS_FIELD_NAME,\r\n  USER_ID_FIELD_NAME,\r\n  USER_LANGUAGE_FIELD_NAME,\r\n  USER_LAST_INTERACTION_FIELD_NAME,\r\n  USER_SEX_FIELD_NAME,\r\n  USER_SPORT_SESSIONS_ARRAY_FIELD_NAME\r\n} from \"../../../../model/ProfileFieldNamesDictionaryToHandlers\";\r\nimport {OBJECT_REFERENCE_ID_FIELD_NAME} from \"../../../../model/ModelUtils\";\r\nimport {getKeyHandlerFor, prettifyFieldName} from \"../../../../model/FieldPrettifyHandler\";\r\nimport {allGoalsIDsToDescription} from \"../../../../model/UserGoalFieldNamesDictionaryToDescription\";\r\nimport {allQuestionsIDsToDescription} from \"../../../../model/QuestionFieldNamesDictionaryToDescription\";\r\nimport {computeQuestionLevel} from \"../../../../model/QuestionsUtils\";\r\nimport DataTable from \"react-data-table-component\";\r\nimport {convertToUTCMillis, DATE_OBJECT_FIELD_NAME, extractDateObject} from \"../../../../model/DatetimeExtractor\";\r\nimport Badge from \"reactstrap/es/Badge\";\r\nimport {millisToDurationString} from \"../../../../utils/TimeDurationUtils\";\r\nimport {allExercisesIDsToDescription} from \"../../../../model/ExerciseFieldNamesDictionaryToDescription\";\r\nimport './User.css'\r\nimport {\r\n  CardEventChartWithOptions,\r\n  EVENT_CHART_TIME_WINDOW_LAST_WEEK,\r\n  EVENT_CHART_TYPE_LINE\r\n} from \"../../components/charts/CardEventChartWithOptions\";\r\n\r\n// const currentScriptName = \"User.js\";\r\n\r\n/** Function to compute sport session status */\r\nconst computeSportSessionStatus = sportSession =>\r\n  sportSession[SPORT_SESSION_ABORTED_FIELD_NAME] === true\r\n    ? 'Aborted'\r\n    : sportSession[SPORT_SESSION_ENDED_AT_FIELD_NAME] !== undefined ? 'Completed' : 'Pending'\r\n\r\n/** Function to get color badge from user sport session status */\r\nconst getBadgeColorFromStatus = status => {\r\n  return status === 'Completed' ? 'success' :\r\n    status === 'Pending' ? 'secondary' :\r\n      status === 'Aborted' ? 'warning' :\r\n        status === 'Inactive' ? 'danger' :\r\n          'primary';\r\n}\r\n\r\nclass User extends Component {\r\n\r\n  userDataField = \"userData\";\r\n  allUserGoals = \"allUserGoals\"\r\n  allEvaluationQuestions = \"allEvaluationQuestions\"\r\n  allExercises = \"allExercises\"\r\n\r\n  fieldNames = [\r\n    this.userDataField,\r\n    this.allUserGoals,\r\n    this.allEvaluationQuestions,\r\n    this.allExercises,\r\n  ];\r\n\r\n  toBeShownValues = [\r\n    USER_FIRST_NAME_FIELD_NAME,\r\n    USER_LANGUAGE_FIELD_NAME,\r\n    USER_AGE_FIELD_NAME,\r\n    USER_SEX_FIELD_NAME,\r\n    USER_FAVOURITE_SPORT_DAYS_FIELD_NAME,\r\n    USER_GOAL_IDS_FIELD_NAME,\r\n    USER_CURRENT_QUESTION_ID_FIELD_NAME,\r\n    USER_CURRENT_QUESTION_ANSWER_FIELD_NAME,\r\n    USER_LAST_INTERACTION_FIELD_NAME,\r\n  ]\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ...(createPartialInitialStateFromFields(this.fieldNames)),\r\n    };\r\n\r\n    this.getCurrentID.bind(this);\r\n\r\n    load(this, this.userDataField, getSingle, {serverEndPoint: SERVER_USER_ENDPOINT, id: this.getCurrentID()});\r\n    load(this, this.allUserGoals, getAll, {serverEndPoint: SERVER_USER_GOAL_ENDPOINT});\r\n    load(this, this.allEvaluationQuestions, getAll, {serverEndPoint: SERVER_QUESTION_ENDPOINT});\r\n    load(this, this.allExercises, getAll, {serverEndPoint: SERVER_EXERCISE_ENDPOINT});\r\n  }\r\n\r\n  getCurrentID() {\r\n    return this.props.match.params.id\r\n  }\r\n\r\n  unpackUserDetails(userDataObj) {\r\n    return userDataObj\r\n      ? Object.entries(userDataObj) :\r\n      [[USER_FIRST_NAME_FIELD_NAME, (<span><i className=\"text-muted icon-ban\"/> Not found</span>)]];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"animated fadeIn\">\r\n        <Row>\r\n          <Col lg={6}>\r\n            {\r\n              showLoadingOrRender(this, this.userDataField,\r\n                (data) => {\r\n                  const userDetails = this.unpackUserDetails(data);\r\n                  return (\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <strong>\r\n                          <i className=\"icon-info pr-1\"/>\r\n                          User ID: {data[USER_ID_FIELD_NAME][OBJECT_REFERENCE_ID_FIELD_NAME]}\r\n                        </strong>\r\n                      </CardHeader>\r\n                      <CardBody>\r\n                        <Table responsive striped hover>\r\n                          <tbody>\r\n                          {\r\n                            userDetails.map(([key, value]) => {\r\n                              if (this.toBeShownValues.includes(key)) {\r\n                                const keyDataHandler = getKeyHandlerFor(key);\r\n                                const defaultRow = (\r\n                                  <tr key={key}>\r\n                                    <td>{`${keyDataHandler.keyPrettyNameLong}:`}</td>\r\n                                    <td><strong>{keyDataHandler.valuePrettifier(value, false, true)}</strong></td>\r\n                                  </tr>\r\n                                );\r\n                                if (key === USER_GOAL_IDS_FIELD_NAME) {\r\n                                  return showLoadingOrRender(this, this.allUserGoals,\r\n                                    goals => {\r\n                                      const goalsPrettyMapping = allGoalsIDsToDescription(goals)\r\n                                      return (\r\n                                        <tr key={key}>\r\n                                          <td>{`${keyDataHandler.keyPrettyNameLong}:`}</td>\r\n                                          <td><strong>\r\n                                            {\r\n                                              value.map(oid =>\r\n                                                goalsPrettyMapping[oid[OBJECT_REFERENCE_ID_FIELD_NAME]]\r\n                                              ).join(', ')\r\n                                            }\r\n                                          </strong></td>\r\n                                        </tr>\r\n                                      )\r\n                                    },\r\n                                    defaultRow\r\n                                  )\r\n                                } else if (key === USER_CURRENT_QUESTION_ID_FIELD_NAME) {\r\n                                  return showLoadingOrRender(this, this.allEvaluationQuestions,\r\n                                    questions => {\r\n                                      const questionPrettyMapping = allQuestionsIDsToDescription(questions)\r\n                                      return (\r\n                                        <tr key={key}>\r\n                                          <td>{`${keyDataHandler.keyPrettyNameLong}:`}</td>\r\n                                          <td><strong>\r\n                                            {\r\n                                              `Level ${computeQuestionLevel(questions, value[OBJECT_REFERENCE_ID_FIELD_NAME])}\r\n                                               → ${questionPrettyMapping[value[OBJECT_REFERENCE_ID_FIELD_NAME]]}`\r\n                                            }\r\n                                          </strong></td>\r\n                                        </tr>\r\n                                      )\r\n                                    },\r\n                                    defaultRow\r\n                                  )\r\n                                } else\r\n                                  return defaultRow;\r\n                              } else {\r\n                                return null; // doesn't create an element\r\n                              }\r\n                            })\r\n                          }\r\n                          </tbody>\r\n                        </Table>\r\n                      </CardBody>\r\n                    </Card>\r\n                  )\r\n                },\r\n                createLoading({pt: 3, position: 'center'})\r\n              )\r\n            }\r\n          </Col>\r\n\r\n          <Col lg={6}>\r\n            <Card>\r\n              <CardHeader>\r\n                <i className=\"fa fa-align-justify\"/> Sport sessions\r\n              </CardHeader>\r\n              <CardBody>\r\n                {\r\n                  showLoadingOrRender(this, this.userDataField,\r\n                    currentUser => {\r\n                      const statusFieldName = 'Status'\r\n                      const durationFieldName = 'Duration'\r\n\r\n                      let exercisesPrettyMapping = undefined\r\n\r\n                      const shownFields = [\r\n                        SPORT_SESSION_STARTED_AT_FIELD_NAME,\r\n                        statusFieldName,\r\n                        durationFieldName,\r\n                        SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME,\r\n                        SPORT_SESSION_FUN_RATING_FIELD_NAME,\r\n                      ];\r\n\r\n                      const getColumnWidthProportion = columnName => {\r\n                        if ([SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME].includes(columnName))\r\n                          return \"8\"; // largest\r\n                        else if ([SPORT_SESSION_STARTED_AT_FIELD_NAME].includes(columnName))\r\n                          return \"6\"; // medium\r\n                        else if ([durationFieldName, statusFieldName, SPORT_SESSION_FUN_RATING_FIELD_NAME].includes(columnName))\r\n                          return \"1\" // smallest\r\n                        else return \"4\" // normal\r\n                      }\r\n\r\n                      const computeSportSessionDuration = sportSession => {\r\n                        if (sportSession[SPORT_SESSION_ENDED_AT_FIELD_NAME] === undefined)\r\n                          return undefined\r\n                        else\r\n                          return (\r\n                            convertToUTCMillis(extractDateObject(sportSession[SPORT_SESSION_ENDED_AT_FIELD_NAME]))\r\n                            - convertToUTCMillis(extractDateObject(sportSession[SPORT_SESSION_STARTED_AT_FIELD_NAME]))\r\n                          )\r\n                      }\r\n\r\n                      const dataColumns = shownFields.map(field => {\r\n                        return {\r\n                          name: prettifyFieldName(field, true),\r\n                          sortable: true,\r\n                          grow: getColumnWidthProportion(field),\r\n                          wrap: [\r\n                            SPORT_SESSION_STARTED_AT_FIELD_NAME,\r\n                            SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME,\r\n                            durationFieldName\r\n                          ].includes(field),\r\n\r\n                          // callback to produce data to be sorted\r\n                          selector: sportSession => {\r\n                            if (field === statusFieldName)\r\n                              return computeSportSessionStatus(sportSession)\r\n                            else if (field === durationFieldName) {\r\n                              const sportSessionDuration = computeSportSessionDuration(sportSession)\r\n                              return sportSessionDuration === undefined ? '' : millisToDurationString(sportSessionDuration)\r\n                            } else if ([SPORT_SESSION_STARTED_AT_FIELD_NAME].includes(field))\r\n                              return convertToUTCMillis(extractDateObject(sportSession[field]));\r\n                            else if (field === SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME)\r\n                              return showLoadingOrRender(this, this.allExercises,\r\n                                exercises => {\r\n                                  if (!exercisesPrettyMapping)\r\n                                    exercisesPrettyMapping = allExercisesIDsToDescription(exercises)\r\n\r\n                                  return sportSession[SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME]\r\n                                    .map(doneExercise => doneExercise[DONE_EXERCISE_EXERCISE_ID_FIELD_NAME])\r\n                                    .map(oid => oid[OBJECT_REFERENCE_ID_FIELD_NAME])\r\n                                    .map(id => exercisesPrettyMapping[id])\r\n                                    .join(\", \")\r\n                                },\r\n                                getKeyHandlerFor(field).valuePrettifier(sportSession[field], true, false)\r\n                              )\r\n                            else\r\n                              return getKeyHandlerFor(field).valuePrettifier(sportSession[field], true, false);\r\n                          },\r\n\r\n                          // callback to produce views to be shown\r\n                          format: sportSession => {\r\n                            if (field === statusFieldName) {\r\n                              const sportSessionStatus = computeSportSessionStatus(sportSession)\r\n                              return (\r\n                                <Badge color={getBadgeColorFromStatus(sportSessionStatus)}>\r\n                                  {sportSessionStatus}\r\n                                </Badge>\r\n                              )\r\n                            } else if (field === durationFieldName) {\r\n                              const sportSessionDuration = computeSportSessionDuration(sportSession)\r\n                              return sportSessionDuration === undefined\r\n                                ? <i className={\"fa fa-ellipsis-h\"}/>\r\n                                : millisToDurationString(sportSessionDuration)\r\n                            } else if (field === SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME)\r\n                              return showLoadingOrRender(this, this.allExercises,\r\n                                exercises => {\r\n                                  if (!exercisesPrettyMapping)\r\n                                    exercisesPrettyMapping = allExercisesIDsToDescription(exercises)\r\n\r\n                                  const sportSessionArray = sportSession[SPORT_SESSION_DONE_EXERCISES_ARRAY_FIELD_NAME]\r\n                                  return sportSessionArray.length > 0\r\n                                    ? sportSessionArray\r\n                                      .map(doneExercise => doneExercise[DONE_EXERCISE_EXERCISE_ID_FIELD_NAME])\r\n                                      .map(oid => oid[OBJECT_REFERENCE_ID_FIELD_NAME])\r\n                                      .map(id => exercisesPrettyMapping[id])\r\n                                      .join(\", \")\r\n                                    : <i className={\"icon-ban\"}/>\r\n                                },\r\n                                getKeyHandlerFor(field).valuePrettifier(sportSession[field], true, true)\r\n                              )\r\n                            else if (field === SPORT_SESSION_FUN_RATING_FIELD_NAME)\r\n                              return sportSession[field] === undefined\r\n                                ? <i className={\"icon-ban font-1xl\"}/>\r\n                                : getKeyHandlerFor(field).valuePrettifier(sportSession[field], true, true)\r\n                            else\r\n                              return getKeyHandlerFor(field).valuePrettifier(sportSession[field], true, true)\r\n                          },\r\n                        }\r\n                      })\r\n\r\n                      return <DataTable noHeader={true}\r\n                                        columns={dataColumns}\r\n                                        data={currentUser[USER_SPORT_SESSIONS_ARRAY_FIELD_NAME]}\r\n                                        keyField={`${SPORT_SESSION_STARTED_AT_FIELD_NAME}.${DATE_OBJECT_FIELD_NAME}`}\r\n                                        defaultSortField={SPORT_SESSION_STARTED_AT_FIELD_NAME}\r\n                                        defaultSortAsc={false}\r\n                                        striped={true}\r\n                                        highlightOnHover={true}\r\n                                        noDataComponent={noDataAvailableComponent()}\r\n                        // dense={true} // enable if wanted more compact rows\r\n                                        pagination={true}\r\n                                        paginationPerPage={5}\r\n                                        paginationRowsPerPageOptions={[5, 10, 20, 50, 100, 200, 500]}\r\n                                        className={\"user-table\"}\r\n                      />\r\n                    },\r\n                    createLoading({})\r\n                  )\r\n                }\r\n              </CardBody>\r\n            </Card>\r\n\r\n            <CardEventChartWithOptions\r\n              apiFunction={getUserLevelHistory}\r\n              apiFunctionParams={{\r\n                id: this.getCurrentID()\r\n              }}\r\n              defaultChartType={EVENT_CHART_TYPE_LINE}\r\n              defaultTimeWindow={EVENT_CHART_TIME_WINDOW_LAST_WEEK}\r\n              title={\"User progress\"}\r\n              singleDimensionDataLegend={\"User level\"}\r\n              loading={createLoading}\r\n            />\r\n\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default User;\r\n"],"sourceRoot":""}